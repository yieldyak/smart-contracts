{
  "address": "0xb8Ca0076E9a416bd8D5D40DfdeE099BF46Dd9c30",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gmxDepositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyAndStakeGlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardTracker",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxDepositor",
      "outputs": [
        {
          "internalType": "contract IGmxDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxRewardRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x00d56cb360c06e698553ad909bfd584133eb36d9d3b9025d40080001bb7aa711",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xb8Ca0076E9a416bd8D5D40DfdeE099BF46Dd9c30",
    "transactionIndex": 1,
    "gasUsed": "1297871",
    "logsBloom": "0x
    "blockHash": "0x7ed0abcdfe46b7ffee49bbcd6aace78fe33d42cdf794e9c84ce12133cb623809",
    "transactionHash": "0x00d56cb360c06e698553ad909bfd584133eb36d9d3b9025d40080001bb7aa711",
    "logs": [],
    "blockNumber": 11346712,
    "cumulativeGasUsed": "1347128",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x565d72A63d3dc4a2F3Dd7609Fd85c4FD394523B2",
    "0x82147C5A7E850eA4E28155DF107F2590fD4ba327",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
  ],
  "solcInputHash": "59d3ebf47c1bb3477c9eced8d481a934",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gmxDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardTracker\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxDepositor\",\"outputs\":[{\"internalType\":\"contract IGmxDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxRewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/GmxProxy.sol\":\"GmxProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/IGmxDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IGmxDepositor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function setGmxProxy(address _proxy) external;\\n}\\n\",\"keccak256\":\"0xb173ed6ce6d5f5c4b7a6e2b6ad7a04f17360e3901f9388e580ee2a681f071422\",\"license\":\"MIT\"},\"contracts/interfaces/IGmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./IGmxDepositor.sol\\\";\\n\\ninterface IGmxProxy {\\n    function gmxDepositor() external view returns (IGmxDepositor);\\n\\n    function gmxRewardRouter() external view returns (address);\\n\\n    function buyAndStakeGlp(uint256 _amount) external returns (uint256);\\n\\n    function withdrawGlp(uint256 _amount) external;\\n\\n    function stakeGmx(uint256 _amount) external;\\n\\n    function withdrawGmx(uint256 _amount) external;\\n\\n    function pendingRewards(address _rewardTracker) external view returns (uint256);\\n\\n    function claimReward(address _rewardTracker) external;\\n\\n    function totalDeposits(address _rewardTracker) external view returns (uint256);\\n\\n    function emergencyWithdrawGLP(uint256 _balance) external;\\n\\n    function emergencyWithdrawGMX(uint256 _balance) external;\\n}\\n\",\"keccak256\":\"0xeedb27a3a03c64ffd8a6327c6b5d1dc8afe14b19c3829b2239dfecfdae5ca8cc\",\"license\":\"MIT\"},\"contracts/interfaces/IGmxRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IGmxRewardRouter {\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function bonusGmxTracker() external view returns (address);\\n\\n    function feeGmxTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function mintAndStakeGlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\",\"keccak256\":\"0x04dac8c0750cb586772e29ffa22569b46fe4212bfec3451ec29ee71ce893fc8c\",\"license\":\"MIT\"},\"contracts/interfaces/IGmxRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IGmxRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x669ad2faba75d3d26057657dff42933a8147df2cad77e8bd12494f77aefff66a\",\"license\":\"MIT\"},\"contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IYakStrategy {\\n    function depositToken() external view returns (address);\\n    function depositFor(address account, uint amount) external;\\n}\",\"keccak256\":\"0x7b3fa252348886727311be77d2aed52ffa7b8389586e26589d96b69db70cf262\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c2ca57501dc5f1d71e5a5e39616343b9bd57e363c50c4abbeab13059ce2c0ab\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa79bdc482a4a886790bbfecb531127ead361d3a82abd0aa1e175b7fc1733a6f6\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/GmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IGmxDepositor.sol\\\";\\nimport \\\"../interfaces/IGmxRewardRouter.sol\\\";\\nimport \\\"../interfaces/IGmxRewardTracker.sol\\\";\\nimport \\\"../interfaces/IYakStrategy.sol\\\";\\nimport \\\"../interfaces/IGmxProxy.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(\\n        IGmxDepositor gmxDepositor,\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returnValue) = gmxDepositor.execute(target, value, data);\\n        if (!success) revert(\\\"GmxProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\ncontract GmxProxy is IGmxProxy {\\n    using SafeMath for uint256;\\n    using SafeProxy for IGmxDepositor;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    address internal constant GMX = 0x62edc0692BD897D2295872a9FFCac5425011c661;\\n    address internal constant fsGLP = 0x5643F4b25E36478eE1E90418d5343cb6591BcB9d;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address public devAddr;\\n    mapping(address => address) public approvedStrategies;\\n\\n    IGmxDepositor public immutable override gmxDepositor;\\n    address public immutable override gmxRewardRouter;\\n\\n    address internal immutable gmxRewardTracker;\\n    address internal immutable glpManager;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"GmxProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(\\n            approvedStrategies[fsGLP] == msg.sender || approvedStrategies[GMX] == msg.sender,\\n            \\\"GmxProxy:onlyGLPStrategy\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGLPStrategy() {\\n        require(approvedStrategies[fsGLP] == msg.sender, \\\"GmxProxy:onlyGLPStrategy\\\");\\n        _;\\n    }\\n\\n    modifier onlyGMXStrategy() {\\n        require(approvedStrategies[GMX] == msg.sender, \\\"GmxProxy::onlyGMXStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _gmxDepositor,\\n        address _gmxRewardRouter,\\n        address _devAddr\\n    ) {\\n        devAddr = _devAddr;\\n        gmxDepositor = IGmxDepositor(_gmxDepositor);\\n        gmxRewardRouter = _gmxRewardRouter;\\n        gmxRewardTracker = IGmxRewardRouter(_gmxRewardRouter).stakedGmxTracker();\\n        glpManager = IGmxRewardRouter(_gmxRewardRouter).glpManager();\\n    }\\n\\n    function updateDevAddr(address newValue) public onlyDev {\\n        devAddr = newValue;\\n    }\\n\\n    function approveStrategy(address _strategy) external onlyDev {\\n        address depositToken = IYakStrategy(_strategy).depositToken();\\n        require(approvedStrategies[depositToken] == address(0), \\\"GmxProxy::Strategy for deposit token already added\\\");\\n        approvedStrategies[depositToken] = _strategy;\\n    }\\n\\n    function buyAndStakeGlp(uint256 _amount) external override onlyGLPStrategy returns (uint256) {\\n        IERC20(WAVAX).safeTransfer(address(gmxDepositor), _amount);\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, _amount));\\n        bytes memory result = gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\\"mintAndStakeGlp(address,uint256,uint256,uint256)\\\", WAVAX, _amount, 0, 0)\\n        );\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, 0));\\n        return toUint256(result, 0);\\n    }\\n\\n    function withdrawGlp(uint256 _amount) external override onlyGLPStrategy {\\n        _withdrawGlp(_amount);\\n    }\\n\\n    function _withdrawGlp(uint256 _amount) private {\\n        gmxDepositor.safeExecute(fsGLP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function stakeGmx(uint256 _amount) external override onlyGMXStrategy {\\n        IERC20(GMX).safeTransfer(address(gmxDepositor), _amount);\\n        gmxDepositor.safeExecute(\\n            GMX,\\n            0,\\n            abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gmxRewardTracker, _amount)\\n        );\\n        gmxDepositor.safeExecute(gmxRewardRouter, 0, abi.encodeWithSignature(\\\"stakeGmx(uint256)\\\", _amount));\\n        gmxDepositor.safeExecute(GMX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gmxRewardTracker, 0));\\n    }\\n\\n    function withdrawGmx(uint256 _amount) external override onlyGMXStrategy {\\n        _withdrawGmx(_amount);\\n    }\\n\\n    function _withdrawGmx(uint256 _amount) private {\\n        gmxDepositor.safeExecute(gmxRewardRouter, 0, abi.encodeWithSignature(\\\"unstakeGmx(uint256)\\\", _amount));\\n        gmxDepositor.safeExecute(GMX, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function _compoundEsGmx() private {\\n        gmxDepositor.safeExecute(address(gmxRewardRouter), 0, abi.encodeWithSignature(\\\"compound()\\\"));\\n    }\\n\\n    function pendingRewards(address _rewardTracker) external view override returns (uint256) {\\n        return IGmxRewardTracker(_rewardTracker).claimable(address(gmxDepositor));\\n    }\\n\\n    function claimReward(address rewardTracker) external override onlyStrategy {\\n        gmxDepositor.safeExecute(rewardTracker, 0, abi.encodeWithSignature(\\\"claim(address)\\\", msg.sender));\\n        _compoundEsGmx();\\n    }\\n\\n    function totalDeposits(address _rewardTracker) external view override returns (uint256) {\\n        return IGmxRewardTracker(_rewardTracker).stakedAmounts(address(gmxDepositor));\\n    }\\n\\n    function emergencyWithdrawGLP(uint256 _balance) external override onlyGLPStrategy {\\n        _withdrawGlp(_balance);\\n    }\\n\\n    function emergencyWithdrawGMX(uint256 _balance) external override onlyGMXStrategy {\\n        _withdrawGmx(_balance);\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xf6bb0d0d89cafddeeaed932b3b55199db03b3e45384e1b1e2fa5ac228c9cffbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620018a6380380620018a68339810160408190526200003591620001d3565b600080546001600160a01b038084166001600160a01b0319909216919091179091556001600160601b0319606085811b821660805284901b1660a0526040805163067200c560e11b8152905191841691630ce4018a91600480820192602092909190829003018186803b158015620000ac57600080fd5b505afa158015620000c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e79190620001af565b6001600160a01b031660c0816001600160a01b031660601b81525050816001600160a01b031663fa6db1bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013d57600080fd5b505afa15801562000152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001789190620001af565b60601b6001600160601b03191660e052506200021c915050565b80516001600160a01b0381168114620001aa57600080fd5b919050565b600060208284031215620001c1578081fd5b620001cc8262000192565b9392505050565b600080600060608486031215620001e8578182fd5b620001f38462000192565b9250620002036020850162000192565b9150620002136040850162000192565b90509250925092565b60805160601c60a05160601c60c05160601c60e05160601c6115f3620002b36000398061061852806107a6525080610a8a5280610b8552508061053352806106c65280610ac15280610bc05280610f035250806101f7528061025952806105d752806106965280610760528061092152806109a15280610a495280610b405280610c3f5280610ce25280610ee052506115f36000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639d54b52411610097578063d279c19111610066578063d279c191146101b4578063da09c72c146101c7578063e9403256146101cf578063f3daeacc146101e2576100f5565b80639d54b52414610186578063bf4d14d51461018e578063c10300f71461014d578063c613aec0146101a1576100f5565b806356615529116100d3578063566155291461014d5780635c72f4b51461016057806367860cce146101605780639291d56314610173576100f5565b8063026879dc146100fa57806331d7a262146101185780633b8ae39714610138575b600080fd5b6101026101f5565b60405161010f9190611255565b60405180910390f35b61012b6101263660046110e1565b610219565b60405161010f919061156f565b61014b6101463660046110e1565b6102d9565b005b61014b61015b3660046111dd565b6103f7565b61014b61016e3660046111dd565b610469565b61014b6101813660046110e1565b6104d8565b610102610531565b61012b61019c3660046111dd565b610555565b6101026101af3660046110e1565b6107eb565b61014b6101c23660046110e1565b610806565b610102610952565b61012b6101dd3660046110e1565b610961565b61014b6101f03660046111dd565b6109c9565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517f402914f50000000000000000000000000000000000000000000000000000000081526000906001600160a01b0383169063402914f590610281907f000000000000000000000000000000000000000000000000000000000000000090600401611255565b60206040518083038186803b15801561029957600080fd5b505afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d191906111f5565b90505b919050565b6000546001600160a01b0316331461030c5760405162461bcd60e51b81526004016103039061130e565b60405180910390fd5b6000816001600160a01b031663c89039c56040518163ffffffff1660e01b815260040160206040518083038186803b15801561034757600080fd5b505afa15801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f91906110fd565b6001600160a01b0380821660009081526001602052604090205491925016156103ba5760405162461bcd60e51b8152600401610303906113d9565b6001600160a01b03908116600090815260016020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b0316331461045d5760405162461bcd60e51b8152600401610303906113a2565b61046681610bbb565b50565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b031633146104cf5760405162461bcd60e51b81526004016103039061146d565b61046681610d0a565b6000546001600160a01b031633146105025760405162461bcd60e51b81526004016103039061130e565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b735643f4b25e36478ee1e90418d5343cb6591bcb9d600090815260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b031633146105bd5760405162461bcd60e51b81526004016103039061146d565b6105fc73b31f66aa3c1e785363f0875a1b74e27b85fd66c77f000000000000000000000000000000000000000000000000000000000000000084610d37565b6106be73b31f66aa3c1e785363f0875a1b74e27b85fd66c760007f000000000000000000000000000000000000000000000000000000000000000085604051602401610649929190611269565b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b5060606107887f0000000000000000000000000000000000000000000000000000000000000000600073b31f66aa3c1e785363f0875a1b74e27b85fd66c78660008060405160240161071394939291906112cf565b60408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b90506107d873b31f66aa3c1e785363f0875a1b74e27b85fd66c760007f00000000000000000000000000000000000000000000000000000000000000006000604051602401610649929190611282565b506107e4816000610e61565b9392505050565b6001602052600090815260409020546001600160a01b031681565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b03163314806108a157507362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633145b6108bd5760405162461bcd60e51b81526004016103039061146d565b610949816000336040516024016108d49190611255565b60408051601f198184030181529190526020810180516001600160e01b03167f1e83409a000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b50610466610e90565b6000546001600160a01b031681565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526000906001600160a01b038316906310c1c10390610281907f000000000000000000000000000000000000000000000000000000000000000090600401611255565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b03163314610a2f5760405162461bcd60e51b8152600401610303906113a2565b610a6e7362edc0692bd897d2295872a9ffcac5425011c6617f000000000000000000000000000000000000000000000000000000000000000083610d37565b610abb7362edc0692bd897d2295872a9ffcac5425011c66160007f000000000000000000000000000000000000000000000000000000000000000084604051602401610649929190611269565b50610b687f0000000000000000000000000000000000000000000000000000000000000000600083604051602401610af3919061156f565b60408051601f198184030181529190526020810180516001600160e01b03167ff3daeacc000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b50610bb77362edc0692bd897d2295872a9ffcac5425011c66160007f00000000000000000000000000000000000000000000000000000000000000006000604051602401610649929190611282565b5050565b610c677f0000000000000000000000000000000000000000000000000000000000000000600083604051602401610bf2919061156f565b60408051601f198184030181529190526020810180516001600160e01b03167f078580d2000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b50610bb77362edc0692bd897d2295872a9ffcac5425011c66160003384604051602401610c95929190611269565b60408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b610bb7735643f4b25e36478ee1e90418d5343cb6591bcb9d60003384604051602401610c95929190611269565b610da58363a9059cbb60e01b8484604051602401610d56929190611269565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f2b565b505050565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401610de09392919061129e565b600060405180830381600087803b158015610dfa57600080fd5b505af1158015610e0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e369190810190611133565b9150915081610e575760405162461bcd60e51b8152600401610303906114a4565b9695505050505050565b60008160200183511015610e875760405162461bcd60e51b815260040161030390611436565b50016020015190565b6040805160048152602481019091526020810180516001600160e01b03167ff69e204600000000000000000000000000000000000000000000000000000000179052610466906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f000000000000000000000000000000000000000000000000000000000000000090600090610daa565b6060610f80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fba9092919063ffffffff16565b805190915015610da55780806020019051810190610f9e9190611119565b610da55760405162461bcd60e51b815260040161030390611512565b6060610fc98484600085610fd1565b949350505050565b606082471015610ff35760405162461bcd60e51b815260040161030390611345565b610ffc85611092565b6110185760405162461bcd60e51b8152600401610303906114db565b60006060866001600160a01b031685876040516110359190611239565b60006040518083038185875af1925050503d8060008114611072576040519150601f19603f3d011682016040523d82523d6000602084013e611077565b606091505b5091509150611087828286611098565b979650505050505050565b3b151590565b606083156110a75750816107e4565b8251156110b75782518084602001fd5b8160405162461bcd60e51b815260040161030391906112fb565b805180151581146102d457600080fd5b6000602082840312156110f2578081fd5b81356107e4816115a8565b60006020828403121561110e578081fd5b81516107e4816115a8565b60006020828403121561112a578081fd5b6107e4826110d1565b60008060408385031215611145578081fd5b61114e836110d1565b9150602083015167ffffffffffffffff8082111561116a578283fd5b818501915085601f83011261117d578283fd5b81518181111561118957fe5b604051601f8201601f1916810160200183811182821017156111a757fe5b6040528181528382016020018810156111be578485fd5b6111cf826020830160208701611578565b809450505050509250929050565b6000602082840312156111ee578081fd5b5035919050565b600060208284031215611206578081fd5b5051919050565b60008151808452611225816020860160208601611578565b601f01601f19169290920160200192915050565b6000825161124b818460208701611578565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b60006001600160a01b0385168252836020830152606060408301526112c6606083018461120d565b95945050505050565b6001600160a01b03949094168452602084019290925260ff908116604084015216606082015260800190565b6000602082526107e4602083018461120d565b60208082526011908201527f476d7850726f78793a3a6f6e6c79446576000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f476d7850726f78793a3a6f6e6c79474d58537472617465677900000000000000604082015260600190565b60208082526032908201527f476d7850726f78793a3a537472617465677920666f72206465706f736974207460408201527f6f6b656e20616c72656164792061646465640000000000000000000000000000606082015260800190565b60208082526015908201527f746f55696e743235365f6f75744f66426f756e64730000000000000000000000604082015260600190565b60208082526018908201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604082015260600190565b6020808252601c908201527f476d7850726f78793a3a7361666545786563757465206661696c656400000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b8381101561159357818101518382015260200161157b565b838111156115a2576000848401525b50505050565b6001600160a01b038116811461046657600080fdfea264697066735822122090ee4665888809c7c8cc8229a3793fb27d197b2fa6daee1ad0e833e69c10072b64736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80639d54b52411610097578063d279c19111610066578063d279c191146101b4578063da09c72c146101c7578063e9403256146101cf578063f3daeacc146101e2576100f5565b80639d54b52414610186578063bf4d14d51461018e578063c10300f71461014d578063c613aec0146101a1576100f5565b806356615529116100d3578063566155291461014d5780635c72f4b51461016057806367860cce146101605780639291d56314610173576100f5565b8063026879dc146100fa57806331d7a262146101185780633b8ae39714610138575b600080fd5b6101026101f5565b60405161010f9190611255565b60405180910390f35b61012b6101263660046110e1565b610219565b60405161010f919061156f565b61014b6101463660046110e1565b6102d9565b005b61014b61015b3660046111dd565b6103f7565b61014b61016e3660046111dd565b610469565b61014b6101813660046110e1565b6104d8565b610102610531565b61012b61019c3660046111dd565b610555565b6101026101af3660046110e1565b6107eb565b61014b6101c23660046110e1565b610806565b610102610952565b61012b6101dd3660046110e1565b610961565b61014b6101f03660046111dd565b6109c9565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517f402914f50000000000000000000000000000000000000000000000000000000081526000906001600160a01b0383169063402914f590610281907f000000000000000000000000000000000000000000000000000000000000000090600401611255565b60206040518083038186803b15801561029957600080fd5b505afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d191906111f5565b90505b919050565b6000546001600160a01b0316331461030c5760405162461bcd60e51b81526004016103039061130e565b60405180910390fd5b6000816001600160a01b031663c89039c56040518163ffffffff1660e01b815260040160206040518083038186803b15801561034757600080fd5b505afa15801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f91906110fd565b6001600160a01b0380821660009081526001602052604090205491925016156103ba5760405162461bcd60e51b8152600401610303906113d9565b6001600160a01b03908116600090815260016020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b0316331461045d5760405162461bcd60e51b8152600401610303906113a2565b61046681610bbb565b50565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b031633146104cf5760405162461bcd60e51b81526004016103039061146d565b61046681610d0a565b6000546001600160a01b031633146105025760405162461bcd60e51b81526004016103039061130e565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b735643f4b25e36478ee1e90418d5343cb6591bcb9d600090815260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b031633146105bd5760405162461bcd60e51b81526004016103039061146d565b6105fc73b31f66aa3c1e785363f0875a1b74e27b85fd66c77f000000000000000000000000000000000000000000000000000000000000000084610d37565b6106be73b31f66aa3c1e785363f0875a1b74e27b85fd66c760007f000000000000000000000000000000000000000000000000000000000000000085604051602401610649929190611269565b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b5060606107887f0000000000000000000000000000000000000000000000000000000000000000600073b31f66aa3c1e785363f0875a1b74e27b85fd66c78660008060405160240161071394939291906112cf565b60408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b90506107d873b31f66aa3c1e785363f0875a1b74e27b85fd66c760007f00000000000000000000000000000000000000000000000000000000000000006000604051602401610649929190611282565b506107e4816000610e61565b9392505050565b6001602052600090815260409020546001600160a01b031681565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b03163314806108a157507362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633145b6108bd5760405162461bcd60e51b81526004016103039061146d565b610949816000336040516024016108d49190611255565b60408051601f198184030181529190526020810180516001600160e01b03167f1e83409a000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b50610466610e90565b6000546001600160a01b031681565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526000906001600160a01b038316906310c1c10390610281907f000000000000000000000000000000000000000000000000000000000000000090600401611255565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b03163314610a2f5760405162461bcd60e51b8152600401610303906113a2565b610a6e7362edc0692bd897d2295872a9ffcac5425011c6617f000000000000000000000000000000000000000000000000000000000000000083610d37565b610abb7362edc0692bd897d2295872a9ffcac5425011c66160007f000000000000000000000000000000000000000000000000000000000000000084604051602401610649929190611269565b50610b687f0000000000000000000000000000000000000000000000000000000000000000600083604051602401610af3919061156f565b60408051601f198184030181529190526020810180516001600160e01b03167ff3daeacc000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b50610bb77362edc0692bd897d2295872a9ffcac5425011c66160007f00000000000000000000000000000000000000000000000000000000000000006000604051602401610649929190611282565b5050565b610c677f0000000000000000000000000000000000000000000000000000000000000000600083604051602401610bf2919061156f565b60408051601f198184030181529190526020810180516001600160e01b03167f078580d2000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b50610bb77362edc0692bd897d2295872a9ffcac5425011c66160003384604051602401610c95929190611269565b60408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610daa565b610bb7735643f4b25e36478ee1e90418d5343cb6591bcb9d60003384604051602401610c95929190611269565b610da58363a9059cbb60e01b8484604051602401610d56929190611269565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f2b565b505050565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401610de09392919061129e565b600060405180830381600087803b158015610dfa57600080fd5b505af1158015610e0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e369190810190611133565b9150915081610e575760405162461bcd60e51b8152600401610303906114a4565b9695505050505050565b60008160200183511015610e875760405162461bcd60e51b815260040161030390611436565b50016020015190565b6040805160048152602481019091526020810180516001600160e01b03167ff69e204600000000000000000000000000000000000000000000000000000000179052610466906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f000000000000000000000000000000000000000000000000000000000000000090600090610daa565b6060610f80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fba9092919063ffffffff16565b805190915015610da55780806020019051810190610f9e9190611119565b610da55760405162461bcd60e51b815260040161030390611512565b6060610fc98484600085610fd1565b949350505050565b606082471015610ff35760405162461bcd60e51b815260040161030390611345565b610ffc85611092565b6110185760405162461bcd60e51b8152600401610303906114db565b60006060866001600160a01b031685876040516110359190611239565b60006040518083038185875af1925050503d8060008114611072576040519150601f19603f3d011682016040523d82523d6000602084013e611077565b606091505b5091509150611087828286611098565b979650505050505050565b3b151590565b606083156110a75750816107e4565b8251156110b75782518084602001fd5b8160405162461bcd60e51b815260040161030391906112fb565b805180151581146102d457600080fd5b6000602082840312156110f2578081fd5b81356107e4816115a8565b60006020828403121561110e578081fd5b81516107e4816115a8565b60006020828403121561112a578081fd5b6107e4826110d1565b60008060408385031215611145578081fd5b61114e836110d1565b9150602083015167ffffffffffffffff8082111561116a578283fd5b818501915085601f83011261117d578283fd5b81518181111561118957fe5b604051601f8201601f1916810160200183811182821017156111a757fe5b6040528181528382016020018810156111be578485fd5b6111cf826020830160208701611578565b809450505050509250929050565b6000602082840312156111ee578081fd5b5035919050565b600060208284031215611206578081fd5b5051919050565b60008151808452611225816020860160208601611578565b601f01601f19169290920160200192915050565b6000825161124b818460208701611578565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b60006001600160a01b0385168252836020830152606060408301526112c6606083018461120d565b95945050505050565b6001600160a01b03949094168452602084019290925260ff908116604084015216606082015260800190565b6000602082526107e4602083018461120d565b60208082526011908201527f476d7850726f78793a3a6f6e6c79446576000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f476d7850726f78793a3a6f6e6c79474d58537472617465677900000000000000604082015260600190565b60208082526032908201527f476d7850726f78793a3a537472617465677920666f72206465706f736974207460408201527f6f6b656e20616c72656164792061646465640000000000000000000000000000606082015260800190565b60208082526015908201527f746f55696e743235365f6f75744f66426f756e64730000000000000000000000604082015260600190565b60208082526018908201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604082015260600190565b6020808252601c908201527f476d7850726f78793a3a7361666545786563757465206661696c656400000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b8381101561159357818101518382015260200161157b565b838111156115a2576000848401525b50505050565b6001600160a01b038116811461046657600080fdfea264697066735822122090ee4665888809c7c8cc8229a3793fb27d197b2fa6daee1ad0e833e69c10072b64736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52855,
        "contract": "contracts/strategies/GmxProxy.sol:GmxProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 52859,
        "contract": "contracts/strategies/GmxProxy.sol:GmxProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}