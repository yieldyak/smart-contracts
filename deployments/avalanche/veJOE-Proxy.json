{
  "address": "0xc31e24f8A25a1dCeCcfd791CA25b62dcFec5c8F7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakerFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boosterFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stakerFeeReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "boosterFeeReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct JoeVoterProxy.FeeSettings",
          "name": "_feeSettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "JOE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_extraToken",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_extraToken",
          "type": "address"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingJoe",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingBonusToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvestFeeBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boosterFeeBips",
          "type": "uint256"
        }
      ],
      "name": "setBoosterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boosterFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setBoosterFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakerFeeBips",
          "type": "uint256"
        }
      ],
      "name": "setStakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakerFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setStakerFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veJoeStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "contract IJoeVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca671b745fe830310d1139e871628b629f7f2450d5c6c07977a29929963f1ad4",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xc31e24f8A25a1dCeCcfd791CA25b62dcFec5c8F7",
    "transactionIndex": 7,
    "gasUsed": "1918020",
    "logsBloom": "0x
    "blockHash": "0xd29452bd5a5eedca88eb136f9809b172c83fdd7fe10abffd2b0b5ca3ff451119",
    "transactionHash": "0xca671b745fe830310d1139e871628b629f7f2450d5c6c07977a29929963f1ad4",
    "logs": [],
    "blockNumber": 12779500,
    "cumulativeGasUsed": "2581595",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7462905B79370389e8180E300F58f63D35B725F",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    {
      "stakerFeeBips": 500,
      "boosterFeeBips": 1000,
      "stakerFeeReceiver": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "boosterFeeReceiver": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
    }
  ],
  "solcInputHash": "355e43438707e2b75917052c50137db2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakerFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosterFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boosterFeeReceiver\",\"type\":\"address\"}],\"internalType\":\"struct JoeVoterProxy.FeeSettings\",\"name\":\"_feeSettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"JOE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_extraToken\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_extraToken\",\"type\":\"address\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingJoe\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingBonusToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boosterFeeBips\",\"type\":\"uint256\"}],\"name\":\"setBoosterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterFeeReceiver\",\"type\":\"address\"}],\"name\":\"setBoosterFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakerFeeBips\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerFeeReceiver\",\"type\":\"address\"}],\"name\":\"setStakerFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veJoeStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IJoeVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"For accounting reasons, there is one approved strategy per Masterchef PID. In case of upgrade, use a new proxy.\",\"kind\":\"dev\",\"methods\":{\"approveStrategy(address,address)\":{\"details\":\"Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)\",\"params\":{\"_stakingContract\":\"address\",\"_strategy\":\"address\"}},\"claimReward(uint256,address,address)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_pid\":\"PID\",\"_stakingContract\":\"Masterchef\"}},\"deposit(uint256,address,address,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_amount\":\"deposit amount\",\"_pid\":\"PID\",\"_stakingContract\":\"Masterchef\",\"_token\":\"Deposit asset\"}},\"distributeReward(uint256,address,address)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_pid\":\"PID\",\"_stakingContract\":\"Masterchef\"}},\"emergencyWithdraw(uint256,address,address)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_pid\":\"PID\",\"_stakingContract\":\"Masterchef\",\"_token\":\"Deposit asset\"}},\"pendingRewards(address,uint256)\":{\"params\":{\"_pid\":\"PID\",\"_stakingContract\":\"Masterchef\"},\"returns\":{\"bonusTokenAddress\":\"bonusTokenAddress\",\"pendingBonusToken\":\"pendingBonusToken\",\"pendingJoe\":\"pendingJoe\"}},\"reinvestFeeBips()\":{\"returns\":{\"_0\":\"reinvest fee\"}},\"setBoosterFee(uint256)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeBips\":\"new fee in bips (1% = 100 bips)\"}},\"setBoosterFeeReceiver(address)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeReceiver\":\"address\"}},\"setStakerFee(uint256)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_stakerFeeBips\":\"new fee in bips (1% = 100 bips)\"}},\"setStakerFeeReceiver(address)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_stakerFeeReceiver\":\"address\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"withdraw(uint256,address,address,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_amount\":\"withdraw amount\",\"_pid\":\"PID\",\"_stakingContract\":\"Masterchef\",\"_token\":\"Deposit asset\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveStrategy(address,address)\":{\"notice\":\"Add an approved strategy\"},\"claimReward(uint256,address,address)\":{\"notice\":\"Claim and distribute rewards\"},\"deposit(uint256,address,address,uint256)\":{\"notice\":\"Deposit function\"},\"distributeReward(uint256,address,address)\":{\"notice\":\"Distribute rewards\"},\"emergencyWithdraw(uint256,address,address)\":{\"notice\":\"Emergency withdraw function\"},\"pendingRewards(address,uint256)\":{\"notice\":\"Pending rewards matching interface for strategy\"},\"reinvestFeeBips()\":{\"notice\":\"Calculation of reinvest fee (boost + staking)\"},\"setBoosterFee(uint256)\":{\"notice\":\"Update booster fee\"},\"setBoosterFeeReceiver(address)\":{\"notice\":\"Update booster fee receiver\"},\"setStakerFee(uint256)\":{\"notice\":\"Update staker fee\"},\"setStakerFeeReceiver(address)\":{\"notice\":\"Update staker fee receiver\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"withdraw(uint256,address,address,uint256)\":{\"notice\":\"Withdraw function\"}},\"notice\":\"JoeVoterProxy is an upgradable contract. Strategies interact with JoeVoterProxy and JoeVoterProxy interacts with JoeVoter.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/JoeVoterProxy.sol\":\"JoeVoterProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBoostedJoeStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IBoostedJoeStrategyForLP {\\n    function PID() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x9524497f8e0b399353cf83df4a515c7ff8416adf0a3b1bc05ff3aaa5a2144b3e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IJoeChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingJoe,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function userInfo(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 accJoePerShare,\\n            uint256 lastRewardTimestamp,\\n            uint256 allocPoint,\\n            address rewarder\\n        );\\n}\\n\",\"keccak256\":\"0xa5a5089f9b598abfd35da07a8853e639f62fb6f735aee31fb728fa89de3def57\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IJoeVoter {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function veJOEBalance() external view returns (uint256);\\n\\n    function wrapAvaxBalance() external returns (uint256);\\n\\n    function depositsEnabled() external view returns (bool);\\n\\n    function depositFromBalance(uint256 _value) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n\\n    function setVoterProxy(address _voterProxy) external;\\n\\n    function claimVeJOE() external;\\n}\\n\",\"keccak256\":\"0x25d9d1401cd90feadaf39e891f1d72b32bf9e3892d6b8eaaa9d8af11216753b1\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IJoeVoterProxy {\\n    function withdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function emergencyWithdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _token\\n    ) external;\\n\\n    function deposit(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function pendingRewards(address _stakingContract, uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            address,\\n            uint256\\n        );\\n\\n    function poolBalance(address _stakingContract, uint256 _pid) external view returns (uint256);\\n\\n    function claimReward(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _extraToken\\n    ) external;\\n\\n    function distributeReward(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _extraToken\\n    ) external;\\n\\n    function approveStrategy(address _stakingContract, address _strategy) external;\\n\\n    function reinvestFeeBips() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdb1adc4bfc7bdb99f9a5fd399dbbb5f28bf84ba9cdf8cf2e6b63ebb0fa06a078\",\"license\":\"MIT\"},\"contracts/interfaces/IVeJoeStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IVeJoeStaking {\\n    function deposit(uint256 _amount) external;\\n\\n    function claim() external;\\n\\n    function getPendingVeJoe(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe63394359e30468ddf750ce69c0cfddc07560e003a407eda09a78617ba502195\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c2ca57501dc5f1d71e5a5e39616343b9bd57e363c50c4abbeab13059ce2c0ab\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa79bdc482a4a886790bbfecb531127ead361d3a82abd0aa1e175b7fc1733a6f6\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/JoeVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IJoeVoter.sol\\\";\\nimport \\\"../interfaces/IJoeVoterProxy.sol\\\";\\nimport \\\"../interfaces/IJoeChef.sol\\\";\\nimport \\\"../interfaces/IBoostedJoeStrategyForLP.sol\\\";\\nimport \\\"../interfaces/IVeJoeStaking.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(\\n        IJoeVoter voter,\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returnValue) = voter.execute(target, value, data);\\n        if (!success) revert(\\\"JoeVoterProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\n/**\\n * @notice JoeVoterProxy is an upgradable contract.\\n * Strategies interact with JoeVoterProxy and\\n * JoeVoterProxy interacts with JoeVoter.\\n * @dev For accounting reasons, there is one approved\\n * strategy per Masterchef PID. In case of upgrade,\\n * use a new proxy.\\n */\\ncontract JoeVoterProxy is IJoeVoterProxy {\\n    using SafeMath for uint256;\\n    using SafeProxy for IJoeVoter;\\n    using SafeERC20 for IERC20;\\n\\n    struct FeeSettings {\\n        uint256 stakerFeeBips;\\n        uint256 boosterFeeBips;\\n        address stakerFeeReceiver;\\n        address boosterFeeReceiver;\\n    }\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    uint256 public boosterFee;\\n    uint256 public stakerFee;\\n    address public stakerFeeReceiver;\\n    address public boosterFeeReceiver;\\n    address private constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address public constant JOE = 0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd;\\n    address public constant veJoeStaking = 0x25D85E17dD9e544F6E9F8D44F99602dbF5a97341;\\n    IJoeVoter public immutable voter;\\n    address public devAddr;\\n\\n    // staking contract => pid => strategy\\n    mapping(address => mapping(uint256 => address)) private approvedStrategies;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"JoeVoterProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy(address _stakingContract, uint256 _pid) {\\n        require(approvedStrategies[_stakingContract][_pid] == msg.sender, \\\"JoeVoterProxy::onlyStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _voter,\\n        address _devAddr,\\n        FeeSettings memory _feeSettings\\n    ) {\\n        devAddr = _devAddr;\\n        boosterFee = _feeSettings.boosterFeeBips;\\n        stakerFee = _feeSettings.stakerFeeBips;\\n        stakerFeeReceiver = _feeSettings.stakerFeeReceiver;\\n        boosterFeeReceiver = _feeSettings.boosterFeeReceiver;\\n        voter = IJoeVoter(_voter);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) external onlyDev {\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Add an approved strategy\\n     * @dev Very sensitive, restricted to devAddr\\n     * @dev Can only be set once per PID and staking contract (reported by the strategy)\\n     * @param _stakingContract address\\n     * @param _strategy address\\n     */\\n    function approveStrategy(address _stakingContract, address _strategy) external override onlyDev {\\n        uint256 pid = IBoostedJoeStrategyForLP(_strategy).PID();\\n        require(\\n            approvedStrategies[_stakingContract][pid] == address(0),\\n            \\\"JoeVoterProxy::Strategy for PID already added\\\"\\n        );\\n        approvedStrategies[_stakingContract][pid] = _strategy;\\n    }\\n\\n    /**\\n     * @notice Update booster fee\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeBips new fee in bips (1% = 100 bips)\\n     */\\n    function setBoosterFee(uint256 _boosterFeeBips) external onlyDev {\\n        boosterFee = _boosterFeeBips;\\n    }\\n\\n    /**\\n     * @notice Update staker fee\\n     * @dev Restricted to devAddr\\n     * @param _stakerFeeBips new fee in bips (1% = 100 bips)\\n     */\\n    function setStakerFee(uint256 _stakerFeeBips) external onlyDev {\\n        stakerFee = _stakerFeeBips;\\n    }\\n\\n    /**\\n     * @notice Update booster fee receiver\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeReceiver address\\n     */\\n    function setBoosterFeeReceiver(address _boosterFeeReceiver) external onlyDev {\\n        boosterFeeReceiver = _boosterFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Update staker fee receiver\\n     * @dev Restricted to devAddr\\n     * @param _stakerFeeReceiver address\\n     */\\n    function setStakerFeeReceiver(address _stakerFeeReceiver) external onlyDev {\\n        stakerFeeReceiver = _stakerFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Deposit function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param _stakingContract Masterchef\\n     * @param _token Deposit asset\\n     * @param _amount deposit amount\\n     */\\n    function deposit(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyStrategy(_stakingContract, _pid) {\\n        IERC20(_token).safeTransfer(address(voter), _amount);\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _stakingContract, _amount));\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"deposit(uint256,uint256)\\\", _pid, _amount));\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _stakingContract, 0));\\n    }\\n\\n    /**\\n     * @notice Calculation of reinvest fee (boost + staking)\\n     * @return reinvest fee\\n     */\\n    function reinvestFeeBips() external view override returns (uint256) {\\n        uint256 boostFee = 0;\\n        if (boosterFee > 0 && boosterFeeReceiver > address(0) && voter.depositsEnabled()) {\\n            boostFee = boosterFee;\\n        }\\n\\n        uint256 stakingFee = 0;\\n        if (stakerFee > 0 && stakerFeeReceiver > address(0)) {\\n            stakingFee = stakerFee;\\n        }\\n        return boostFee.add(stakingFee);\\n    }\\n\\n    /**\\n     * @notice Withdraw function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param _stakingContract Masterchef\\n     * @param _token Deposit asset\\n     * @param _amount withdraw amount\\n     */\\n    function withdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyStrategy(_stakingContract, _pid) {\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"withdraw(uint256,uint256)\\\", _pid, _amount));\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param _stakingContract Masterchef\\n     * @param _token Deposit asset\\n     */\\n    function emergencyWithdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _token\\n    ) external override onlyStrategy(_stakingContract, _pid) {\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"emergencyWithdraw(uint256)\\\", _pid));\\n        uint256 balance = IERC20(_token).balanceOf(address(voter));\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, balance));\\n    }\\n\\n    /**\\n     * @notice Pending rewards matching interface for strategy\\n     * @param _stakingContract Masterchef\\n     * @param _pid PID\\n     * @return pendingJoe\\n     * @return bonusTokenAddress\\n     * @return pendingBonusToken\\n     */\\n    function pendingRewards(address _stakingContract, uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 pendingJoe,\\n            address bonusTokenAddress,\\n            uint256 pendingBonusToken\\n        )\\n    {\\n        (pendingJoe, bonusTokenAddress, , pendingBonusToken) = IJoeChef(_stakingContract).pendingTokens(\\n            _pid,\\n            address(voter)\\n        );\\n        uint256 reinvestFee = pendingJoe.mul(this.reinvestFeeBips()).div(BIPS_DIVISOR);\\n\\n        return (pendingJoe.sub(reinvestFee), bonusTokenAddress, pendingBonusToken);\\n    }\\n\\n    function poolBalance(address _stakingContract, uint256 _pid) external view override returns (uint256 balance) {\\n        return _poolBalance(_stakingContract, _pid);\\n    }\\n\\n    /**\\n     * @notice Pool balance\\n     * @param _stakingContract Masterchef\\n     * @param _pid PID\\n     * @return balance in depositToken\\n     */\\n    function _poolBalance(address _stakingContract, uint256 _pid) internal view returns (uint256 balance) {\\n        (balance, ) = IJoeChef(_stakingContract).userInfo(_pid, address(voter));\\n    }\\n\\n    /**\\n     * @notice Claim and distribute rewards\\n     * @dev Restricted to strategy with _pid\\n     * @param _stakingContract Masterchef\\n     * @param _pid PID\\n     */\\n    function claimReward(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _extraToken\\n    ) external override onlyStrategy(_stakingContract, _pid) {\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"deposit(uint256,uint256)\\\", _pid, 0));\\n        _distributeReward(_extraToken);\\n    }\\n\\n    /**\\n     * @notice Distribute rewards\\n     * @dev Restricted to strategy with _pid\\n     * @param _stakingContract Masterchef\\n     * @param _pid PID\\n     */\\n    function distributeReward(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _extraToken\\n    ) external override onlyStrategy(_stakingContract, _pid) {\\n        _distributeReward(_extraToken);\\n    }\\n\\n    function _distributeReward(address _extraToken) private {\\n        if (_extraToken == WAVAX) {\\n            voter.wrapAvaxBalance();\\n        }\\n\\n        uint256 pendingJoe = IERC20(JOE).balanceOf(address(voter));\\n        uint256 pendingExtraToken = _extraToken > address(0) ? IERC20(_extraToken).balanceOf(address(voter)) : 0;\\n        if (pendingJoe > 0) {\\n            uint256 boostFee = 0;\\n            if (boosterFee > 0 && boosterFeeReceiver > address(0) && voter.depositsEnabled()) {\\n                boostFee = pendingJoe.mul(boosterFee).div(BIPS_DIVISOR);\\n                voter.depositFromBalance(boostFee);\\n                IERC20(address(voter)).safeTransfer(boosterFeeReceiver, boostFee);\\n            }\\n\\n            uint256 stakingFee = 0;\\n            if (stakerFee > 0 && stakerFeeReceiver > address(0)) {\\n                stakingFee = pendingJoe.mul(stakerFee).div(BIPS_DIVISOR);\\n                voter.safeExecute(\\n                    JOE,\\n                    0,\\n                    abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", stakerFeeReceiver, stakingFee)\\n                );\\n            }\\n\\n            uint256 reward = pendingJoe.sub(boostFee).sub(stakingFee);\\n            voter.safeExecute(JOE, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n        }\\n\\n        if (pendingExtraToken > 0) {\\n            voter.safeExecute(\\n                _extraToken,\\n                0,\\n                abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, pendingExtraToken)\\n            );\\n        }\\n\\n        if (IVeJoeStaking(veJoeStaking).getPendingVeJoe(address(voter)) > 0) {\\n            voter.claimVeJOE();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x384b1a2cdca13710efd7677c23de7a352cabbf56895b7deeef9191bb40cb78d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620021a0380380620021a08339810160408190526200003491620000bb565b600480546001600160a01b03199081166001600160a01b0394851617909155602082015160005581516001556040820151600280548316918516919091179055606091820151600380549092169316929092179091551b6001600160601b03191660805262000163565b80516001600160a01b0381168114620000b657600080fd5b919050565b600080600083850360c0811215620000d1578384fd5b620000dc856200009e565b9350620000ec602086016200009e565b92506080603f198201121562000100578182fd5b50604051608081016001600160401b03811182821017156200011e57fe5b604090815285015181526060850151602082015262000140608086016200009e565b60408201526200015360a086016200009e565b6060820152809150509250925092565b60805160601c611fc5620001db6000398061032052806103c152806105ad5280610622528061085852806108e75280610b985280610be85280610ce15280610d6c5280610e3b5280611056528061111b52806111d05280611275528061135752806113ce528061152b52806115ab5250611fc56000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80639291d563116100d8578063c494448e1161008c578063e4cca4b011610066578063e4cca4b0146102d7578063ea09f6c8146102ea578063ffebad30146102f257610182565b8063c494448e146102a9578063d2cee46f146102bc578063da09c72c146102cf57610182565b8063a318c1a4116100bd578063a318c1a414610270578063b5e893a514610283578063bb51e89f1461029657610182565b80639291d5631461024a57806397eef1871461025d57610182565b80636099ecb21161013a578063792a230f11610114578063792a230f146102275780638583b7fa1461022f578063865710f01461023757610182565b80636099ecb2146101ea5780636f7b2a621461020c578063781a29d11461021f57610182565b806346c96aac1161016b57806346c96aac146101c5578063491cad29146101cd5780634b2d9ffc146101e257610182565b806301e1c48d146101875780632d61a546146101b0575b600080fd5b61019a61019536600461199b565b6102fa565b6040516101a79190611ee9565b60405180910390f35b6101b861030f565b6040516101a79190611baf565b6101b861031e565b6101e06101db366004611947565b610342565b005b61019a6103a4565b6101fd6101f836600461199b565b6103aa565b6040516101a793929190611f09565b6101e061021a366004611a5c565b6104fe565b61019a6105e6565b6101b86105ec565b61019a6105fb565b6101e0610245366004611a2c565b6106f3565b6101e0610258366004611947565b610722565b6101e061026b366004611a2c565b61077b565b6101e061027e366004611a9d565b6107aa565b6101e0610291366004611947565b610918565b6101e06102a4366004611a5c565b610971565b6101e06102b7366004611963565b6109c2565b6101e06102ca366004611a5c565b610aec565b6101b8610c7b565b6101e06102e5366004611a9d565b610c8a565b6101b8610dc9565b6101b8610de1565b60006103068383610df9565b90505b92915050565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004546001600160a01b031633146103755760405162461bcd60e51b815260040161036c90611c73565b60405180910390fd5b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60015481565b6000806000846001600160a01b031663ffcd4263857f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016103fd929190611ef2565b60006040518083038186803b15801561041557600080fd5b505afa158015610429573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104519190810190611ae4565b905080935081945082955050505060006104e86127106104e2306001600160a01b0316638583b7fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190611a44565b8790610eba565b90610ef4565b90506104f48482610f36565b9350509250925092565b6001600160a01b038083166000908152600560209081526040808320878452909152902054839185911633146105465760405162461bcd60e51b815260040161036c90611dc1565b6105d5846000876000604051602401610560929190611f28565b60408051601f198184030181529190526020810180516001600160e01b03167fe2bbb158000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b506105df8361102f565b5050505050565b60005481565b6003546001600160a01b031681565b6000805481901580159061061957506003546001600160a01b031615155b80156106b157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067957600080fd5b505afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b191906119c6565b156106bb57506000545b6000806001541180156106d857506002546001600160a01b031615155b156106e257506001545b6106ec828261161d565b9250505090565b6004546001600160a01b0316331461071d5760405162461bcd60e51b815260040161036c90611c73565b600055565b6004546001600160a01b0316331461074c5760405162461bcd60e51b815260040161036c90611c73565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031633146107a55760405162461bcd60e51b815260040161036c90611c73565b600155565b6001600160a01b038084166000908152600560209081526040808320888452909152902054849186911633146107f25760405162461bcd60e51b815260040161036c90611dc1565b610880856000888660405160240161080b929190611f39565b60408051601f198184030181529190526020810180516001600160e01b03167f441a3e70000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b5061090f846000338660405160240161089a929190611bc3565b60408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b50505050505050565b6004546001600160a01b031633146109425760405162461bcd60e51b815260040161036c90611c73565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038083166000908152600560209081526040808320878452909152902054839185911633146109b95760405162461bcd60e51b815260040161036c90611dc1565b6105df8361102f565b6004546001600160a01b031633146109ec5760405162461bcd60e51b815260040161036c90611c73565b6000816001600160a01b0316635eaec0e46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190611a44565b6001600160a01b0384811660009081526005602090815260408083208584529091529020549192501615610aa75760405162461bcd60e51b815260040161036c90611caa565b6001600160a01b03928316600090815260056020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b6001600160a01b03808316600090815260056020908152604080832087845290915290205483918591163314610b345760405162461bcd60e51b815260040161036c90611dc1565b610bc084600087604051602401610b4b9190611ee9565b60408051601f198184030181529190526020810180516001600160e01b03167f5312ea8e000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b506040516370a0823160e01b81526000906001600160a01b038516906370a0823190610c10907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b158015610c2857600080fd5b505afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190611a44565b905061090f846000338460405160240161089a929190611bc3565b6004546001600160a01b031681565b6001600160a01b03808416600090815260056020908152604080832088845290915290205484918691163314610cd25760405162461bcd60e51b815260040161036c90611dc1565b610d066001600160a01b0385167f000000000000000000000000000000000000000000000000000000000000000085611642565b610d948460008786604051602401610d1f929190611bc3565b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b50610dae8560008886604051602401610560929190611f39565b5061090f846000876000604051602401610d1f929190611bdc565b7325d85e17dd9e544f6e9f8d44f99602dbf5a9734181565b736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd81565b6040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906393f1a40b90610e639085907f000000000000000000000000000000000000000000000000000000000000000090600401611ef2565b604080518083038186803b158015610e7a57600080fd5b505afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb29190611b44565b509392505050565b600082610ec957506000610309565b82820282848281610ed657fe5b04146103065760405162461bcd60e51b815260040161036c90611d64565b600061030683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506116b0565b600061030683836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506116e9565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401610fae93929190611bf8565b600060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261100491908101906119e0565b91509150816110255760405162461bcd60e51b815260040161036c90611df8565b9695505050505050565b6001600160a01b03811673b31f66aa3c1e785363f0875a1b74e27b85fd66c714156110e9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a556f516040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156110af57600080fd5b505af11580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190611a44565b505b6040516370a0823160e01b8152600090736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd906370a0823190611143907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b15801561115b57600080fd5b505afa15801561116f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111939190611a44565b905060006001600160a01b0383166111ac576000611248565b6040516370a0823160e01b81526001600160a01b038416906370a08231906111f8907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190611a44565b905081156114bf57600080805411801561126c57506003546001600160a01b031615155b801561130457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130491906119c6565b156113f8576113246127106104e260005486610eba90919063ffffffff16565b6040517f7c0bb4ab0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637c0bb4ab9061138c908490600401611ee9565b600060405180830381600087803b1580156113a657600080fd5b505af11580156113ba573d6000803e3d6000fd5b50506003546113f892506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692501683611642565b60008060015411801561141557506002546001600160a01b031615155b15611475576114356127106104e260015487610eba90919063ffffffff16565b60025460405191925061147391736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd9160009161089a916001600160a01b0316908690602401611bc3565b505b600061148b826114858786610f36565b90610f36565b90506114ba736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd6000338460405160240161089a929190611bc3565b505050505b80156114e0576114de836000338460405160240161089a929190611bc3565b505b6040517ffc2f53b60000000000000000000000000000000000000000000000000000000081526000907325d85e17dd9e544f6e9f8d44f99602dbf5a973419063fc2f53b690611553907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b15801561156b57600080fd5b505afa15801561157f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a39190611a44565b1115611618577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b29b4bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561160457600080fd5b505af115801561090f573d6000803e3d6000fd5b505050565b6000828201838110156103065760405162461bcd60e51b815260040161036c90611c3c565b6116188363a9059cbb60e01b8484604051602401611661929190611bc3565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611715565b600081836116d15760405162461bcd60e51b815260040161036c9190611c29565b5060008385816116dd57fe5b049150505b9392505050565b6000818484111561170d5760405162461bcd60e51b815260040161036c9190611c29565b505050900390565b606061176a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117a49092919063ffffffff16565b805190915015611618578080602001905181019061178891906119c6565b6116185760405162461bcd60e51b815260040161036c90611e8c565b60606117b384846000856117bb565b949350505050565b6060824710156117dd5760405162461bcd60e51b815260040161036c90611d07565b6117e68561187c565b6118025760405162461bcd60e51b815260040161036c90611e55565b60006060866001600160a01b0316858760405161181f9190611b93565b60006040518083038185875af1925050503d806000811461185c576040519150601f19603f3d011682016040523d82523d6000602084013e611861565b606091505b5091509150611871828286611886565b979650505050505050565b803b15155b919050565b606083156118955750816116e2565b8251156118a55782518084602001fd5b8160405162461bcd60e51b815260040161036c9190611c29565b8051801515811461188157600080fd5b600082601f8301126118df578081fd5b815167ffffffffffffffff808211156118f457fe5b604051601f8301601f19168101602001828111828210171561191257fe5b60405282815292508284830160200186101561192d57600080fd5b61193e836020830160208801611f47565b50505092915050565b600060208284031215611958578081fd5b813561030681611f77565b60008060408385031215611975578081fd5b823561198081611f77565b9150602083013561199081611f77565b809150509250929050565b600080604083850312156119ad578182fd5b82356119b881611f77565b946020939093013593505050565b6000602082840312156119d7578081fd5b610306826118bf565b600080604083850312156119f2578182fd5b6119fb836118bf565b9150602083015167ffffffffffffffff811115611a16578182fd5b611a22858286016118cf565b9150509250929050565b600060208284031215611a3d578081fd5b5035919050565b600060208284031215611a55578081fd5b5051919050565b600080600060608486031215611a70578081fd5b833592506020840135611a8281611f77565b91506040840135611a9281611f77565b809150509250925092565b60008060008060808587031215611ab2578081fd5b843593506020850135611ac481611f77565b92506040850135611ad481611f77565b9396929550929360600135925050565b60008060008060808587031215611af9578384fd5b845193506020850151611b0b81611f77565b604086015190935067ffffffffffffffff811115611b27578283fd5b611b33878288016118cf565b606096909601519497939650505050565b60008060408385031215611b56578182fd5b505080516020909101519092909150565b60008151808452611b7f816020860160208601611f47565b601f01601f19169290920160200192915050565b60008251611ba5818460208701611f47565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b60006001600160a01b038516825283602083015260606040830152611c206060830184611b67565b95945050505050565b6000602082526103066020830184611b67565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f4a6f65566f74657250726f78793a3a6f6e6c7944657600000000000000000000604082015260600190565b6020808252602d908201527f4a6f65566f74657250726f78793a3a537472617465677920666f72205049442060408201527f616c726561647920616464656400000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4a6f65566f74657250726f78793a3a6f6e6c7953747261746567790000000000604082015260600190565b60208082526021908201527f4a6f65566f74657250726f78793a3a7361666545786563757465206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03919091166020830152604082015260600190565b91825260ff16602082015260400190565b918252602082015260400190565b60005b83811015611f62578181015183820152602001611f4a565b83811115611f71576000848401525b50505050565b6001600160a01b0381168114611f8c57600080fd5b5056fea26469706673582212201a748f4b8e54d10fbaac69d1acc852d83b642527d25fbeda871c332cc2c4fe2e64736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80639291d563116100d8578063c494448e1161008c578063e4cca4b011610066578063e4cca4b0146102d7578063ea09f6c8146102ea578063ffebad30146102f257610182565b8063c494448e146102a9578063d2cee46f146102bc578063da09c72c146102cf57610182565b8063a318c1a4116100bd578063a318c1a414610270578063b5e893a514610283578063bb51e89f1461029657610182565b80639291d5631461024a57806397eef1871461025d57610182565b80636099ecb21161013a578063792a230f11610114578063792a230f146102275780638583b7fa1461022f578063865710f01461023757610182565b80636099ecb2146101ea5780636f7b2a621461020c578063781a29d11461021f57610182565b806346c96aac1161016b57806346c96aac146101c5578063491cad29146101cd5780634b2d9ffc146101e257610182565b806301e1c48d146101875780632d61a546146101b0575b600080fd5b61019a61019536600461199b565b6102fa565b6040516101a79190611ee9565b60405180910390f35b6101b861030f565b6040516101a79190611baf565b6101b861031e565b6101e06101db366004611947565b610342565b005b61019a6103a4565b6101fd6101f836600461199b565b6103aa565b6040516101a793929190611f09565b6101e061021a366004611a5c565b6104fe565b61019a6105e6565b6101b86105ec565b61019a6105fb565b6101e0610245366004611a2c565b6106f3565b6101e0610258366004611947565b610722565b6101e061026b366004611a2c565b61077b565b6101e061027e366004611a9d565b6107aa565b6101e0610291366004611947565b610918565b6101e06102a4366004611a5c565b610971565b6101e06102b7366004611963565b6109c2565b6101e06102ca366004611a5c565b610aec565b6101b8610c7b565b6101e06102e5366004611a9d565b610c8a565b6101b8610dc9565b6101b8610de1565b60006103068383610df9565b90505b92915050565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004546001600160a01b031633146103755760405162461bcd60e51b815260040161036c90611c73565b60405180910390fd5b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60015481565b6000806000846001600160a01b031663ffcd4263857f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016103fd929190611ef2565b60006040518083038186803b15801561041557600080fd5b505afa158015610429573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104519190810190611ae4565b905080935081945082955050505060006104e86127106104e2306001600160a01b0316638583b7fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190611a44565b8790610eba565b90610ef4565b90506104f48482610f36565b9350509250925092565b6001600160a01b038083166000908152600560209081526040808320878452909152902054839185911633146105465760405162461bcd60e51b815260040161036c90611dc1565b6105d5846000876000604051602401610560929190611f28565b60408051601f198184030181529190526020810180516001600160e01b03167fe2bbb158000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b506105df8361102f565b5050505050565b60005481565b6003546001600160a01b031681565b6000805481901580159061061957506003546001600160a01b031615155b80156106b157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067957600080fd5b505afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b191906119c6565b156106bb57506000545b6000806001541180156106d857506002546001600160a01b031615155b156106e257506001545b6106ec828261161d565b9250505090565b6004546001600160a01b0316331461071d5760405162461bcd60e51b815260040161036c90611c73565b600055565b6004546001600160a01b0316331461074c5760405162461bcd60e51b815260040161036c90611c73565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031633146107a55760405162461bcd60e51b815260040161036c90611c73565b600155565b6001600160a01b038084166000908152600560209081526040808320888452909152902054849186911633146107f25760405162461bcd60e51b815260040161036c90611dc1565b610880856000888660405160240161080b929190611f39565b60408051601f198184030181529190526020810180516001600160e01b03167f441a3e70000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b5061090f846000338660405160240161089a929190611bc3565b60408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b50505050505050565b6004546001600160a01b031633146109425760405162461bcd60e51b815260040161036c90611c73565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038083166000908152600560209081526040808320878452909152902054839185911633146109b95760405162461bcd60e51b815260040161036c90611dc1565b6105df8361102f565b6004546001600160a01b031633146109ec5760405162461bcd60e51b815260040161036c90611c73565b6000816001600160a01b0316635eaec0e46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190611a44565b6001600160a01b0384811660009081526005602090815260408083208584529091529020549192501615610aa75760405162461bcd60e51b815260040161036c90611caa565b6001600160a01b03928316600090815260056020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b6001600160a01b03808316600090815260056020908152604080832087845290915290205483918591163314610b345760405162461bcd60e51b815260040161036c90611dc1565b610bc084600087604051602401610b4b9190611ee9565b60408051601f198184030181529190526020810180516001600160e01b03167f5312ea8e000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b506040516370a0823160e01b81526000906001600160a01b038516906370a0823190610c10907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b158015610c2857600080fd5b505afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190611a44565b905061090f846000338460405160240161089a929190611bc3565b6004546001600160a01b031681565b6001600160a01b03808416600090815260056020908152604080832088845290915290205484918691163314610cd25760405162461bcd60e51b815260040161036c90611dc1565b610d066001600160a01b0385167f000000000000000000000000000000000000000000000000000000000000000085611642565b610d948460008786604051602401610d1f929190611bc3565b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610f78565b50610dae8560008886604051602401610560929190611f39565b5061090f846000876000604051602401610d1f929190611bdc565b7325d85e17dd9e544f6e9f8d44f99602dbf5a9734181565b736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd81565b6040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906393f1a40b90610e639085907f000000000000000000000000000000000000000000000000000000000000000090600401611ef2565b604080518083038186803b158015610e7a57600080fd5b505afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb29190611b44565b509392505050565b600082610ec957506000610309565b82820282848281610ed657fe5b04146103065760405162461bcd60e51b815260040161036c90611d64565b600061030683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506116b0565b600061030683836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506116e9565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401610fae93929190611bf8565b600060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261100491908101906119e0565b91509150816110255760405162461bcd60e51b815260040161036c90611df8565b9695505050505050565b6001600160a01b03811673b31f66aa3c1e785363f0875a1b74e27b85fd66c714156110e9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a556f516040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156110af57600080fd5b505af11580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190611a44565b505b6040516370a0823160e01b8152600090736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd906370a0823190611143907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b15801561115b57600080fd5b505afa15801561116f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111939190611a44565b905060006001600160a01b0383166111ac576000611248565b6040516370a0823160e01b81526001600160a01b038416906370a08231906111f8907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190611a44565b905081156114bf57600080805411801561126c57506003546001600160a01b031615155b801561130457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130491906119c6565b156113f8576113246127106104e260005486610eba90919063ffffffff16565b6040517f7c0bb4ab0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637c0bb4ab9061138c908490600401611ee9565b600060405180830381600087803b1580156113a657600080fd5b505af11580156113ba573d6000803e3d6000fd5b50506003546113f892506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692501683611642565b60008060015411801561141557506002546001600160a01b031615155b15611475576114356127106104e260015487610eba90919063ffffffff16565b60025460405191925061147391736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd9160009161089a916001600160a01b0316908690602401611bc3565b505b600061148b826114858786610f36565b90610f36565b90506114ba736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd6000338460405160240161089a929190611bc3565b505050505b80156114e0576114de836000338460405160240161089a929190611bc3565b505b6040517ffc2f53b60000000000000000000000000000000000000000000000000000000081526000907325d85e17dd9e544f6e9f8d44f99602dbf5a973419063fc2f53b690611553907f000000000000000000000000000000000000000000000000000000000000000090600401611baf565b60206040518083038186803b15801561156b57600080fd5b505afa15801561157f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a39190611a44565b1115611618577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b29b4bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561160457600080fd5b505af115801561090f573d6000803e3d6000fd5b505050565b6000828201838110156103065760405162461bcd60e51b815260040161036c90611c3c565b6116188363a9059cbb60e01b8484604051602401611661929190611bc3565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611715565b600081836116d15760405162461bcd60e51b815260040161036c9190611c29565b5060008385816116dd57fe5b049150505b9392505050565b6000818484111561170d5760405162461bcd60e51b815260040161036c9190611c29565b505050900390565b606061176a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117a49092919063ffffffff16565b805190915015611618578080602001905181019061178891906119c6565b6116185760405162461bcd60e51b815260040161036c90611e8c565b60606117b384846000856117bb565b949350505050565b6060824710156117dd5760405162461bcd60e51b815260040161036c90611d07565b6117e68561187c565b6118025760405162461bcd60e51b815260040161036c90611e55565b60006060866001600160a01b0316858760405161181f9190611b93565b60006040518083038185875af1925050503d806000811461185c576040519150601f19603f3d011682016040523d82523d6000602084013e611861565b606091505b5091509150611871828286611886565b979650505050505050565b803b15155b919050565b606083156118955750816116e2565b8251156118a55782518084602001fd5b8160405162461bcd60e51b815260040161036c9190611c29565b8051801515811461188157600080fd5b600082601f8301126118df578081fd5b815167ffffffffffffffff808211156118f457fe5b604051601f8301601f19168101602001828111828210171561191257fe5b60405282815292508284830160200186101561192d57600080fd5b61193e836020830160208801611f47565b50505092915050565b600060208284031215611958578081fd5b813561030681611f77565b60008060408385031215611975578081fd5b823561198081611f77565b9150602083013561199081611f77565b809150509250929050565b600080604083850312156119ad578182fd5b82356119b881611f77565b946020939093013593505050565b6000602082840312156119d7578081fd5b610306826118bf565b600080604083850312156119f2578182fd5b6119fb836118bf565b9150602083015167ffffffffffffffff811115611a16578182fd5b611a22858286016118cf565b9150509250929050565b600060208284031215611a3d578081fd5b5035919050565b600060208284031215611a55578081fd5b5051919050565b600080600060608486031215611a70578081fd5b833592506020840135611a8281611f77565b91506040840135611a9281611f77565b809150509250925092565b60008060008060808587031215611ab2578081fd5b843593506020850135611ac481611f77565b92506040850135611ad481611f77565b9396929550929360600135925050565b60008060008060808587031215611af9578384fd5b845193506020850151611b0b81611f77565b604086015190935067ffffffffffffffff811115611b27578283fd5b611b33878288016118cf565b606096909601519497939650505050565b60008060408385031215611b56578182fd5b505080516020909101519092909150565b60008151808452611b7f816020860160208601611f47565b601f01601f19169290920160200192915050565b60008251611ba5818460208701611f47565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b60006001600160a01b038516825283602083015260606040830152611c206060830184611b67565b95945050505050565b6000602082526103066020830184611b67565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f4a6f65566f74657250726f78793a3a6f6e6c7944657600000000000000000000604082015260600190565b6020808252602d908201527f4a6f65566f74657250726f78793a3a537472617465677920666f72205049442060408201527f616c726561647920616464656400000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4a6f65566f74657250726f78793a3a6f6e6c7953747261746567790000000000604082015260600190565b60208082526021908201527f4a6f65566f74657250726f78793a3a7361666545786563757465206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03919091166020830152604082015260600190565b91825260ff16602082015260400190565b918252602082015260400190565b60005b83811015611f62578181015183820152602001611f4a565b83811115611f71576000848401525b50505050565b6001600160a01b0381168114611f8c57600080fd5b5056fea26469706673582212201a748f4b8e54d10fbaac69d1acc852d83b642527d25fbeda871c332cc2c4fe2e64736f6c63430007030033",
  "devdoc": {
    "details": "For accounting reasons, there is one approved strategy per Masterchef PID. In case of upgrade, use a new proxy.",
    "kind": "dev",
    "methods": {
      "approveStrategy(address,address)": {
        "details": "Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)",
        "params": {
          "_stakingContract": "address",
          "_strategy": "address"
        }
      },
      "claimReward(uint256,address,address)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_pid": "PID",
          "_stakingContract": "Masterchef"
        }
      },
      "deposit(uint256,address,address,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_amount": "deposit amount",
          "_pid": "PID",
          "_stakingContract": "Masterchef",
          "_token": "Deposit asset"
        }
      },
      "distributeReward(uint256,address,address)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_pid": "PID",
          "_stakingContract": "Masterchef"
        }
      },
      "emergencyWithdraw(uint256,address,address)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_pid": "PID",
          "_stakingContract": "Masterchef",
          "_token": "Deposit asset"
        }
      },
      "pendingRewards(address,uint256)": {
        "params": {
          "_pid": "PID",
          "_stakingContract": "Masterchef"
        },
        "returns": {
          "bonusTokenAddress": "bonusTokenAddress",
          "pendingBonusToken": "pendingBonusToken",
          "pendingJoe": "pendingJoe"
        }
      },
      "reinvestFeeBips()": {
        "returns": {
          "_0": "reinvest fee"
        }
      },
      "setBoosterFee(uint256)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeBips": "new fee in bips (1% = 100 bips)"
        }
      },
      "setBoosterFeeReceiver(address)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeReceiver": "address"
        }
      },
      "setStakerFee(uint256)": {
        "details": "Restricted to devAddr",
        "params": {
          "_stakerFeeBips": "new fee in bips (1% = 100 bips)"
        }
      },
      "setStakerFeeReceiver(address)": {
        "details": "Restricted to devAddr",
        "params": {
          "_stakerFeeReceiver": "address"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "withdraw(uint256,address,address,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_amount": "withdraw amount",
          "_pid": "PID",
          "_stakingContract": "Masterchef",
          "_token": "Deposit asset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveStrategy(address,address)": {
        "notice": "Add an approved strategy"
      },
      "claimReward(uint256,address,address)": {
        "notice": "Claim and distribute rewards"
      },
      "deposit(uint256,address,address,uint256)": {
        "notice": "Deposit function"
      },
      "distributeReward(uint256,address,address)": {
        "notice": "Distribute rewards"
      },
      "emergencyWithdraw(uint256,address,address)": {
        "notice": "Emergency withdraw function"
      },
      "pendingRewards(address,uint256)": {
        "notice": "Pending rewards matching interface for strategy"
      },
      "reinvestFeeBips()": {
        "notice": "Calculation of reinvest fee (boost + staking)"
      },
      "setBoosterFee(uint256)": {
        "notice": "Update booster fee"
      },
      "setBoosterFeeReceiver(address)": {
        "notice": "Update booster fee receiver"
      },
      "setStakerFee(uint256)": {
        "notice": "Update staker fee"
      },
      "setStakerFeeReceiver(address)": {
        "notice": "Update staker fee receiver"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "withdraw(uint256,address,address,uint256)": {
        "notice": "Withdraw function"
      }
    },
    "notice": "JoeVoterProxy is an upgradable contract. Strategies interact with JoeVoterProxy and JoeVoterProxy interacts with JoeVoter.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 75984,
        "contract": "contracts/strategies/JoeVoterProxy.sol:JoeVoterProxy",
        "label": "boosterFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 75986,
        "contract": "contracts/strategies/JoeVoterProxy.sol:JoeVoterProxy",
        "label": "stakerFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 75988,
        "contract": "contracts/strategies/JoeVoterProxy.sol:JoeVoterProxy",
        "label": "stakerFeeReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 75990,
        "contract": "contracts/strategies/JoeVoterProxy.sol:JoeVoterProxy",
        "label": "boosterFeeReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 76003,
        "contract": "contracts/strategies/JoeVoterProxy.sol:JoeVoterProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 76009,
        "contract": "contracts/strategies/JoeVoterProxy.sol:JoeVoterProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}