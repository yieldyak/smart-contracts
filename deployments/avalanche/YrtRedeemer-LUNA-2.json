{
  "address": "0x166AC70de313C7B41148d610D99448A62FC241ab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_redemptionToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redemptionTokens",
          "type": "uint256"
        }
      ],
      "name": "Fund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redemptionTokens",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eligibleDepositTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "getClaims",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "internalType": "struct YrtRedeemer.Claim[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redemptionAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "outstandingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redemptionBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4612f7dbe16d67700ca67108ab9d88a3d60cc9fb882fb60856ee8b259ebcf6b0",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x166AC70de313C7B41148d610D99448A62FC241ab",
    "transactionIndex": 6,
    "gasUsed": "1162401",
    "logsBloom": "0x00000000000000000000000000800000000000000000000000800000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000040008000000000000000000000000000000000000000000000000000002000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdad57c31591d57d0b05d68ce9ff788760bca2be554be2f91f0a2f0a24902a169",
    "transactionHash": "0x4612f7dbe16d67700ca67108ab9d88a3d60cc9fb882fb60856ee8b259ebcf6b0",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 15423420,
        "transactionHash": "0x4612f7dbe16d67700ca67108ab9d88a3d60cc9fb882fb60856ee8b259ebcf6b0",
        "address": "0x166AC70de313C7B41148d610D99448A62FC241ab",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xdad57c31591d57d0b05d68ce9ff788760bca2be554be2f91f0a2f0a24902a169"
      }
    ],
    "blockNumber": 15423420,
    "cumulativeGasUsed": "1590839",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x120AD3e5A7c796349e591F1570D9f7980F4eA9cb"
  ],
  "solcInputHash": "ebab743fe6555c516e79b1b321c11d60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_redemptionToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionTokens\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eligibleDepositTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct YrtRedeemer.Claim[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redemptionAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"outstandingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redemptionBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yield Yak\",\"details\":\"Important: this contract assumes minting is disabled for each deposit token. If more deposit tokens are minted, the contract may run out of redemption tokens too soon.\",\"kind\":\"dev\",\"methods\":{\"fund(address,uint256)\":{\"details\":\"Restricted to `onlyOwner` to avoid griefing\",\"params\":{\"amount\":\"redemption token amount\",\"depositToken\":\"deposit token address\"}},\"getClaims(address)\":{\"params\":{\"claimer\":\"address of claimer\"},\"returns\":{\"_0\":\"array of Claims\"}},\"getRedemptionTokensForShares(address,uint256)\":{\"params\":{\"amount\":\"deposit token amount\",\"depositToken\":\"deposit token address\"},\"returns\":{\"redemptionAmount\":\"redemption token amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"amount\":\"amount to recover\",\"token\":\"token address\"}},\"redeem(address,uint256)\":{\"params\":{\"depositToken\":\"deposit token address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"YrtRedeemer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"eligibleDepositTokens(uint256)\":{\"notice\":\"Funded \"},\"fund(address,uint256)\":{\"notice\":\"Enable redemptions for specific depositToken and fund redemption token\"},\"getClaims(address)\":{\"notice\":\"Helper function to get all claims for `claimer`\"},\"getRedemptionTokensForShares(address,uint256)\":{\"notice\":\"Calculates exchange rate for depositToken amount\"},\"outstandingSupply(address)\":{\"notice\":\"Outstanding supply for each deposit token\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"redeem(address,uint256)\":{\"notice\":\"Redeem deposit token balance for redemption tokens\"},\"redeemAll()\":{\"notice\":\"Redeem all possible claims\"},\"redemptionBalances(address)\":{\"notice\":\"Total redemption tokens available to redeem for each deposit token\"},\"redemptionToken()\":{\"notice\":\"Redemption token\"}},\"notice\":\"YrtRedeemer is a contract that exchanges the deposit tokens (ERC20) for a redemption token. YrtRedeemer attempts to collect the entire supply of deposit tokens in exchange for redemption tokens at a calculated exchange rate. YrtRedeemer allows anyone to fund redemption tokens exactly ONCE for each deposit token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farms/YrtRedeemer.sol\":\"YrtRedeemer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/farms/YrtRedeemer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../lib/Ownable.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\ninterface IStrategy {\\n    function DEPOSITS_ENABLED() external view returns (bool);\\n}\\n\\n/**\\n * @title YrtRedeemer\\n * @author Yield Yak\\n * @notice YrtRedeemer is a contract that exchanges the deposit tokens (ERC20) for a redemption token.\\n * YrtRedeemer attempts to collect the entire supply of deposit tokens in exchange for redemption tokens at a calculated\\n * exchange rate. YrtRedeemer allows anyone to fund redemption tokens exactly ONCE for each deposit token.\\n * @dev Important: this contract assumes minting is disabled for each deposit token. If more deposit tokens are minted,\\n * the contract may run out of redemption tokens too soon.\\n */\\ncontract YrtRedeemer is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Redemption token\\n    IERC20 public immutable redemptionToken;\\n\\n    /// @notice Total redemption tokens available to redeem for each deposit token\\n    mapping(IERC20 => uint256) public redemptionBalances;\\n\\n    /// @notice Outstanding supply for each deposit token\\n    mapping(IERC20 => uint256) public outstandingSupply;\\n\\n    /// @notice Funded \\n    IERC20[] public eligibleDepositTokens;\\n\\n    struct Claim {\\n        IERC20 strategy;\\n        uint256 amount;\\n        bool approved;\\n    }\\n\\n    event Fund(IERC20 indexed token, uint256 redemptionTokens);\\n    event Redeem(address indexed account, IERC20 indexed token, uint256 amount, uint256 redemptionTokens);\\n    event Recovered(IERC20 token, uint256 amount);\\n\\n    constructor(\\n        IERC20 _redemptionToken\\n    ) {\\n        require(address(_redemptionToken) != address(0), \\\"YrtRedeemer::redemptionToken can't be address(0)\\\");\\n        redemptionToken = _redemptionToken;\\n    }\\n\\n    /**\\n     * @notice Helper function to get all claims for `claimer`\\n     * @param claimer address of claimer\\n     * @return array of Claims\\n     */\\n    function getClaims(address claimer) public view returns (Claim[] memory) {\\n        Claim[] memory claims = new Claim[](eligibleDepositTokens.length);\\n        for (uint256 i = 0; i < eligibleDepositTokens.length; i++) {\\n            uint256 balance = eligibleDepositTokens[i].balanceOf(claimer);\\n            bool approved = eligibleDepositTokens[i].allowance(claimer, address(this)) >= balance;\\n            claims[i] = Claim(eligibleDepositTokens[i], balance, approved);\\n        }\\n        \\n        return claims;\\n    }\\n\\n    /**\\n     * @notice Enable redemptions for specific depositToken and fund redemption token\\n     * @dev Restricted to `onlyOwner` to avoid griefing\\n     * @param depositToken deposit token address\\n     * @param amount redemption token amount\\n     */\\n    function fund(IERC20 depositToken, uint256 amount) external onlyOwner {\\n        require(redemptionBalances[depositToken] == 0, \\\"YrtRedeemer::depositToken already funded\\\");\\n        require(outstandingSupply[depositToken] == 0, \\\"YrtRedeemer::outstandingSupply already set\\\");\\n        require(!IStrategy(address(depositToken)).DEPOSITS_ENABLED(), \\\"YrtRedeemer::deposits enabled\\\");\\n\\n        uint256 totalSupply = depositToken.totalSupply();\\n        require(totalSupply > 0, \\\"YrtRedeemer::no depositTokens to collect\\\");\\n\\n        outstandingSupply[depositToken] = totalSupply;\\n        redemptionBalances[depositToken] = amount;\\n        eligibleDepositTokens.push(depositToken);\\n\\n        redemptionToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Fund(depositToken, amount);\\n    }\\n\\n    /**\\n     * @notice Redeem all possible claims\\n     */\\n    function redeemAll() external {\\n        Claim[] memory claims = getClaims(msg.sender);\\n        for (uint i = 0; i < claims.length; i++) {\\n            if (claims[i].amount > 0 && claims[i].approved) {\\n                redeem(claims[i].strategy, claims[i].amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Redeem deposit token balance for redemption tokens\\n     * @param depositToken deposit token address\\n     */\\n    function redeem(IERC20 depositToken, uint256 amount) public {\\n        depositToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 redemptionTokens = getRedemptionTokensForShares(depositToken, amount);\\n        require(redemptionTokens > 0, \\\"redeem::Nothing to redeem\\\");\\n        redemptionToken.safeTransfer(msg.sender, redemptionTokens);\\n        emit Redeem(msg.sender, depositToken, amount, redemptionTokens);\\n    }\\n\\n    /**\\n     * @notice Calculates exchange rate for depositToken amount\\n     * @param depositToken deposit token address\\n     * @param amount deposit token amount\\n     * @return redemptionAmount redemption token amount\\n     */\\n    function getRedemptionTokensForShares(IERC20 depositToken, uint256 amount) public view returns (uint256 redemptionAmount) {\\n        uint256 totalRedemptionBalance = redemptionBalances[depositToken];\\n        uint256 totalShares = outstandingSupply[depositToken];\\n        if (totalShares == 0 || totalRedemptionBalance == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalRedemptionBalance).div(totalShares);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param token token address\\n     * @param amount amount to recover\\n     */\\n    function recoverERC20(IERC20 token, uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"recoverERC20::Nothing to recover\\\");\\n        token.safeTransfer(msg.sender, amount);\\n        emit Recovered(token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x805cd1457c2993a265c373c5c6bd4b9dceb608f57f0cc51fb4c02cef54482836\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity 0.8.13;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc346884413e71a1422efe5e44741b2692cbabf006f562dbdf38186790f49b1c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516114eb3803806114eb83398101604081905261002f916100f4565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0381166100e35760405162461bcd60e51b815260206004820152603060248201527f59727452656465656d65723a3a726564656d7074696f6e546f6b656e2063616e60448201526f2774206265206164647265737328302960801b606482015260840160405180910390fd5b6001600160a01b0316608052610124565b60006020828403121561010657600080fd5b81516001600160a01b038116811461011d57600080fd5b9392505050565b60805161139e61014d6000396000818161011c015281816102b0015261080b015261139e6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638980f11f1161008c578063d2d2a90d11610066578063d2d2a90d146101d2578063e35fae21146101e5578063f2fde38b14610205578063f37ead581461021857600080fd5b80638980f11f1461018e5780638da5cb5b146101a1578063d0d46a0b146101b257600080fd5b80632f4350c2116100bd5780632f4350c21461016b578063715018a6146101735780637b1837de1461017b57600080fd5b80630450ef54146100e45780631dc956c7146101175780631e9a695014610156575b600080fd5b6101046100f2366004611150565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010e565b61016961016436600461116d565b61022b565b005b610169610322565b6101696103e1565b61016961018936600461116d565b610492565b61016961019c36600461116d565b61087b565b6000546001600160a01b031661013e565b6101c56101c0366004611150565b61097f565b60405161010e9190611199565b6101046101e036600461116d565b610bd1565b6101046101f3366004611150565b60016020526000908152604090205481565b610169610213366004611150565b610c2f565b61013e6102263660046111fd565b610d6d565b6102406001600160a01b038316333084610d97565b600061024c8383610bd1565b9050600081116102a35760405162461bcd60e51b815260206004820152601960248201527f72656465656d3a3a4e6f7468696e6720746f2072656465656d0000000000000060448201526064015b60405180910390fd5b6102d76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610e4e565b60408051838152602081018390526001600160a01b0385169133917f3f693fff038bb8a046aa76d9516190ac7444f7d69cf952c4cbdc086fdef2d6fc910160405180910390a3505050565b600061032d3361097f565b905060005b81518110156103dd57600082828151811061034f5761034f611216565b602002602001015160200151118015610382575081818151811061037557610375611216565b6020026020010151604001515b156103cb576103cb82828151811061039c5761039c611216565b6020026020010151600001518383815181106103ba576103ba611216565b60200260200101516020015161022b565b806103d581611242565b915050610332565b5050565b6000546001600160a01b0316331461043b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031633146104ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b6001600160a01b038216600090815260016020526040902054156105785760405162461bcd60e51b815260206004820152602860248201527f59727452656465656d65723a3a6465706f736974546f6b656e20616c7265616460448201527f792066756e646564000000000000000000000000000000000000000000000000606482015260840161029a565b6001600160a01b038216600090815260026020526040902054156106045760405162461bcd60e51b815260206004820152602a60248201527f59727452656465656d65723a3a6f75747374616e64696e67537570706c79206160448201527f6c72656164792073657400000000000000000000000000000000000000000000606482015260840161029a565b816001600160a01b031663b52a321f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610666919061125b565b156106b35760405162461bcd60e51b815260206004820152601d60248201527f59727452656465656d65723a3a6465706f7369747320656e61626c6564000000604482015260640161029a565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610717919061127d565b90506000811161078f5760405162461bcd60e51b815260206004820152602860248201527f59727452656465656d65723a3a6e6f206465706f736974546f6b656e7320746f60448201527f20636f6c6c656374000000000000000000000000000000000000000000000000606482015260840161029a565b6001600160a01b03808416600081815260026020908152604080832086905560019182905282208690556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055610833907f000000000000000000000000000000000000000000000000000000000000000016333085610d97565b826001600160a01b03167fda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd8360405161086e91815260200190565b60405180910390a2505050565b6000546001600160a01b031633146108d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b600081116109255760405162461bcd60e51b815260206004820181905260248201527f7265636f76657245524332303a3a4e6f7468696e6720746f207265636f766572604482015260640161029a565b6109396001600160a01b0383163383610e4e565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b60035460609060009067ffffffffffffffff8111156109a0576109a0611296565b6040519080825280602002602001820160405280156109eb57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816109be5790505b50905060005b600354811015610bca57600060038281548110610a1057610a10611216565b6000918252602090912001546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa0919061127d565b905060008160038481548110610ab857610ab8611216565b6000918252602090912001546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301523060248301529091169063dd62ed3e90604401602060405180830381865afa158015610b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e919061127d565b10159050604051806060016040528060038581548110610b7057610b70611216565b600091825260209182902001546001600160a01b0316825281018490528215156040909101528451859085908110610baa57610baa611216565b602002602001018190525050508080610bc290611242565b9150506109f1565b5092915050565b6001600160a01b0382166000908152600160209081526040808320546002909252822054801580610c00575081155b15610c1057600092505050610c29565b610c2481610c1e8685610e9c565b90610eaf565b925050505b92915050565b6000546001600160a01b03163314610c895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b6001600160a01b038116610d055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161029a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60038181548110610d7d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516001600160a01b0380851660248301528316604482015260648101829052610e489085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ebb565b50505050565b6040516001600160a01b038316602482015260448101829052610e979084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610de4565b505050565b6000610ea882846112ac565b9392505050565b6000610ea882846112cb565b6000610f10826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fa09092919063ffffffff16565b805190915015610e975780806020019051810190610f2e919061125b565b610e975760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161029a565b6060610faf8484600085610fb7565b949350505050565b60608247101561102f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161029a565b6001600160a01b0385163b6110865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029a565b600080866001600160a01b031685876040516110a29190611319565b60006040518083038185875af1925050503d80600081146110df576040519150601f19603f3d011682016040523d82523d6000602084013e6110e4565b606091505b50915091506110f48282866110ff565b979650505050505050565b6060831561110e575081610ea8565b82511561111e5782518084602001fd5b8160405162461bcd60e51b815260040161029a9190611335565b6001600160a01b038116811461114d57600080fd5b50565b60006020828403121561116257600080fd5b8135610ea881611138565b6000806040838503121561118057600080fd5b823561118b81611138565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156111f057815180516001600160a01b031685528681015187860152850151151585850152606090930192908501906001016111b6565b5091979650505050505050565b60006020828403121561120f57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016112545761125461122c565b5060010190565b60006020828403121561126d57600080fd5b81518015158114610ea857600080fd5b60006020828403121561128f57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60008160001904831182151516156112c6576112c661122c565b500290565b6000826112e857634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156113085781810151838201526020016112f0565b83811115610e485750506000910152565b6000825161132b8184602087016112ed565b9190910192915050565b60208152600082518060208401526113548160408501602087016112ed565b601f01601f1916919091016040019291505056fea2646970667358221220d62254ef8ee241b819838da9f68837101deed3f6ff8c7bdbc7237e6b56b08ef364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638980f11f1161008c578063d2d2a90d11610066578063d2d2a90d146101d2578063e35fae21146101e5578063f2fde38b14610205578063f37ead581461021857600080fd5b80638980f11f1461018e5780638da5cb5b146101a1578063d0d46a0b146101b257600080fd5b80632f4350c2116100bd5780632f4350c21461016b578063715018a6146101735780637b1837de1461017b57600080fd5b80630450ef54146100e45780631dc956c7146101175780631e9a695014610156575b600080fd5b6101046100f2366004611150565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010e565b61016961016436600461116d565b61022b565b005b610169610322565b6101696103e1565b61016961018936600461116d565b610492565b61016961019c36600461116d565b61087b565b6000546001600160a01b031661013e565b6101c56101c0366004611150565b61097f565b60405161010e9190611199565b6101046101e036600461116d565b610bd1565b6101046101f3366004611150565b60016020526000908152604090205481565b610169610213366004611150565b610c2f565b61013e6102263660046111fd565b610d6d565b6102406001600160a01b038316333084610d97565b600061024c8383610bd1565b9050600081116102a35760405162461bcd60e51b815260206004820152601960248201527f72656465656d3a3a4e6f7468696e6720746f2072656465656d0000000000000060448201526064015b60405180910390fd5b6102d76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610e4e565b60408051838152602081018390526001600160a01b0385169133917f3f693fff038bb8a046aa76d9516190ac7444f7d69cf952c4cbdc086fdef2d6fc910160405180910390a3505050565b600061032d3361097f565b905060005b81518110156103dd57600082828151811061034f5761034f611216565b602002602001015160200151118015610382575081818151811061037557610375611216565b6020026020010151604001515b156103cb576103cb82828151811061039c5761039c611216565b6020026020010151600001518383815181106103ba576103ba611216565b60200260200101516020015161022b565b806103d581611242565b915050610332565b5050565b6000546001600160a01b0316331461043b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031633146104ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b6001600160a01b038216600090815260016020526040902054156105785760405162461bcd60e51b815260206004820152602860248201527f59727452656465656d65723a3a6465706f736974546f6b656e20616c7265616460448201527f792066756e646564000000000000000000000000000000000000000000000000606482015260840161029a565b6001600160a01b038216600090815260026020526040902054156106045760405162461bcd60e51b815260206004820152602a60248201527f59727452656465656d65723a3a6f75747374616e64696e67537570706c79206160448201527f6c72656164792073657400000000000000000000000000000000000000000000606482015260840161029a565b816001600160a01b031663b52a321f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610666919061125b565b156106b35760405162461bcd60e51b815260206004820152601d60248201527f59727452656465656d65723a3a6465706f7369747320656e61626c6564000000604482015260640161029a565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610717919061127d565b90506000811161078f5760405162461bcd60e51b815260206004820152602860248201527f59727452656465656d65723a3a6e6f206465706f736974546f6b656e7320746f60448201527f20636f6c6c656374000000000000000000000000000000000000000000000000606482015260840161029a565b6001600160a01b03808416600081815260026020908152604080832086905560019182905282208690556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055610833907f000000000000000000000000000000000000000000000000000000000000000016333085610d97565b826001600160a01b03167fda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd8360405161086e91815260200190565b60405180910390a2505050565b6000546001600160a01b031633146108d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b600081116109255760405162461bcd60e51b815260206004820181905260248201527f7265636f76657245524332303a3a4e6f7468696e6720746f207265636f766572604482015260640161029a565b6109396001600160a01b0383163383610e4e565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b60035460609060009067ffffffffffffffff8111156109a0576109a0611296565b6040519080825280602002602001820160405280156109eb57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816109be5790505b50905060005b600354811015610bca57600060038281548110610a1057610a10611216565b6000918252602090912001546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa0919061127d565b905060008160038481548110610ab857610ab8611216565b6000918252602090912001546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301523060248301529091169063dd62ed3e90604401602060405180830381865afa158015610b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e919061127d565b10159050604051806060016040528060038581548110610b7057610b70611216565b600091825260209182902001546001600160a01b0316825281018490528215156040909101528451859085908110610baa57610baa611216565b602002602001018190525050508080610bc290611242565b9150506109f1565b5092915050565b6001600160a01b0382166000908152600160209081526040808320546002909252822054801580610c00575081155b15610c1057600092505050610c29565b610c2481610c1e8685610e9c565b90610eaf565b925050505b92915050565b6000546001600160a01b03163314610c895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029a565b6001600160a01b038116610d055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161029a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60038181548110610d7d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516001600160a01b0380851660248301528316604482015260648101829052610e489085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ebb565b50505050565b6040516001600160a01b038316602482015260448101829052610e979084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610de4565b505050565b6000610ea882846112ac565b9392505050565b6000610ea882846112cb565b6000610f10826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fa09092919063ffffffff16565b805190915015610e975780806020019051810190610f2e919061125b565b610e975760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161029a565b6060610faf8484600085610fb7565b949350505050565b60608247101561102f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161029a565b6001600160a01b0385163b6110865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029a565b600080866001600160a01b031685876040516110a29190611319565b60006040518083038185875af1925050503d80600081146110df576040519150601f19603f3d011682016040523d82523d6000602084013e6110e4565b606091505b50915091506110f48282866110ff565b979650505050505050565b6060831561110e575081610ea8565b82511561111e5782518084602001fd5b8160405162461bcd60e51b815260040161029a9190611335565b6001600160a01b038116811461114d57600080fd5b50565b60006020828403121561116257600080fd5b8135610ea881611138565b6000806040838503121561118057600080fd5b823561118b81611138565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156111f057815180516001600160a01b031685528681015187860152850151151585850152606090930192908501906001016111b6565b5091979650505050505050565b60006020828403121561120f57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016112545761125461122c565b5060010190565b60006020828403121561126d57600080fd5b81518015158114610ea857600080fd5b60006020828403121561128f57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60008160001904831182151516156112c6576112c661122c565b500290565b6000826112e857634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156113085781810151838201526020016112f0565b83811115610e485750506000910152565b6000825161132b8184602087016112ed565b9190910192915050565b60208152600082518060208401526113548160408501602087016112ed565b601f01601f1916919091016040019291505056fea2646970667358221220d62254ef8ee241b819838da9f68837101deed3f6ff8c7bdbc7237e6b56b08ef364736f6c634300080d0033",
  "devdoc": {
    "author": "Yield Yak",
    "details": "Important: this contract assumes minting is disabled for each deposit token. If more deposit tokens are minted, the contract may run out of redemption tokens too soon.",
    "kind": "dev",
    "methods": {
      "fund(address,uint256)": {
        "details": "Restricted to `onlyOwner` to avoid griefing",
        "params": {
          "amount": "redemption token amount",
          "depositToken": "deposit token address"
        }
      },
      "getClaims(address)": {
        "params": {
          "claimer": "address of claimer"
        },
        "returns": {
          "_0": "array of Claims"
        }
      },
      "getRedemptionTokensForShares(address,uint256)": {
        "params": {
          "amount": "deposit token amount",
          "depositToken": "deposit token address"
        },
        "returns": {
          "redemptionAmount": "redemption token amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "amount": "amount to recover",
          "token": "token address"
        }
      },
      "redeem(address,uint256)": {
        "params": {
          "depositToken": "deposit token address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "YrtRedeemer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "eligibleDepositTokens(uint256)": {
        "notice": "Funded "
      },
      "fund(address,uint256)": {
        "notice": "Enable redemptions for specific depositToken and fund redemption token"
      },
      "getClaims(address)": {
        "notice": "Helper function to get all claims for `claimer`"
      },
      "getRedemptionTokensForShares(address,uint256)": {
        "notice": "Calculates exchange rate for depositToken amount"
      },
      "outstandingSupply(address)": {
        "notice": "Outstanding supply for each deposit token"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "redeem(address,uint256)": {
        "notice": "Redeem deposit token balance for redemption tokens"
      },
      "redeemAll()": {
        "notice": "Redeem all possible claims"
      },
      "redemptionBalances(address)": {
        "notice": "Total redemption tokens available to redeem for each deposit token"
      },
      "redemptionToken()": {
        "notice": "Redemption token"
      }
    },
    "notice": "YrtRedeemer is a contract that exchanges the deposit tokens (ERC20) for a redemption token. YrtRedeemer attempts to collect the entire supply of deposit tokens in exchange for redemption tokens at a calculated exchange rate. YrtRedeemer allows anyone to fund redemption tokens exactly ONCE for each deposit token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7854,
        "contract": "contracts/farms/YrtRedeemer.sol:YrtRedeemer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3613,
        "contract": "contracts/farms/YrtRedeemer.sol:YrtRedeemer",
        "label": "redemptionBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)5314,t_uint256)"
      },
      {
        "astId": 3619,
        "contract": "contracts/farms/YrtRedeemer.sol:YrtRedeemer",
        "label": "outstandingSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)5314,t_uint256)"
      },
      {
        "astId": 3624,
        "contract": "contracts/farms/YrtRedeemer.sol:YrtRedeemer",
        "label": "eligibleDepositTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IERC20)5314)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)5314)dyn_storage": {
        "base": "t_contract(IERC20)5314",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)5314": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)5314,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)5314",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}