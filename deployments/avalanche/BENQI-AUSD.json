{
  "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenDelegator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minMinting",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "leverageLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverageBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseLendingStrategy.BaseLendingStrategySettings",
          "name": "_baseLendingStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "gasToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "rewards",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "simpleRouter",
              "type": "address"
            }
          ],
          "internalType": "struct BaseStrategy.BaseStrategySettings",
          "name": "_baseStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dev",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV3.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "UpdateRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IBenqiUnitroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedRewardsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemLimitSafetyMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simpleRouter",
      "outputs": [
        {
          "internalType": "contract ISimpleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDelegator",
      "outputs": [
        {
          "internalType": "contract IBenqiERC20Delegator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redeemLimitSafetyMargin",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "updateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
    "transactionIndex": 3,
    "gasUsed": "5684164",
    "logsBloom": "0x00000002000000000000000000000000400000000000000000c80000000000000000000000000000000000000000000000000000010002010000000000000000010000000000000000000100000008000001000000000010080000000000080000000000020000000000000000000800000000000010080000000000000000410000000000000000000000000000000000040008000000000400000110000000000000000000000400000000000000200000020000000000000000000000080000040000000000000000010000000000000000000002000000000000020020000000020010000000000000000000000002000400000000000000000000000000",
    "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a",
    "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 6,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000384",
        "logIndex": 7,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 8,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0xcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d580f9cf2fb2d09bc411532988f2afda4e7beff",
        "logIndex": 9,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0xa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00"
        ],
        "data": "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
        "logIndex": 10,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 11,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x6c7c2612a1d5Fb022De04f8FDe664F6C2461c9df",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 13,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 57604276,
        "transactionHash": "0xdb44a9e633674edbb1f554f0c77975d480eb9048cb1ed706cb16710ada53b51a",
        "address": "0x486Af39519B4Dc9a7fCcd318217352830E8AD9b4",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x000000000000000000000000190d94613a09ad7931fcd17cd6a8f9b6b47ad4140000000000000000000000006c7c2612a1d5fb022de04f8fde664f6c2461c9df",
        "logIndex": 14,
        "blockHash": "0xbef333cfaa7d38a8c814a0038f5178de7ef5d94a4d9040a287f9eb32f08ac76a"
      }
    ],
    "blockNumber": 57604276,
    "cumulativeGasUsed": "6006591",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x486Af39519B4Dc9a7fCcd318217352830E8AD9b4",
    "0x190D94613A09ad7931FcD17CD6A8F9B6B47ad414",
    "100",
    {
      "leverageLevel": "10000",
      "leverageBips": "10000"
    },
    {
      "gasToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "rewards": [
        "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      ],
      "simpleRouter": "0x959a0af5A46F76AA37317BC417D48B445658B188"
    },
    {
      "name": "Yield Yak: Benqi AUSD",
      "owner": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "dev": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "feeCollector": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
      "depositToken": "0x00000000eFE302BEAA2b3e6e1b18d08D69a9012a",
      "rewardToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "minTokensToReinvest": "1000",
      "devFeeBips": 900,
      "reinvestRewardBips": 100
    }
  ],
  "solcInputHash": "8615f28e39b2e56b474331a872d9980f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDelegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minMinting\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageBips\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseLendingStrategy.BaseLendingStrategySettings\",\"name\":\"_baseLendingStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"simpleRouter\",\"type\":\"address\"}],\"internalType\":\"struct BaseStrategy.BaseStrategySettings\",\"name\":\"_baseStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV3.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IBenqiUnitroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemLimitSafetyMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleRouter\",\"outputs\":[{\"internalType\":\"contract ISimpleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDelegator\",\"outputs\":[{\"internalType\":\"contract IBenqiERC20Delegator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemLimitSafetyMargin\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"recoverGas(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateFeeCollector(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens available to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"disableDeposits()\":{\"notice\":\"Disable deposits\"},\"enableDeposits()\":{\"notice\":\"Enable deposits\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"recoverGas(uint256)\":{\"notice\":\"Recover GAS from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateFeeCollector(address)\":{\"notice\":\"Update feeCollector\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol\":\"BenqiStrategyV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from] - value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        require(value > 0, \\\"_mint::zero shares\\\");\\n        totalSupply = totalSupply + value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x893040cb129e3428494993115424a9e7549ae5935e80b3c406ee672d7199aa70\",\"license\":\"MIT\"},\"contracts/YakStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV3 is YakERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct StrategySettings {\\n        string name;\\n        address owner;\\n        address dev;\\n        address feeCollector;\\n        address depositToken;\\n        address rewardToken;\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public immutable depositToken;\\n    IERC20 public immutable rewardToken;\\n\\n    address public devAddr;\\n    address public feeCollector;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event UpdateFeeCollector(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        name = _strategySettings.name;\\n        depositToken = IERC20(_strategySettings.depositToken);\\n        rewardToken = IERC20(_strategySettings.rewardToken);\\n\\n        devAddr = msg.sender;\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateFeeCollector(_strategySettings.feeCollector);\\n        updateDevAddr(_strategySettings.dev);\\n\\n        enableDeposits();\\n        transferOwnership(_strategySettings.owner);\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return (unclaimedRewards * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens available to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        uint256 tDeposits = totalDeposits();\\n        uint256 tSupply = totalSupply;\\n        if (tSupply == 0 || tDeposits == 0) {\\n            return amount;\\n        }\\n        return (amount * tSupply) / tDeposits;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        uint256 tDeposits = totalDeposits();\\n        uint256 tSupply = totalSupply;\\n        if (tSupply == 0 || tDeposits == 0) {\\n            return 0;\\n        }\\n        return (amount * tDeposits) / tSupply;\\n    }\\n\\n    // Dev protected\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyDev {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Disable deposits\\n     */\\n    function disableDeposits() public onlyDev {\\n        require(DEPOSITS_ENABLED);\\n        DEPOSITS_ENABLED = false;\\n        emit DepositsEnabled(false);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyDev {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyDev {\\n        require(newValue + REINVEST_REWARD_BIPS <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyDev {\\n        require(newValue + DEV_FEE_BIPS <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    // Owner protected\\n\\n    /**\\n     * @notice Enable deposits\\n     */\\n    function enableDeposits() public onlyOwner {\\n        require(!DEPOSITS_ENABLED);\\n        DEPOSITS_ENABLED = true;\\n        emit DepositsEnabled(true);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyOwner {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Update feeCollector\\n     * @param newValue address\\n     */\\n    function updateFeeCollector(address newValue) public onlyOwner {\\n        emit UpdateFeeCollector(feeCollector, newValue);\\n        feeCollector = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover GAS from contract\\n     * @param amount amount\\n     */\\n    function recoverGas(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x13ec4c1d08d0676461ce2e8ae66293b4f41cff59c7d563478133e283741e03c5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/ISimpleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../router/interfaces/IYakRouter.sol\\\";\\n\\ninterface ISimpleRouter {\\n    error UnsupportedSwap(address _tokenIn, address _tokenOut);\\n    error InvalidConfiguration();\\n\\n    struct SwapConfig {\\n        bool useYakSwapRouter;\\n        uint8 yakSwapMaxSteps;\\n        Path path;\\n    }\\n\\n    struct Path {\\n        address[] adapters;\\n        address[] tokens;\\n    }\\n\\n    function query(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (FormattedOffer memory trade);\\n\\n    function swap(FormattedOffer memory _trade) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xf736215916cbe2075222e996c43468d1bd2c42fd460f4869e2c53b7b74d0f383\",\"license\":\"MIT\"},\"contracts/interfaces/IWGAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWGAS is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4b124eb4cc5c793034c6e08c77b0932df2644e25a0e4868c0dd54efadd820e9b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/router/interfaces/IYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct Query {\\n    address adapter;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n}\\n\\nstruct Offer {\\n    bytes amounts;\\n    bytes adapters;\\n    bytes path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct FormattedOffer {\\n    uint256[] amounts;\\n    address[] adapters;\\n    address[] path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct Trade {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address[] adapters;\\n}\\n\\ninterface IYakRouter {\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    // admin\\n    function setTrustedTokens(address[] memory _trustedTokens) external;\\n    function setAdapters(address[] memory _adapters) external;\\n    function setFeeClaimer(address _claimer) external;\\n    function setMinFee(uint256 _fee) external;\\n\\n    // misc\\n    function trustedTokensCount() external view returns (uint256);\\n    function adaptersCount() external view returns (uint256);\\n\\n    // query\\n\\n    function queryAdapter(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8 _index)\\n        external\\n        returns (uint256);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8[] calldata _options)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n\\n    // swap\\n\\n    function swapNoSplit(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitFromAVAX(Trade calldata _trade, address _to, uint256 _fee) external payable;\\n\\n    function swapNoSplitToAVAX(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2706c56d892343a14619a2414572292ef9f106a98ae53b4740f155358ec22f7e\",\"license\":\"MIT\"},\"contracts/strategies/BaseLendingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./BaseStrategy.sol\\\";\\n\\nabstract contract BaseLendingStrategy is BaseStrategy {\\n    struct BaseLendingStrategySettings {\\n        uint256 leverageLevel;\\n        uint256 leverageBips;\\n    }\\n\\n    uint256 public leverageLevel;\\n    uint256 public leverageBips;\\n\\n    constructor(\\n        BaseLendingStrategySettings memory _baseLendingStrategySettings,\\n        BaseStrategySettings memory _baseStrategySettings,\\n        StrategySettings memory _strategySettings\\n    ) BaseStrategy(_baseStrategySettings, _strategySettings) {\\n        leverageLevel = _baseLendingStrategySettings.leverageLevel;\\n        leverageBips = _baseLendingStrategySettings.leverageBips;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ABSTRACT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _supplyAssets(uint256 _amount) internal virtual;\\n\\n    function _withdrawAssets(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _rollupDebt() internal virtual;\\n\\n    function _unrollDebt(uint256 _amountNeeded) internal virtual;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                DEPOSIT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _depositToStakingContract(uint256 _amount, uint256) internal override {\\n        _supplyAssets(_amount);\\n        _rollupDebt();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               WITHDRAW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 withdrawAmount) {\\n        _unrollDebt(_amount);\\n        withdrawAmount = _withdrawAssets(_amount);\\n        _rollupDebt();\\n    }\\n}\\n\",\"keccak256\":\"0x265cf78fed805ebd9ea46b1bffecb4009e120eb92cbe975197dbc8777991e596\",\"license\":\"MIT\"},\"contracts/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV3.sol\\\";\\nimport \\\"../interfaces/IWGAS.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"./../interfaces/ISimpleRouter.sol\\\";\\n\\n/**\\n * @notice BaseStrategy\\n */\\nabstract contract BaseStrategy is YakStrategyV3 {\\n    using SafeERC20 for IERC20;\\n\\n    IWGAS internal immutable WGAS;\\n\\n    struct BaseStrategySettings {\\n        address gasToken;\\n        address[] rewards;\\n        address simpleRouter;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    address[] public supportedRewards;\\n    ISimpleRouter public simpleRouter;\\n\\n    event AddReward(address rewardToken);\\n    event RemoveReward(address rewardToken);\\n    event UpdateRouter(address oldRouter, address newRouter);\\n\\n    constructor(BaseStrategySettings memory _settings, StrategySettings memory _strategySettings)\\n        YakStrategyV3(_strategySettings)\\n    {\\n        WGAS = IWGAS(_settings.gasToken);\\n\\n        supportedRewards = _settings.rewards;\\n\\n        simpleRouter = ISimpleRouter(_settings.simpleRouter);\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function updateRouter(address _router) public onlyDev {\\n        emit UpdateRouter(address(simpleRouter), _router);\\n        simpleRouter = ISimpleRouter(_router);\\n    }\\n\\n    function addReward(address _rewardToken) public onlyDev {\\n        bool found;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n            }\\n        }\\n        require(!found, \\\"BaseStrategy::Reward already configured!\\\");\\n        supportedRewards.push(_rewardToken);\\n        emit AddReward(_rewardToken);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        bool found;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"BaseStrategy::Reward not configured!\\\");\\n        supportedRewards.pop();\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function getSupportedRewardsLength() public view returns (uint256) {\\n        return supportedRewards.length;\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s)\\n        external\\n        override\\n    {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"BaseStrategy::Deposits disabled\\\");\\n        beforeDeposit();\\n        _reinvest(true);\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount), \\\"BaseStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount - depositFee));\\n        _stakeDepositTokens(_amount, depositFee);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    function beforeDeposit() internal virtual {}\\n\\n    /**\\n     * @notice Deposit fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return (_amount * depositFeeBips) / _bip();\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        beforeWithdraw();\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"BaseStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount - withdrawFee);\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    function beforeWithdraw() internal virtual {}\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return (_amount * withdrawFeeBips) / _bip();\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertPoolRewardsToRewardToken() private returns (uint256) {\\n        _getRewards();\\n        uint256 rewardTokenAmount = rewardToken.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WGAS)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WGAS.deposit{value: balance}();\\n                }\\n                if (address(rewardToken) == address(WGAS)) {\\n                    rewardTokenAmount += balance;\\n                    continue;\\n                }\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0 && reward != address(rewardToken)) {\\n                FormattedOffer memory offer = simpleRouter.query(amount, reward, address(rewardToken));\\n                rewardTokenAmount += _swap(offer);\\n            }\\n        }\\n        return rewardTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract\\n     * @param userDeposit Controls whether or not a gas refund is payed to msg.sender\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        uint256 amount = _convertPoolRewardsToRewardToken();\\n        if (amount > MIN_TOKENS_TO_REINVEST) {\\n            uint256 devFee = (amount * DEV_FEE_BIPS) / BIPS_DIVISOR;\\n            if (devFee > 0) {\\n                rewardToken.safeTransfer(feeCollector, devFee);\\n            }\\n\\n            uint256 reinvestFee = userDeposit ? 0 : (amount * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n            if (reinvestFee > 0) {\\n                rewardToken.safeTransfer(msg.sender, reinvestFee);\\n            }\\n\\n            uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount - devFee - reinvestFee);\\n\\n            if (depositTokenAmount > 0) {\\n                uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n                _stakeDepositTokens(depositTokenAmount, depositFee);\\n            }\\n        }\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount) {\\n        if (address(rewardToken) == address(depositToken)) return _fromAmount;\\n        FormattedOffer memory offer = simpleRouter.query(_fromAmount, address(rewardToken), address(depositToken));\\n        return _swap(offer);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount, uint256 _depositFee) private {\\n        require(_amount > 0, \\\"BaseStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount, _depositFee);\\n    }\\n\\n    function _swap(FormattedOffer memory _offer) internal returns (uint256 amountOut) {\\n        if (_offer.amounts.length > 0 && _offer.amounts[_offer.amounts.length - 1] > 0) {\\n            IERC20(_offer.path[0]).approve(address(simpleRouter), _offer.amounts[0]);\\n            return simpleRouter.swap(_offer);\\n        }\\n        return 0;\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(WGAS)) {\\n                rewards[i].amount += address(this).balance;\\n            }\\n            if (reward == address(rewardToken)) {\\n                estimatedTotalReward += rewards[i].amount;\\n            } else if (reward > address(0)) {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance + rewards[i].amount;\\n                if (amount > 0) {\\n                    FormattedOffer memory offer = simpleRouter.query(amount, reward, address(rewardToken));\\n                    estimatedTotalReward += offer.amounts.length > 1 ? offer.amounts[offer.amounts.length - 1] : 0;\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    function rescueDeployedFunds(uint256 _minReturnAmountAccepted) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= _minReturnAmountAccepted,\\n            \\\"BaseStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            disableDeposits();\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* ABSTRACT */\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0x3c6faf563094ea6a30170d00810f0019c7dd0b0e308e23fd16f40a14c622c417\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../BaseLendingStrategy.sol\\\";\\nimport \\\"./interfaces/IBenqiUnitroller.sol\\\";\\nimport \\\"./interfaces/IBenqiERC20Delegator.sol\\\";\\nimport \\\"./lib/BenqiLibrary.sol\\\";\\n\\ncontract BenqiStrategyV4 is BaseLendingStrategy {\\n    address private constant QI = 0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5;\\n\\n    IBenqiUnitroller public comptroller;\\n    IBenqiERC20Delegator public tokenDelegator;\\n    uint256 public minMinting;\\n    uint256 public redeemLimitSafetyMargin;\\n\\n    constructor(\\n        address _comptroller,\\n        address _tokenDelegator,\\n        uint256 _minMinting,\\n        BaseLendingStrategySettings memory _baseLendingStrategySettings,\\n        BaseStrategySettings memory _baseStrategySettings,\\n        StrategySettings memory _strategySettings\\n    ) BaseLendingStrategy(_baseLendingStrategySettings, _baseStrategySettings, _strategySettings) {\\n        comptroller = IBenqiUnitroller(_comptroller);\\n        tokenDelegator = IBenqiERC20Delegator(_tokenDelegator);\\n        minMinting = _minMinting;\\n        _updateLeverage(\\n            _baseLendingStrategySettings.leverageLevel,\\n            _baseLendingStrategySettings.leverageBips,\\n            (_baseLendingStrategySettings.leverageBips * 990) / 1000 // works as long as leverageBips > 1000\\n        );\\n        _enterMarket();\\n    }\\n\\n    function _enterMarket() internal {\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(tokenDelegator);\\n        comptroller.enterMarkets(tokens);\\n    }\\n\\n    function _updateLeverage(uint256 _leverageLevel, uint256 _leverageBips, uint256 _redeemLimitSafetyMargin)\\n        internal\\n    {\\n        leverageLevel = _leverageLevel;\\n        leverageBips = _leverageBips;\\n        redeemLimitSafetyMargin = _redeemLimitSafetyMargin;\\n    }\\n\\n    function updateLeverage(uint256 _leverageLevel, uint256 _leverageBips, uint256 _redeemLimitSafetyMargin)\\n        external\\n        onlyDev\\n    {\\n        _updateLeverage(_leverageLevel, _leverageBips, _redeemLimitSafetyMargin);\\n        uint256 borrowed = tokenDelegator.borrowBalanceCurrent(address(this));\\n        uint256 balance = tokenDelegator.balanceOfUnderlying(address(this));\\n        _unrollDebt(balance - borrowed);\\n        if (balance - borrowed > 0) {\\n            _rollupDebt();\\n        }\\n    }\\n\\n    function getActualLeverage() public view returns (uint256) {\\n        (, uint256 internalBalance, uint256 borrow, uint256 exchangeRate) =\\n            tokenDelegator.getAccountSnapshot(address(this));\\n        uint256 balance = (internalBalance * exchangeRate) / 1e18;\\n        return (balance * 1e18) / (balance - borrow);\\n    }\\n\\n    function beforeDeposit() internal override {\\n        tokenDelegator.accrueInterest();\\n    }\\n\\n    function _supplyAssets(uint256 _amount) internal override {\\n        IERC20(address(depositToken)).approve(address(tokenDelegator), _amount);\\n        require(tokenDelegator.mint(_amount) == 0, \\\"BenqiLendingStrategy::Deposit failed\\\");\\n    }\\n\\n    function beforeWithdraw() internal override {\\n        tokenDelegator.accrueInterest();\\n    }\\n\\n    function _withdrawAssets(uint256 _amount) internal override returns (uint256 withdrawAmount) {\\n        require(tokenDelegator.redeemUnderlying(_amount) == 0, \\\"BenqiLendingStrategy::failed to redeem\\\");\\n        return _amount;\\n    }\\n\\n    function _rollupDebt() internal override {\\n        uint256 borrowed = tokenDelegator.borrowBalanceCurrent(address(this));\\n        uint256 principal = tokenDelegator.balanceOfUnderlying(address(this));\\n        (uint256 borrowLimit, uint256 borrowBips) = _getBorrowLimit();\\n        uint256 supplied = principal;\\n        uint256 lendTarget = ((principal - borrowed) * leverageLevel) / leverageBips;\\n        uint256 totalBorrowed = borrowed;\\n        depositToken.approve(address(tokenDelegator), lendTarget);\\n        while (supplied < lendTarget) {\\n            uint256 toBorrowAmount = _getBorrowable(supplied, totalBorrowed, borrowLimit, borrowBips);\\n            if (supplied + toBorrowAmount > lendTarget) {\\n                toBorrowAmount = lendTarget - supplied;\\n            }\\n            // safeguard needed because we can't mint below a certain threshold\\n            if (toBorrowAmount < minMinting) {\\n                break;\\n            }\\n            require(tokenDelegator.borrow(toBorrowAmount) == 0, \\\"BenqiStrategyV4::borrowing failed\\\");\\n            require(tokenDelegator.mint(toBorrowAmount) == 0, \\\"BenqiStrategyV4::lending failed\\\");\\n            supplied = tokenDelegator.balanceOfUnderlying(address(this));\\n            totalBorrowed = totalBorrowed + toBorrowAmount;\\n        }\\n        depositToken.approve(address(tokenDelegator), 0);\\n    }\\n\\n    function _unrollDebt(uint256 _amountNeeded) internal override {\\n        uint256 borrowed = tokenDelegator.borrowBalanceCurrent(address(this));\\n        uint256 balance = tokenDelegator.balanceOfUnderlying(address(this));\\n        uint256 targetBorrow = (((balance - borrowed - _amountNeeded) * leverageLevel) / leverageBips)\\n            - (balance - borrowed - _amountNeeded);\\n        uint256 toRepay = borrowed - targetBorrow;\\n        (uint256 borrowLimit, uint256 borrowBips) = _getBorrowLimit();\\n        depositToken.approve(address(tokenDelegator), borrowed);\\n        while (toRepay > 0) {\\n            uint256 unrollAmount = _getRedeemable(balance, borrowed, borrowLimit, borrowBips);\\n            if (unrollAmount > toRepay) {\\n                unrollAmount = toRepay;\\n            }\\n            require(tokenDelegator.redeemUnderlying(unrollAmount) == 0, \\\"BenqiStrategyV4::failed to redeem\\\");\\n            require(tokenDelegator.repayBorrow(unrollAmount) == 0, \\\"BenqiStrategyV4::failed to repay borrow\\\");\\n            balance = tokenDelegator.balanceOfUnderlying(address(this));\\n            borrowed = tokenDelegator.borrowBalanceCurrent(address(this));\\n            if (targetBorrow >= borrowed) {\\n                break;\\n            }\\n            toRepay = borrowed - targetBorrow;\\n        }\\n        depositToken.approve(address(tokenDelegator), 0);\\n    }\\n\\n    function _getBorrowLimit() internal view returns (uint256, uint256) {\\n        (, uint256 borrowLimit) = comptroller.markets(address(tokenDelegator));\\n        return (borrowLimit, 1e18);\\n    }\\n\\n    function _getRedeemable(uint256 balance, uint256 borrowed, uint256 borrowLimit, uint256 bips)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (((balance - ((borrowed * bips) / borrowLimit)) * redeemLimitSafetyMargin)) / leverageBips;\\n    }\\n\\n    function _getBorrowable(uint256 balance, uint256 borrowed, uint256 borrowLimit, uint256 bips)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return ((balance * borrowLimit) / bips) - borrowed;\\n    }\\n\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        Reward[] memory pendingRewards = new Reward[](2);\\n        pendingRewards[0] =\\n            Reward({reward: QI, amount: BenqiLibrary.calculateReward(comptroller, tokenDelegator, 0, address(this))});\\n        pendingRewards[1] = Reward({\\n            reward: address(WGAS),\\n            amount: BenqiLibrary.calculateReward(comptroller, tokenDelegator, 1, address(this))\\n        });\\n        return pendingRewards;\\n    }\\n\\n    function _getRewards() internal override {\\n        address[] memory markets = new address[](1);\\n        markets[0] = address(tokenDelegator);\\n        comptroller.claimReward(0, address(this), markets);\\n        comptroller.claimReward(1, address(this), markets);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(comptroller), \\\"BenqiStrategyV4::Not allowed\\\");\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        (, uint256 internalBalance, uint256 borrow, uint256 exchangeRate) =\\n            tokenDelegator.getAccountSnapshot(address(this));\\n        return ((internalBalance * exchangeRate) / 1e18) - borrow;\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        uint256 borrowed = tokenDelegator.borrowBalanceCurrent(address(this));\\n        uint256 balance = tokenDelegator.balanceOfUnderlying(address(this));\\n        _unrollDebt(balance - borrowed);\\n        tokenDelegator.redeemUnderlying(tokenDelegator.balanceOfUnderlying(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xc86787c376ecc7941e4ae81b9226103c829ead5e882c6a24db3eabdf93c580bf\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/benqi/interfaces/IBenqiERC20Delegator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../../interfaces/IERC20.sol\\\";\\n\\ninterface IBenqiERC20Delegator is IERC20 {\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address owner) external returns (uint256);\\n\\n    function borrowBalanceStored(address owner) external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (uint256 error, uint256 balance, uint256 borrow, uint256 mantissa);\\n\\n    function getCash() external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x09d73dd29ae9cfdfc015d38dec2fac3e2ac6c8c8d4c1f1448e5a6ba3758ba679\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/benqi/interfaces/IBenqiUnitroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBenqiUnitroller {\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cTokenAddress) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function claimReward(uint8 rewardType, address holder) external; //reward type 0 is qi, 1 is avax\\n\\n    function claimReward(\\n        uint8 rewardType,\\n        address holder,\\n        address[] memory qiTokens\\n    ) external; //reward type 0 is qi, 1 is avax\\n\\n    function rewardAccrued(uint8 rewardType, address holder) external view returns (uint256);\\n\\n    function markets(address cTokenAddress) external view returns (bool, uint256);\\n\\n    function getClaimableRewards(uint256 rewardToken) external view returns (uint256, uint256);\\n\\n    function rewardSupplyState(uint8 rewardType, address holder)\\n        external\\n        view\\n        returns (uint224 index, uint32 timestamp);\\n\\n    function supplyRewardSpeeds(uint8 rewardType, address qiToken) external view returns (uint256);\\n\\n    function borrowRewardSpeeds(uint8 rewardType, address qiToken) external view returns (uint256);\\n\\n    function rewardBorrowState(uint8 rewardType, address holder)\\n        external\\n        view\\n        returns (uint224 index, uint32 timestamp);\\n\\n    function rewardSupplierIndex(\\n        uint8 rewardType,\\n        address qiContractAddress,\\n        address holder\\n    ) external view returns (uint256 supplierIndex);\\n\\n    function rewardBorrowerIndex(\\n        uint8 rewardType,\\n        address qiContractAddress,\\n        address holder\\n    ) external view returns (uint256 borrowerIndex);\\n}\\n\",\"keccak256\":\"0xe0d56b7f44f3d2d1e20e56a633de7a149a05477c4d5198ad496944cc6d38ffe8\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/benqi/lib/BenqiLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"../interfaces/IBenqiUnitroller.sol\\\";\\nimport \\\"../interfaces/IBenqiERC20Delegator.sol\\\";\\n\\nlibrary BenqiLibrary {\\n    function calculateReward(\\n        IBenqiUnitroller rewardController,\\n        IBenqiERC20Delegator tokenDelegator,\\n        uint8 tokenIndex,\\n        address account\\n    ) internal view returns (uint256) {\\n        uint256 rewardAccrued = rewardController.rewardAccrued(tokenIndex, account);\\n        return rewardAccrued + supplyAccrued(rewardController, tokenDelegator, tokenIndex, account)\\n            + borrowAccrued(rewardController, tokenDelegator, tokenIndex, account);\\n    }\\n\\n    function supplyAccrued(\\n        IBenqiUnitroller rewardController,\\n        IBenqiERC20Delegator tokenDelegator,\\n        uint8 tokenIndex,\\n        address account\\n    ) internal view returns (uint256) {\\n        Exponential.Double memory supplyIndex =\\n            Exponential.Double({mantissa: _supplyIndex(rewardController, tokenDelegator, tokenIndex)});\\n        Exponential.Double memory supplierIndex = Exponential.Double({\\n            mantissa: rewardController.rewardSupplierIndex(tokenIndex, address(tokenDelegator), account)\\n        });\\n\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            supplierIndex.mantissa = 1e36;\\n        }\\n        Exponential.Double memory deltaIndex =\\n            supplyIndex.mantissa > 0 ? Exponential.sub_(supplyIndex, supplierIndex) : Exponential.Double({mantissa: 0});\\n        return Exponential.mul_(tokenDelegator.balanceOf(account), deltaIndex);\\n    }\\n\\n    function borrowAccrued(\\n        IBenqiUnitroller rewardController,\\n        IBenqiERC20Delegator tokenDelegator,\\n        uint8 tokenIndex,\\n        address account\\n    ) internal view returns (uint256 borrowAccrued_) {\\n        Exponential.Double memory borrowerIndex = Exponential.Double({\\n            mantissa: rewardController.rewardBorrowerIndex(tokenIndex, address(tokenDelegator), account)\\n        });\\n        borrowAccrued_ = 0;\\n        if (borrowerIndex.mantissa > 0) {\\n            Exponential.Exp memory marketBorrowIndex = Exponential.Exp({mantissa: tokenDelegator.borrowIndex()});\\n            Exponential.Double memory borrowIndex = Exponential.Double({\\n                mantissa: _borrowIndex(rewardController, tokenDelegator, tokenIndex, marketBorrowIndex)\\n            });\\n            if (borrowIndex.mantissa > 0) {\\n                Exponential.Double memory deltaIndex = Exponential.sub_(borrowIndex, borrowerIndex);\\n                uint256 borrowerAmount =\\n                    Exponential.div_(tokenDelegator.borrowBalanceStored(address(this)), marketBorrowIndex);\\n                borrowAccrued_ = Exponential.mul_(borrowerAmount, deltaIndex);\\n            }\\n        }\\n    }\\n\\n    function _supplyIndex(IBenqiUnitroller rewardController, IBenqiERC20Delegator tokenDelegator, uint8 rewardType)\\n        private\\n        view\\n        returns (uint224)\\n    {\\n        (uint224 supplyStateIndex, uint256 supplyStateTimestamp) =\\n            rewardController.rewardSupplyState(rewardType, address(tokenDelegator));\\n\\n        uint256 supplySpeed = rewardController.supplyRewardSpeeds(rewardType, address(tokenDelegator));\\n        uint256 deltaTimestamps = Exponential.sub_(block.timestamp, uint256(supplyStateTimestamp));\\n        if (deltaTimestamps > 0 && supplySpeed > 0) {\\n            uint256 supplyTokens = IERC20(tokenDelegator).totalSupply();\\n            uint256 qiAccrued = Exponential.mul_(deltaTimestamps, supplySpeed);\\n            Exponential.Double memory ratio =\\n                supplyTokens > 0 ? Exponential.fraction(qiAccrued, supplyTokens) : Exponential.Double({mantissa: 0});\\n            Exponential.Double memory index = Exponential.add_(Exponential.Double({mantissa: supplyStateIndex}), ratio);\\n            return Exponential.safe224(index.mantissa, \\\"new index exceeds 224 bits\\\");\\n        }\\n        return 0;\\n    }\\n\\n    function _borrowIndex(\\n        IBenqiUnitroller rewardController,\\n        IBenqiERC20Delegator tokenDelegator,\\n        uint8 rewardType,\\n        Exponential.Exp memory marketBorrowIndex\\n    ) private view returns (uint224) {\\n        (uint224 borrowStateIndex, uint256 borrowStateTimestamp) =\\n            rewardController.rewardBorrowState(rewardType, address(tokenDelegator));\\n        uint256 borrowSpeed = rewardController.borrowRewardSpeeds(rewardType, address(tokenDelegator));\\n        uint256 deltaTimestamps = Exponential.sub_(block.timestamp, uint256(borrowStateTimestamp));\\n        if (deltaTimestamps > 0 && borrowSpeed > 0) {\\n            uint256 borrowAmount = Exponential.div_(tokenDelegator.totalBorrows(), marketBorrowIndex);\\n            uint256 qiAccrued = Exponential.mul_(deltaTimestamps, borrowSpeed);\\n            Exponential.Double memory ratio =\\n                borrowAmount > 0 ? Exponential.fraction(qiAccrued, borrowAmount) : Exponential.Double({mantissa: 0});\\n            Exponential.Double memory index = Exponential.add_(Exponential.Double({mantissa: borrowStateIndex}), ratio);\\n            return Exponential.safe224(index.mantissa, \\\"new index exceeds 224 bits\\\");\\n        }\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x2a414c09cac3cc833ea01367c11c19c53cc65d61c9b068aa65baee31cca3b40b\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/benqi/lib/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Benqi\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\nlibrary Exponential {\\n    uint256 constant expScale = 1e18;\\n    uint256 constant doubleScale = 1e36;\\n    uint256 constant halfExpScale = expScale / 2;\\n    uint256 constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0x482f9727ef0089d8da0af20363abbc0479007420d6478c6e0cded1996c31bd05\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052600960e0819052685969656c642059616b60b81b6101009081526200002e916000919062000890565b506040805180820190915260038082526216549560ea1b60209092019182526200005b9160019162000890565b503480156200006957600080fd5b5060405162006c2338038062006c238339810160408190526200008c9162000ccf565b828282818180600033600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062006c03833981519152908290a35080518051620000ea9160009160209091019062000890565b506080808201516001600160a01b0390811690915260a0808301519091169052600780546001600160a01b0319163317905560c08101516200012c906200029f565b60e08101516200013c9062000340565b6101008101516200014d90620003fc565b60608101516200015d90620004b8565b60408101516200016d906200056c565b6200017762000620565b60208101516200018790620006c1565b5081516001600160a01b031660c0526020808301518051620001ae92600d9201906200091f565b50604082810151600e80546001600160a01b0319166001600160a01b039092169190911790558051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a150508251600f555050602090810151601055601180546001600160a01b03808a166001600160a01b031992831617909255601280549289169290911691909117905560138590558351908401516200028991906103e86200026f826103de62000db2565b6200027b919062000dd4565b600f92909255601055601455565b62000293620007be565b50505050505062000f4c565b6007546001600160a01b03163314620002ff5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c7944657600000000000000000000000060448201526064015b60405180910390fd5b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b6007546001600160a01b031633146200039c5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401620002f6565b612710600b5482620003af919062000df7565b1115620003bb57600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b03163314620004585760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401620002f6565b612710600c54826200046b919062000df7565b11156200047757600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b6006546001600160a01b03163314620005035760405162461bcd60e51b8152602060048201819052602482015260008051602062006be38339815191526044820152606401620002f6565b600854604080516001600160a01b03928316815291831660208301527fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314620005b75760405162461bcd60e51b8152602060048201819052602482015260008051602062006be38339815191526044820152606401620002f6565b600754604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146200066b5760405162461bcd60e51b8152602060048201819052602482015260008051602062006be38339815191526044820152606401620002f6565b600a5460ff16156200067c57600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a1565b6006546001600160a01b031633146200070c5760405162461bcd60e51b8152602060048201819052602482015260008051602062006be38339815191526044820152606401620002f6565b6001600160a01b038116620007735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620002f6565b6006546040516001600160a01b0380841692169060008051602062006c0383398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b60408051600180825281830190925260009160208083019080368337505060125482519293506001600160a01b03169183915060009062000803576200080362000e12565b6001600160a01b039283166020918202929092010152601154604051631853304760e31b815291169063c2998238906200084290849060040162000e28565b6000604051808303816000875af115801562000862573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200088c919081019062000e77565b5050565b8280546200089e9062000f10565b90600052602060002090601f016020900481019282620008c257600085556200090d565b82601f10620008dd57805160ff19168380011785556200090d565b828001600101855582156200090d579182015b828111156200090d578251825591602001919060010190620008f0565b506200091b92915062000977565b5090565b8280548282559060005260206000209081019282156200090d579160200282015b828111156200090d57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000940565b5b808211156200091b576000815560010162000978565b80516001600160a01b0381168114620009a657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620009e657620009e6620009ab565b60405290565b60405161012081016001600160401b0381118282101715620009e657620009e6620009ab565b604080519081016001600160401b0381118282101715620009e657620009e6620009ab565b604051601f8201601f191681016001600160401b038111828210171562000a625762000a62620009ab565b604052919050565b60006001600160401b0382111562000a865762000a86620009ab565b5060051b60200190565b60006060828403121562000aa357600080fd5b62000aad620009c1565b905062000aba826200098e565b81526020828101516001600160401b0381111562000ad757600080fd5b8301601f8101851362000ae957600080fd5b805162000b0062000afa8262000a6a565b62000a37565b81815260059190911b8201830190838101908783111562000b2057600080fd5b928401925b8284101562000b495762000b39846200098e565b8252928401929084019062000b25565b8085870152505050505062000b61604083016200098e565b604082015292915050565b600082601f83011262000b7e57600080fd5b81516001600160401b0381111562000b9a5762000b9a620009ab565b602062000bb0601f8301601f1916820162000a37565b828152858284870101111562000bc557600080fd5b60005b8381101562000be557858101830151828201840152820162000bc8565b8381111562000bf75760008385840101525b5095945050505050565b6000610120828403121562000c1557600080fd5b62000c1f620009ec565b82519091506001600160401b0381111562000c3957600080fd5b62000c478482850162000b6c565b82525062000c58602083016200098e565b602082015262000c6b604083016200098e565b604082015262000c7e606083016200098e565b606082015262000c91608083016200098e565b608082015262000ca460a083016200098e565b60a082015260c082015160c082015260e082015160e082015261010080830151818301525092915050565b60008060008060008086880360e081121562000cea57600080fd5b62000cf5886200098e565b965062000d05602089016200098e565b9550604088015194506040605f198201121562000d2157600080fd5b5062000d2c62000a12565b606088015181526080880151602082015260a08801519093506001600160401b038082111562000d5b57600080fd5b62000d698a838b0162000a90565b935060c089015191508082111562000d8057600080fd5b5062000d8f89828a0162000c01565b9150509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161562000dcf5762000dcf62000d9c565b500290565b60008262000df257634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111562000e0d5762000e0d62000d9c565b500190565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101562000e6b5783516001600160a01b03168352928401929184019160010162000e44565b50909695505050505050565b6000602080838503121562000e8b57600080fd5b82516001600160401b0381111562000ea257600080fd5b8301601f8101851362000eb457600080fd5b805162000ec562000afa8262000a6a565b81815260059190911b8201830190838101908783111562000ee557600080fd5b928401925b8284101562000f055783518252928401929084019062000eea565b979650505050505050565b600181811c9082168062000f2557607f821691505b60208210810362000f4657634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051615bb16200103260003960008181611b6f01528181612cef01528181613e7e01528181613ead0152613f22015260008181610b3c01528181611ab201528181611bd701528181611d1f015281816138300152818161389801528181613dc701528181613f4c0152818161400d015281816140740152818161414501526141a101526000818161096201528181610d9601528181610e5001528181610f930152818161102d0152818161290a01528181612ffa0152818161334c015281816135150152818161411b015281816141c301526149880152615bb16000f3fe60806040526004361061033c5760003560e01c80639291d563116101b2578063c89039c5116100ed578063e592c5fa11610090578063e592c5fa14610a7f578063e75ab04514610a95578063eab89a5a14610ab5578063ed24911d14610ad5578063f2fde38b14610aea578063f6314d0714610b0a578063f7c618c114610b2a578063fdb5a03e14610b5e57600080fd5b8063c89039c514610950578063d2c35ce814610984578063d505accf146109a4578063d6ec2a49146109c4578063da09c72c146109e4578063db8dd95c14610a04578063dd62ed3e14610a19578063dd8ce4d614610a5f57600080fd5b8063ac67e1af11610155578063ac67e1af14610881578063b52a321f14610896578063b6b55f25146108b0578063b9e57b80146108d0578063bd079f55146108e5578063c415b95c146108fb578063c4b24a461461091b578063c851cc321461093057600080fd5b80639291d5631461077857806395d89b411461079857806399729ec1146107ad5780639c9b2e21146107cd5780639e4e7318146107ed578063a4d5e67c14610821578063a8ae2b7c14610841578063a9059cbb1461086157600080fd5b80635e4c57a4116102825780637ae26773116102255780637ae267731461068b5780637d882097146106ab5780637ecebe00146106c057806381837230146106ed5780638980f11f1461070d5780638aff733d1461072d5780638da5cb5b14610743578063912770661461075857600080fd5b80635e4c57a4146105925780635ea682ea146105a75780635fe3b567146105bd57806362ac20a5146105ea578063666d25b91461060057806370a0823114610620578063715018a6146106565780637897e7f61461066b57600080fd5b806323b872dd116102ea57806323b872dd146104a2578063247d284b14610422578063258250da146104c25780632e1a7d4d146104d75780632f4f21e2146104f757806330adf81f14610517578063313ce5671461054b5780634a970be71461057257600080fd5b8063065195cd146103a757806306fdde03146103d0578063095ea7b3146103f2578063110560351461042257806318160ddd146104425780631f15d71a1461045857806320606b701461046e57600080fd5b366103a2576011546001600160a01b031633146103a05760405162461bcd60e51b815260206004820152601c60248201527f42656e7169537472617465677956343a3a4e6f7420616c6c6f7765640000000060448201526064015b60405180910390fd5b005b600080fd5b3480156103b357600080fd5b506103bd60145481565b6040519081526020015b60405180910390f35b3480156103dc57600080fd5b506103e5610b73565b6040516103c7919061526e565b3480156103fe57600080fd5b5061041261040d3660046152b6565b610c01565b60405190151581526020016103c7565b34801561042e57600080fd5b506103bd61043d3660046152e2565b610c17565b34801561044e57600080fd5b506103bd60025481565b34801561046457600080fd5b506103bd60105481565b34801561047a57600080fd5b506103bd7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b3480156104ae57600080fd5b506104126104bd3660046152fb565b610c28565b3480156104ce57600080fd5b50600d546103bd565b3480156104e357600080fd5b506103a06104f23660046152e2565b610cf1565b34801561050357600080fd5b506103a06105123660046152b6565b610e02565b34801561052357600080fd5b506103bd7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b34801561055757600080fd5b50610560601281565b60405160ff90911681526020016103c7565b34801561057e57600080fd5b506103a061058d36600461534d565b610e10565b34801561059e57600080fd5b506103a0610ec5565b3480156105b357600080fd5b506103bd600c5481565b3480156105c957600080fd5b506011546105dd906001600160a01b031681565b6040516103c79190615394565b3480156105f657600080fd5b506103bd60135481565b34801561060c57600080fd5b506103a061061b3660046152e2565b610f4a565b34801561062c57600080fd5b506103bd61063b3660046153a8565b6001600160a01b031660009081526004602052604090205490565b34801561066257600080fd5b506103a061118f565b34801561067757600080fd5b506103a06106863660046152e2565b611208565b34801561069757600080fd5b506103a06106a63660046153c5565b6112af565b3480156106b757600080fd5b506103bd611354565b3480156106cc57600080fd5b506103bd6106db3660046153a8565b60056020526000908152604090205481565b3480156106f957600080fd5b506103a06107083660046152e2565b611407565b34801561071957600080fd5b506103a06107283660046152b6565b611472565b34801561073957600080fd5b506103bd600b5481565b34801561074f57600080fd5b506105dd6114ff565b34801561076457600080fd5b506012546105dd906001600160a01b031681565b34801561078457600080fd5b506103a06107933660046153a8565b61150e565b3480156107a457600080fd5b506103e56115a6565b3480156107b957600080fd5b506103a06107c83660046152e2565b6115b3565b3480156107d957600080fd5b506103a06107e83660046153a8565b61163a565b3480156107f957600080fd5b506103bd7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b34801561082d57600080fd5b506103a061083c3660046153a8565b611796565b34801561084d57600080fd5b506103a061085c3660046152e2565b61194d565b34801561086d57600080fd5b5061041261087c3660046152b6565b6119d4565b34801561088d57600080fd5b506103a06119e1565b3480156108a257600080fd5b50600a546104129060ff1681565b3480156108bc57600080fd5b506103a06108cb3660046152e2565b611a55565b3480156108dc57600080fd5b506103bd611a62565b3480156108f157600080fd5b506103bd60095481565b34801561090757600080fd5b506008546105dd906001600160a01b031681565b34801561092757600080fd5b506103bd611aa1565b34801561093c57600080fd5b506103a061094b3660046153a8565b611df6565b34801561095c57600080fd5b506105dd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561099057600080fd5b506103a061099f3660046153a8565b611e89565b3480156109b057600080fd5b506103a06109bf3660046153fe565b611f21565b3480156109d057600080fd5b506103a06109df36600461546c565b612026565b3480156109f057600080fd5b506007546105dd906001600160a01b031681565b348015610a1057600080fd5b506103bd61217f565b348015610a2557600080fd5b506103bd610a343660046153c5565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b348015610a6b57600080fd5b506103bd610a7a3660046152e2565b612252565b348015610a8b57600080fd5b506103bd600f5481565b348015610aa157600080fd5b506105dd610ab03660046152e2565b612298565b348015610ac157600080fd5b506103bd610ad03660046152e2565b6122c2565b348015610ae157600080fd5b506103bd6122f8565b348015610af657600080fd5b506103a0610b053660046153a8565b612398565b348015610b1657600080fd5b50600e546105dd906001600160a01b031681565b348015610b3657600080fd5b506105dd7f000000000000000000000000000000000000000000000000000000000000000081565b348015610b6a57600080fd5b506103a0612488565b60008054610b8090615498565b80601f0160208091040260200160405190810160405280929190818152602001828054610bac90615498565b8015610bf95780601f10610bce57610100808354040283529160200191610bf9565b820191906000526020600020905b815481529060010190602001808311610bdc57829003601f168201915b505050505081565b6000610c0e3384846124da565b50600192915050565b6000610c22826125e8565b92915050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610c6257506000198114155b15610cd8576000610c7385836154e8565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610ce3868686612602565b6001925050505b9392505050565b610cf961270b565b6000610d04826122c2565b905060008111610d645760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a3a576974686472617720616d6f756e7420746f6044820152646f206c6f7760d81b6064820152608401610397565b6000610d6f82612784565b90506000610d7c836125e8565b9050610dbd33610d8c83856154e8565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906127a7565b610dc733856127fd565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610e0c828261287f565b5050565b60405163d505accf60e01b8152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610e9c57600080fd5b505af1158015610eb0573d6000803e3d6000fd5b50505050610ebe338661287f565b5050505050565b33610ece6114ff565b6001600160a01b031614610ef45760405162461bcd60e51b8152600401610397906154ff565b600a5460ff1615610f0457600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a1565b33610f536114ff565b6001600160a01b031614610f795760405162461bcd60e51b8152600401610397906154ff565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610fc8903090600401615394565b602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190615534565b9050611013612a54565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611062903090600401615394565b602060405180830381865afa15801561107f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a39190615534565b9050826110b083836154e8565b101561112f5760405162461bcd60e51b815260206004820152604260248201527f4261736553747261746567793a3a456d657267656e637920776974686472617760448201527f206d696e696d756d2072657475726e20616d6f756e74206e6f74207265616368606482015261195960f21b608482015260a401610397565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611158611354565b6002546040805192835260208301919091520160405180910390a1600a5460ff16151560010361118a5761118a6119e1565b505050565b336111986114ff565b6001600160a01b0316146111be5760405162461bcd60e51b8152600401610397906154ff565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b336112116114ff565b6001600160a01b0316146112375760405162461bcd60e51b8152600401610397906154ff565b6000811161124457600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611271573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa286000826040516112a492919061554d565b60405180910390a150565b6007546001600160a01b031633146112d95760405162461bcd60e51b815260040161039790615566565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b39061130890849060009060040161554d565b6020604051808303816000875af1158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906155a4565b610e0c57600080fd5b6012546040516361bfb47160e11b81526000918291829182916001600160a01b039091169063c37f68e29061138d903090600401615394565b608060405180830381865afa1580156113aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ce91906155bf565b9350935093505081670de0b6b3a764000082856113eb91906155f5565b6113f59190615614565b6113ff91906154e8565b935050505090565b6007546001600160a01b031633146114315760405162461bcd60e51b815260040161039790615566565b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b3361147b6114ff565b6001600160a01b0316146114a15760405162461bcd60e51b8152600401610397906154ff565b600081116114ae57600080fd5b6114c26001600160a01b03831633836127a7565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516114f392919061554d565b60405180910390a15050565b6006546001600160a01b031690565b336115176114ff565b6001600160a01b03161461153d5760405162461bcd60e51b8152600401610397906154ff565b6007546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009161157c916001600160a01b03909116908490615636565b60405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610b8090615498565b6007546001600160a01b031633146115dd5760405162461bcd60e51b815260040161039790615566565b612710600b54826115ee9190615650565b11156115f957600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b031633146116645760405162461bcd60e51b815260040161039790615566565b6000805b600d548110156116bb57600d818154811061168557611685615668565b6000918252602090912001546001600160a01b03908116908416036116a957600191505b806116b38161567e565b915050611668565b50801561171b5760405162461bcd60e51b815260206004820152602860248201527f4261736553747261746567793a3a52657761726420616c726561647920636f6e604482015267666967757265642160c01b6064820152608401610397565b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384161790556040517f1714865bf5baa84e3439536a013c87cfe030b4cd69f344a5f2a4877de3d517ce906114f3908490615394565b6007546001600160a01b031633146117c05760405162461bcd60e51b815260040161039790615566565b6000805b600d5481101561189057600d81815481106117e1576117e1615668565b6000918252602090912001546001600160a01b039081169084160361187e57600d8054600193506118139084906154e8565b8154811061182357611823615668565b600091825260209091200154600d80546001600160a01b03909216918390811061184f5761184f615668565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806118888161567e565b9150506117c4565b50806118ea5760405162461bcd60e51b8152602060048201526024808201527f4261736553747261746567793a3a526577617264206e6f7420636f6e666967756044820152637265642160e01b6064820152608401610397565b600d8054806118fb576118fb615697565b600082815260209020810160001990810180546001600160a01b03191690550190556040517f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906114f3908490615394565b6007546001600160a01b031633146119775760405162461bcd60e51b815260040161039790615566565b612710600c54826119889190615650565b111561199357600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b6000610c0e338484612602565b6007546001600160a01b03163314611a0b5760405162461bcd60e51b815260040161039790615566565b600a5460ff16611a1a57600080fd5b600a805460ff19169055604051600081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590602001610f40565b611a5f338261287f565b50565b600080611a6d611aa1565b90506009548110611a9957612710600b5482611a8991906155f5565b611a939190615614565b91505090565b600091505090565b600080611aac612c2c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611afc9190615394565b602060405180830381865afa158015611b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3d9190615534565b905060005b8251811015611def576000838281518110611b5f57611b5f615668565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611bd55747848381518110611bb957611bb9615668565b6020026020010151602001818151611bd19190615650565b9052505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611c3e57838281518110611c2057611c20615668565b60200260200101516020015183611c379190615650565b9250611ddc565b6001600160a01b03811615611ddc576040516370a0823160e01b81526000906001600160a01b038316906370a0823190611c7c903090600401615394565b602060405180830381865afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd9190615534565b90506000858481518110611cd357611cd3615668565b60200260200101516020015182611cea9190615650565b90508015611dd957600e546040516377ccc49d60e11b81526000916001600160a01b03169063ef99893a90611d4790859088907f0000000000000000000000000000000000000000000000000000000000000000906004016156ad565b600060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d8c91908101906157d4565b9050600181600001515111611da2576000611dcb565b80518051611db2906001906154e8565b81518110611dc257611dc2615668565b60200260200101515b611dd59087615650565b9550505b50505b5080611de78161567e565b915050611b42565b5092915050565b6007546001600160a01b03163314611e205760405162461bcd60e51b815260040161039790615566565b600e546040517f2c6fb4d5ff9fad6ecf2e09cd64cbc9aad92a8b9d2cc0e5c3ddef9b529b0b5ffd91611e5f916001600160a01b03909116908490615636565b60405180910390a1600e80546001600160a01b0319166001600160a01b0392909216919091179055565b33611e926114ff565b6001600160a01b031614611eb85760405162461bcd60e51b8152600401610397906154ff565b6008546040517fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab74106391611ef7916001600160a01b03909116908490615636565b60405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b42841015611f635760405162461bcd60e51b815260206004820152600f60248201526e1c195c9b5a5d0e8e995e1c1a5c9959608a1b6044820152606401610397565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611fb08361567e565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506120118882868686612d54565b61201c8888886124da565b5050505050505050565b6007546001600160a01b031633146120505760405162461bcd60e51b815260040161039790615566565b612064838383600f92909255601055601455565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90612095903090600401615394565b6020604051808303816000875af11580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d89190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e6699061210e903090600401615394565b6020604051808303816000875af115801561212d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121519190615534565b905061216561216083836154e8565b612e80565b600061217183836154e8565b1115610ebe57610ebe6133cb565b6012546040516361bfb47160e11b81526000918291829182916001600160a01b039091169063c37f68e2906121b8903090600401615394565b608060405180830381865afa1580156121d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f991906155bf565b935093509350506000670de0b6b3a7640000828561221791906155f5565b6122219190615614565b905061222d83826154e8565b61223f82670de0b6b3a76400006155f5565b6122499190615614565b94505050505090565b60008061225d611354565b60025490915080158061226e575081155b1561227b57509192915050565b8161228682866155f5565b6122909190615614565b949350505050565b600d81815481106122a857600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806122cd611354565b6002549091508015806122de575081155b156122ed575060009392505050565b8061228683866155f5565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161232d91906158e9565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b336123a16114ff565b6001600160a01b0316146123c75760405162461bcd60e51b8152600401610397906154ff565b6001600160a01b03811661242c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610397565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146124ce5760405162461bcd60e51b815260206004820152601460248201527359616b53747261746567793a3a6f6e6c79454f4160601b6044820152606401610397565b6124d860006137e4565b565b6001600160a01b0383166125305760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610397565b6001600160a01b0382166125865760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610397565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000806127106125f882856155f5565b610cea9190615614565b6001600160a01b0382166126755760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527320746f20746865207a65726f206164647265737360601b6064820152608401610397565b6001600160a01b0383166000908152600460205260409020546126999082906154e8565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546126c9908290615650565b6001600160a01b038084166000818152600460205260409081902093909355915190851690600080516020615b5c833981519152906125db9085815260200190565b601260009054906101000a90046001600160a01b03166001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612760573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5f9190615534565b600061278f82612e80565b61279882613944565b90506127a26133cb565b919050565b61118a8363a9059cbb60e01b84846040516024016127c692919061554d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613a14565b6001600160a01b0382166000908152600460205260409020546128219082906154e8565b6001600160a01b0383166000908152600460205260409020556002546128489082906154e8565b6002556040518181526000906001600160a01b03841690600080516020615b5c833981519152906020015b60405180910390a35050565b600a5460ff1615156001146128d65760405162461bcd60e51b815260206004820152601f60248201527f4261736553747261746567793a3a4465706f736974732064697361626c6564006044820152606401610397565b6128de61270b565b6128e860016137e4565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561295b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297f91906155a4565b6129df5760405162461bcd60e51b815260206004820152602b60248201527f4261736553747261746567793a3a4465706f73697420746f6b656e207472616e60448201526a1cd9995c8819985a5b195960aa1b6064820152608401610397565b60006129ea826125e8565b9050612a02836129fd610a7a84866154e8565b613ae6565b612a0c8282613b9f565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051612a4791815260200190565b60405180910390a2505050565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90612a85903090600401615394565b6020604051808303816000875af1158015612aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac89190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e66990612afe903090600401615394565b6020604051808303816000875af1158015612b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b419190615534565b9050612b5061216083836154e8565b601254604051633af9e66960e01b81526001600160a01b039091169063852a12e3908290633af9e66990612b88903090600401615394565b6020604051808303816000875af1158015612ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcb9190615534565b6040518263ffffffff1660e01b8152600401612be991815260200190565b6020604051808303816000875af1158015612c08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a9190615534565b604080516002808252606082810190935260009190816020015b6040805180820190915260008082526020820152815260200190600190039081612c4657505060408051808201909152738729438eb15e2c8b576fcc6aecda6a148776c0f5815260115460125492935090916020830191612cb6916001600160a01b039182169116600030613c04565b81525081600081518110612ccc57612ccc615668565b602090810291909101810191909152604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682526011546012549293840192612d2e929182169116600130613c04565b81525081600181518110612d4457612d44615668565b6020908102919091010152919050565b6000612d5e6122f8565b60405161190160f01b602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612de9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612e1f5750866001600160a01b0316816001600160a01b0316145b612e775760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e616044820152637475726560e01b6064820152608401610397565b50505050505050565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90612eb1903090600401615394565b6020604051808303816000875af1158015612ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef49190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e66990612f2a903090600401615394565b6020604051808303816000875af1158015612f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6d9190615534565b9050600083612f7c84846154e8565b612f8691906154e8565b601054600f5486612f9787876154e8565b612fa191906154e8565b612fab91906155f5565b612fb59190615614565b612fbf91906154e8565b90506000612fcd82856154e8565b9050600080612fda613cae565b60125460405163095ea7b360e01b81529294509092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b3926130329216908a9060040161554d565b6020604051808303816000875af1158015613051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307591906155a4565b505b821561333257600061308b86888585613d3b565b9050838111156130985750825b60125460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e3906024016020604051808303816000875af11580156130e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131079190615534565b1561315e5760405162461bcd60e51b815260206004820152602160248201527f42656e7169537472617465677956343a3a6661696c656420746f2072656465656044820152606d60f81b6064820152608401610397565b60125460405163073a938160e11b8152600481018390526001600160a01b0390911690630e752702906024016020604051808303816000875af11580156131a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cd9190615534565b1561322a5760405162461bcd60e51b815260206004820152602760248201527f42656e7169537472617465677956343a3a6661696c656420746f20726570617960448201526620626f72726f7760c81b6064820152608401610397565b601254604051633af9e66960e01b81526001600160a01b0390911690633af9e6699061325a903090600401615394565b6020604051808303816000875af1158015613279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329d9190615534565b6012546040516305eff7ef60e21b81529197506001600160a01b0316906317bfdfbc906132ce903090600401615394565b6020604051808303816000875af11580156132ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133119190615534565b96508685106133205750613332565b61332a85886154e8565b935050613077565b60125460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b39261338892919091169060009060040161554d565b6020604051808303816000875af11580156133a7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201c91906155a4565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc906133fc903090600401615394565b6020604051808303816000875af115801561341b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343f9190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e66990613475903090600401615394565b6020604051808303816000875af1158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190615534565b90506000806134c5613cae565b9150915060008390506000601054600f5487876134e291906154e8565b6134ec91906155f5565b6134f69190615614565b60125460405163095ea7b360e01b815291925087916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b392613550929190911690869060040161554d565b6020604051808303816000875af115801561356f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359391906155a4565b505b818310156133325760006135ab84838888613d81565b9050826135b88286615650565b11156135cb576135c884846154e8565b90505b6013548110156135db5750613332565b60125460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec906024016020604051808303816000875af1158015613626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364a9190615534565b156136a15760405162461bcd60e51b815260206004820152602160248201527f42656e7169537472617465677956343a3a626f72726f77696e67206661696c656044820152601960fa1b6064820152608401610397565b60125460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d68906024016020604051808303816000875af11580156136ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137109190615534565b1561375d5760405162461bcd60e51b815260206004820152601f60248201527f42656e7169537472617465677956343a3a6c656e64696e67206661696c6564006044820152606401610397565b601254604051633af9e66960e01b81526001600160a01b0390911690633af9e6699061378d903090600401615394565b6020604051808303816000875af11580156137ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d09190615534565b93506137dc8183615650565b915050613595565b60006137ee613da3565b9050600954811115613903576000612710600c548361380d91906155f5565b6138179190615614565b9050801561385957600854613859906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836127a7565b60008361388057612710600b548461387191906155f5565b61387b9190615614565b613883565b60005b905080156138bf576138bf6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836127a7565b60006138de826138cf85876154e8565b6138d991906154e8565b614117565b905080156138ff5760006138f1826125e8565b90506138fd8282613b9f565b505b5050505b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461392c611354565b600254604080519283526020830191909152016114f3565b60125460405163852a12e360e01b8152600481018390526000916001600160a01b03169063852a12e3906024016020604051808303816000875af1158015613990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b49190615534565b15613a105760405162461bcd60e51b815260206004820152602660248201527f42656e71694c656e64696e6753747261746567793a3a6661696c656420746f2060448201526572656465656d60d01b6064820152608401610397565b5090565b6000613a69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661423b9092919063ffffffff16565b80519091501561118a5780806020019051810190613a8791906155a4565b61118a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610397565b60008111613b2b5760405162461bcd60e51b81526020600482015260126024820152715f6d696e743a3a7a65726f2073686172657360701b6044820152606401610397565b80600254613b399190615650565b6002556001600160a01b038216600090815260046020526040902054613b60908290615650565b6001600160a01b038316600081815260046020526040808220939093559151909190600080516020615b5c833981519152906128739085815260200190565b60008211613bfa5760405162461bcd60e51b815260206004820152602260248201527f4261736553747261746567793a3a5374616b6520616d6f756e7420746f6f206c6044820152616f7760f01b6064820152608401610397565b610e0c828261424a565b600080856001600160a01b03166305b9783d85856040518363ffffffff1660e01b8152600401613c35929190615984565b602060405180830381865afa158015613c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c769190615534565b9050613c848686868661425b565b613c908787878761442c565b613c9a9083615650565b613ca49190615650565b9695505050505050565b601154601254604051638e8f294b60e01b8152600092839283926001600160a01b0392831692638e8f294b92613ce992911690600401615394565b6040805180830381865afa158015613d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d2991906159a0565b94670de0b6b3a7640000945092505050565b6000601054601454848487613d5091906155f5565b613d5a9190615614565b613d6490886154e8565b613d6e91906155f5565b613d789190615614565b95945050505050565b60008382613d8f85886155f5565b613d999190615614565b613d7891906154e8565b6000613dad6145a4565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613dfc903090600401615394565b602060405180830381865afa158015613e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3d9190615534565b600d5490915060005b8181101561410f576000600d8281548110613e6357613e63615668565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613f8e57478015613f20577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613f0657600080fd5b505af1158015613f1a573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613f8c57613f838186615650565b945050506140fd565b505b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190613fbd903090600401615394565b602060405180830381865afa158015613fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ffe9190615534565b905060008111801561404257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b156140fa57600e546040516377ccc49d60e11b81526000916001600160a01b03169063ef99893a9061409c90859087907f0000000000000000000000000000000000000000000000000000000000000000906004016156ad565b600060405180830381865afa1580156140b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140e191908101906157d4565b90506140ec816146bd565b6140f69087615650565b9550505b50505b806141078161567e565b915050613e46565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603614176575090565b600e546040516377ccc49d60e11b81526000916001600160a01b03169063ef99893a906141eb9086907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000906004016156ad565b600060405180830381865afa158015614208573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261423091908101906157d4565b9050610cea816146bd565b6060612290848460008561483d565b6142538261496e565b610e0c6133cb565b604080516020810191829052637937969d60e01b9091526000908190806001600160a01b038816637937969d614296888a89602487016159cc565b602060405180830381865afa1580156142b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d79190615534565b9052805160009350909150156144235760006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143569190615534565b8152509050600060405180602001604052806143748a8a8a87614acf565b6001600160e01b031690528051909150156144205760006143958285614d0c565b9050600061440f896001600160a01b03166395dd9193306040518263ffffffff1660e01b81526004016143c89190615394565b602060405180830381865afa1580156143e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144099190615534565b85614d41565b905061441b8183614d5f565b955050505b50505b50949350505050565b6000806040518060200160405280614445888888614d7e565b6001600160e01b0316905260408051602081019182905263111d2e5760e31b909152909150600090806001600160a01b0389166388e972b861448c898b8a602487016159cc565b602060405180830381865afa1580156144a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cd9190615534565b905280519091501580156144e15750815115155b156144f8576a0c097ce7bc90715b34b9f160241b81525b81516000906145165760405180602001604052806000815250614520565b6145208383614d0c565b9050614598876001600160a01b03166370a08231876040518263ffffffff1660e01b81526004016145519190615394565b602060405180830381865afa15801561456e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145929190615534565b82614d5f565b98975050505050505050565b60408051600180825281830190925260009160208083019080368337505060125482519293506001600160a01b0316918391506000906145e6576145e6615668565b6001600160a01b039283166020918202929092010152601154604051633a22995760e11b815291169063744532ae906146289060009030908690600401615a34565b600060405180830381600087803b15801561464257600080fd5b505af1158015614656573d6000803e3d6000fd5b5050601154604051633a22995760e11b81526001600160a01b03909116925063744532ae915061468f9060019030908690600401615a34565b600060405180830381600087803b1580156146a957600080fd5b505af1158015610ebe573d6000803e3d6000fd5b805151600090158015906146fa575081518051600091906146e0906001906154e8565b815181106146f0576146f0615668565b6020026020010151115b1561483557816040015160008151811061471657614716615668565b60200260200101516001600160a01b031663095ea7b3600e60009054906101000a90046001600160a01b0316846000015160008151811061475957614759615668565b60200260200101516040518363ffffffff1660e01b815260040161477e92919061554d565b6020604051808303816000875af115801561479d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147c191906155a4565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b246616906147f2908590600401615a61565b6020604051808303816000875af1158015614811573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c229190615534565b506000919050565b60608247101561489e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610397565b6001600160a01b0385163b6148f55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610397565b600080866001600160a01b031685876040516149119190615afb565b60006040518083038185875af1925050503d806000811461494e576040519150601f19603f3d011682016040523d82523d6000602084013e614953565b606091505b5091509150614963828286614fb1565b979650505050505050565b60125460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b3926149c3929190911690859060040161554d565b6020604051808303816000875af11580156149e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0691906155a4565b5060125460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d68906024016020604051808303816000875af1158015614a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a769190615534565b15611a5f5760405162461bcd60e51b8152602060048201526024808201527f42656e71694c656e64696e6753747261746567793a3a4465706f7369742066616044820152631a5b195960e21b6064820152608401610397565b6000806000866001600160a01b0316634b3a0a7486886040518363ffffffff1660e01b8152600401614b02929190615984565b6040805180830381865afa158015614b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b429190615b17565b63ffffffff16915091506000876001600160a01b031663c376fada87896040518363ffffffff1660e01b8152600401614b7c929190615984565b602060405180830381865afa158015614b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bbd9190615534565b90506000614bcb4284614fea565b9050600081118015614bdd5750600082115b15614cfd576000614c4f896001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015614c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c499190615534565b88614d41565b90506000614c5d8385615024565b90506000808311614c7d5760405180602001604052806000815250614c87565b614c878284615060565b90506000614cac60405180602001604052808a6001600160e01b03168152508361509b565b9050614cee81600001516040518060400160405280601a8152602001796e657720696e646578206578636565647320323234206269747360301b8152506150c7565b98505050505050505050612290565b50600098975050505050505050565b6040805160208101909152600081526040518060200160405280614d3885600001518560000151614fea565b90529392505050565b6000610cea614d5884670de0b6b3a7640000615024565b83516150f6565b60006a0c097ce7bc90715b34b9f160241b6125f8848460000151615024565b6000806000856001600160a01b031663d81c5e4585876040518363ffffffff1660e01b8152600401614db1929190615984565b6040805180830381865afa158015614dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614df19190615b17565b63ffffffff16915091506000866001600160a01b031663cf9cfb6186886040518363ffffffff1660e01b8152600401614e2b929190615984565b602060405180830381865afa158015614e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e6c9190615534565b90506000614e7a4284614fea565b9050600081118015614e8c5750600082115b15614fa3576000876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ef59190615534565b90506000614f038385615024565b90506000808311614f235760405180602001604052806000815250614f2d565b614f2d8284615060565b90506000614f5260405180602001604052808a6001600160e01b03168152508361509b565b9050614f9481600001516040518060400160405280601a8152602001796e657720696e646578206578636565647320323234206269747360301b8152506150c7565b98505050505050505050610cea565b506000979650505050505050565b60608315614fc0575081610cea565b825115614fd05782518084602001fd5b8160405162461bcd60e51b8152600401610397919061526e565b6000610cea8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250615129565b6000610cea8383604051806040016040528060178152602001766d756c7469706c69636174696f6e206f766572666c6f7760481b815250615158565b6040805160208101909152600081526040518060200160405280614d38615095866a0c097ce7bc90715b34b9f160241b615024565b856150f6565b6040805160208101909152600081526040518060200160405280614d38856000015185600001516151ab565b600081600160e01b84106150ee5760405162461bcd60e51b8152600401610397919061526e565b509192915050565b6000610cea83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b8152506151e1565b6000818484111561514d5760405162461bcd60e51b8152600401610397919061526e565b5061229083856154e8565b6000831580615165575082155b1561517257506000610cea565b600061517e84866155f5565b90508361518b8683615614565b1483906144235760405162461bcd60e51b8152600401610397919061526e565b6000610cea8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b81525061520d565b600081836152025760405162461bcd60e51b8152600401610397919061526e565b506122908385615614565b60008061521a8486615650565b905082858210156144235760405162461bcd60e51b8152600401610397919061526e565b60005b83811015615259578181015183820152602001615241565b83811115615268576000848401525b50505050565b602081526000825180602084015261528d81604085016020870161523e565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611a5f57600080fd5b600080604083850312156152c957600080fd5b82356152d4816152a1565b946020939093013593505050565b6000602082840312156152f457600080fd5b5035919050565b60008060006060848603121561531057600080fd5b833561531b816152a1565b9250602084013561532b816152a1565b929592945050506040919091013590565b803560ff811681146127a257600080fd5b600080600080600060a0868803121561536557600080fd5b853594506020860135935061537c6040870161533c565b94979396509394606081013594506080013592915050565b6001600160a01b0391909116815260200190565b6000602082840312156153ba57600080fd5b8135610cea816152a1565b600080604083850312156153d857600080fd5b82356153e3816152a1565b915060208301356153f3816152a1565b809150509250929050565b600080600080600080600060e0888a03121561541957600080fd5b8735615424816152a1565b96506020880135615434816152a1565b955060408801359450606088013593506154506080890161533c565b925060a0880135915060c0880135905092959891949750929550565b60008060006060848603121561548157600080fd5b505081359360208301359350604090920135919050565b600181811c908216806154ac57607f821691505b6020821081036154cc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156154fa576154fa6154d2565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561554657600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6020808252601490820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b604082015260600190565b805180151581146127a257600080fd5b6000602082840312156155b657600080fd5b610cea82615594565b600080600080608085870312156155d557600080fd5b505082516020840151604085015160609095015191969095509092509050565b600081600019048311821515161561560f5761560f6154d2565b500290565b60008261563157634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0392831681529116602082015260400190565b60008219821115615663576156636154d2565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201615690576156906154d2565b5060010190565b634e487b7160e01b600052603160045260246000fd5b9283526001600160a01b03918216602084015216604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715615705576157056156cc565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715615734576157346156cc565b604052919050565b600067ffffffffffffffff821115615756576157566156cc565b5060051b60200190565b600082601f83011261577157600080fd5b815160206157866157818361573c565b61570b565b82815260059290921b840181019181810190868411156157a557600080fd5b8286015b848110156157c95780516157bc816152a1565b83529183019183016157a9565b509695505050505050565b600060208083850312156157e757600080fd5b825167ffffffffffffffff808211156157ff57600080fd5b908401906080828703121561581357600080fd5b61581b6156e2565b82518281111561582a57600080fd5b8301601f8101881361583b57600080fd5b80516158496157818261573c565b81815260059190911b8201860190868101908a83111561586857600080fd5b928701925b828410156158865783518252928701929087019061586d565b8452505050828401518281111561589c57600080fd5b6158a888828601615760565b858301525060408301519350818411156158c157600080fd5b6158cd87858501615760565b6040820152606083015160608201528094505050505092915050565b600080835481600182811c91508083168061590557607f831692505b6020808410820361592457634e487b7160e01b86526022600452602486fd5b818015615938576001811461594957615976565b60ff19861689528489019650615976565b60008a81526020902060005b8681101561596e5781548b820152908501908301615955565b505084890196505b509498975050505050505050565b60ff9290921682526001600160a01b0316602082015260400190565b600080604083850312156159b357600080fd5b6159bc83615594565b9150602083015190509250929050565b60ff9390931683526001600160a01b03918216602084015216604082015260600190565b600081518084526020808501945080840160005b83811015615a295781516001600160a01b031687529582019590820190600101615a04565b509495945050505050565b60ff841681526001600160a01b0383166020820152606060408201819052600090613d78908301846159f0565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015615aa65783518252928401926001929092019190840190615a86565b50838701519350601f19925082868203016040870152615ac681856159f0565b93505050604085015181858403016060860152615ae383826159f0565b92505050606084015160808401528091505092915050565b60008251615b0d81846020870161523e565b9190910192915050565b60008060408385031215615b2a57600080fd5b82516001600160e01b0381168114615b4157600080fd5b602084015190925063ffffffff811681146153f357600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f5548b27f6b5860507c8fbc1e8fd6e30d8092f361512a4fa80e35d0622407d8d64736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x60806040526004361061033c5760003560e01c80639291d563116101b2578063c89039c5116100ed578063e592c5fa11610090578063e592c5fa14610a7f578063e75ab04514610a95578063eab89a5a14610ab5578063ed24911d14610ad5578063f2fde38b14610aea578063f6314d0714610b0a578063f7c618c114610b2a578063fdb5a03e14610b5e57600080fd5b8063c89039c514610950578063d2c35ce814610984578063d505accf146109a4578063d6ec2a49146109c4578063da09c72c146109e4578063db8dd95c14610a04578063dd62ed3e14610a19578063dd8ce4d614610a5f57600080fd5b8063ac67e1af11610155578063ac67e1af14610881578063b52a321f14610896578063b6b55f25146108b0578063b9e57b80146108d0578063bd079f55146108e5578063c415b95c146108fb578063c4b24a461461091b578063c851cc321461093057600080fd5b80639291d5631461077857806395d89b411461079857806399729ec1146107ad5780639c9b2e21146107cd5780639e4e7318146107ed578063a4d5e67c14610821578063a8ae2b7c14610841578063a9059cbb1461086157600080fd5b80635e4c57a4116102825780637ae26773116102255780637ae267731461068b5780637d882097146106ab5780637ecebe00146106c057806381837230146106ed5780638980f11f1461070d5780638aff733d1461072d5780638da5cb5b14610743578063912770661461075857600080fd5b80635e4c57a4146105925780635ea682ea146105a75780635fe3b567146105bd57806362ac20a5146105ea578063666d25b91461060057806370a0823114610620578063715018a6146106565780637897e7f61461066b57600080fd5b806323b872dd116102ea57806323b872dd146104a2578063247d284b14610422578063258250da146104c25780632e1a7d4d146104d75780632f4f21e2146104f757806330adf81f14610517578063313ce5671461054b5780634a970be71461057257600080fd5b8063065195cd146103a757806306fdde03146103d0578063095ea7b3146103f2578063110560351461042257806318160ddd146104425780631f15d71a1461045857806320606b701461046e57600080fd5b366103a2576011546001600160a01b031633146103a05760405162461bcd60e51b815260206004820152601c60248201527f42656e7169537472617465677956343a3a4e6f7420616c6c6f7765640000000060448201526064015b60405180910390fd5b005b600080fd5b3480156103b357600080fd5b506103bd60145481565b6040519081526020015b60405180910390f35b3480156103dc57600080fd5b506103e5610b73565b6040516103c7919061526e565b3480156103fe57600080fd5b5061041261040d3660046152b6565b610c01565b60405190151581526020016103c7565b34801561042e57600080fd5b506103bd61043d3660046152e2565b610c17565b34801561044e57600080fd5b506103bd60025481565b34801561046457600080fd5b506103bd60105481565b34801561047a57600080fd5b506103bd7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b3480156104ae57600080fd5b506104126104bd3660046152fb565b610c28565b3480156104ce57600080fd5b50600d546103bd565b3480156104e357600080fd5b506103a06104f23660046152e2565b610cf1565b34801561050357600080fd5b506103a06105123660046152b6565b610e02565b34801561052357600080fd5b506103bd7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b34801561055757600080fd5b50610560601281565b60405160ff90911681526020016103c7565b34801561057e57600080fd5b506103a061058d36600461534d565b610e10565b34801561059e57600080fd5b506103a0610ec5565b3480156105b357600080fd5b506103bd600c5481565b3480156105c957600080fd5b506011546105dd906001600160a01b031681565b6040516103c79190615394565b3480156105f657600080fd5b506103bd60135481565b34801561060c57600080fd5b506103a061061b3660046152e2565b610f4a565b34801561062c57600080fd5b506103bd61063b3660046153a8565b6001600160a01b031660009081526004602052604090205490565b34801561066257600080fd5b506103a061118f565b34801561067757600080fd5b506103a06106863660046152e2565b611208565b34801561069757600080fd5b506103a06106a63660046153c5565b6112af565b3480156106b757600080fd5b506103bd611354565b3480156106cc57600080fd5b506103bd6106db3660046153a8565b60056020526000908152604090205481565b3480156106f957600080fd5b506103a06107083660046152e2565b611407565b34801561071957600080fd5b506103a06107283660046152b6565b611472565b34801561073957600080fd5b506103bd600b5481565b34801561074f57600080fd5b506105dd6114ff565b34801561076457600080fd5b506012546105dd906001600160a01b031681565b34801561078457600080fd5b506103a06107933660046153a8565b61150e565b3480156107a457600080fd5b506103e56115a6565b3480156107b957600080fd5b506103a06107c83660046152e2565b6115b3565b3480156107d957600080fd5b506103a06107e83660046153a8565b61163a565b3480156107f957600080fd5b506103bd7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b34801561082d57600080fd5b506103a061083c3660046153a8565b611796565b34801561084d57600080fd5b506103a061085c3660046152e2565b61194d565b34801561086d57600080fd5b5061041261087c3660046152b6565b6119d4565b34801561088d57600080fd5b506103a06119e1565b3480156108a257600080fd5b50600a546104129060ff1681565b3480156108bc57600080fd5b506103a06108cb3660046152e2565b611a55565b3480156108dc57600080fd5b506103bd611a62565b3480156108f157600080fd5b506103bd60095481565b34801561090757600080fd5b506008546105dd906001600160a01b031681565b34801561092757600080fd5b506103bd611aa1565b34801561093c57600080fd5b506103a061094b3660046153a8565b611df6565b34801561095c57600080fd5b506105dd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561099057600080fd5b506103a061099f3660046153a8565b611e89565b3480156109b057600080fd5b506103a06109bf3660046153fe565b611f21565b3480156109d057600080fd5b506103a06109df36600461546c565b612026565b3480156109f057600080fd5b506007546105dd906001600160a01b031681565b348015610a1057600080fd5b506103bd61217f565b348015610a2557600080fd5b506103bd610a343660046153c5565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b348015610a6b57600080fd5b506103bd610a7a3660046152e2565b612252565b348015610a8b57600080fd5b506103bd600f5481565b348015610aa157600080fd5b506105dd610ab03660046152e2565b612298565b348015610ac157600080fd5b506103bd610ad03660046152e2565b6122c2565b348015610ae157600080fd5b506103bd6122f8565b348015610af657600080fd5b506103a0610b053660046153a8565b612398565b348015610b1657600080fd5b50600e546105dd906001600160a01b031681565b348015610b3657600080fd5b506105dd7f000000000000000000000000000000000000000000000000000000000000000081565b348015610b6a57600080fd5b506103a0612488565b60008054610b8090615498565b80601f0160208091040260200160405190810160405280929190818152602001828054610bac90615498565b8015610bf95780601f10610bce57610100808354040283529160200191610bf9565b820191906000526020600020905b815481529060010190602001808311610bdc57829003601f168201915b505050505081565b6000610c0e3384846124da565b50600192915050565b6000610c22826125e8565b92915050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610c6257506000198114155b15610cd8576000610c7385836154e8565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610ce3868686612602565b6001925050505b9392505050565b610cf961270b565b6000610d04826122c2565b905060008111610d645760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a3a576974686472617720616d6f756e7420746f6044820152646f206c6f7760d81b6064820152608401610397565b6000610d6f82612784565b90506000610d7c836125e8565b9050610dbd33610d8c83856154e8565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906127a7565b610dc733856127fd565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610e0c828261287f565b5050565b60405163d505accf60e01b8152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610e9c57600080fd5b505af1158015610eb0573d6000803e3d6000fd5b50505050610ebe338661287f565b5050505050565b33610ece6114ff565b6001600160a01b031614610ef45760405162461bcd60e51b8152600401610397906154ff565b600a5460ff1615610f0457600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a1565b33610f536114ff565b6001600160a01b031614610f795760405162461bcd60e51b8152600401610397906154ff565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610fc8903090600401615394565b602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190615534565b9050611013612a54565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611062903090600401615394565b602060405180830381865afa15801561107f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a39190615534565b9050826110b083836154e8565b101561112f5760405162461bcd60e51b815260206004820152604260248201527f4261736553747261746567793a3a456d657267656e637920776974686472617760448201527f206d696e696d756d2072657475726e20616d6f756e74206e6f74207265616368606482015261195960f21b608482015260a401610397565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611158611354565b6002546040805192835260208301919091520160405180910390a1600a5460ff16151560010361118a5761118a6119e1565b505050565b336111986114ff565b6001600160a01b0316146111be5760405162461bcd60e51b8152600401610397906154ff565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b336112116114ff565b6001600160a01b0316146112375760405162461bcd60e51b8152600401610397906154ff565b6000811161124457600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611271573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa286000826040516112a492919061554d565b60405180910390a150565b6007546001600160a01b031633146112d95760405162461bcd60e51b815260040161039790615566565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b39061130890849060009060040161554d565b6020604051808303816000875af1158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906155a4565b610e0c57600080fd5b6012546040516361bfb47160e11b81526000918291829182916001600160a01b039091169063c37f68e29061138d903090600401615394565b608060405180830381865afa1580156113aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ce91906155bf565b9350935093505081670de0b6b3a764000082856113eb91906155f5565b6113f59190615614565b6113ff91906154e8565b935050505090565b6007546001600160a01b031633146114315760405162461bcd60e51b815260040161039790615566565b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b3361147b6114ff565b6001600160a01b0316146114a15760405162461bcd60e51b8152600401610397906154ff565b600081116114ae57600080fd5b6114c26001600160a01b03831633836127a7565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516114f392919061554d565b60405180910390a15050565b6006546001600160a01b031690565b336115176114ff565b6001600160a01b03161461153d5760405162461bcd60e51b8152600401610397906154ff565b6007546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009161157c916001600160a01b03909116908490615636565b60405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610b8090615498565b6007546001600160a01b031633146115dd5760405162461bcd60e51b815260040161039790615566565b612710600b54826115ee9190615650565b11156115f957600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b031633146116645760405162461bcd60e51b815260040161039790615566565b6000805b600d548110156116bb57600d818154811061168557611685615668565b6000918252602090912001546001600160a01b03908116908416036116a957600191505b806116b38161567e565b915050611668565b50801561171b5760405162461bcd60e51b815260206004820152602860248201527f4261736553747261746567793a3a52657761726420616c726561647920636f6e604482015267666967757265642160c01b6064820152608401610397565b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384161790556040517f1714865bf5baa84e3439536a013c87cfe030b4cd69f344a5f2a4877de3d517ce906114f3908490615394565b6007546001600160a01b031633146117c05760405162461bcd60e51b815260040161039790615566565b6000805b600d5481101561189057600d81815481106117e1576117e1615668565b6000918252602090912001546001600160a01b039081169084160361187e57600d8054600193506118139084906154e8565b8154811061182357611823615668565b600091825260209091200154600d80546001600160a01b03909216918390811061184f5761184f615668565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806118888161567e565b9150506117c4565b50806118ea5760405162461bcd60e51b8152602060048201526024808201527f4261736553747261746567793a3a526577617264206e6f7420636f6e666967756044820152637265642160e01b6064820152608401610397565b600d8054806118fb576118fb615697565b600082815260209020810160001990810180546001600160a01b03191690550190556040517f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906114f3908490615394565b6007546001600160a01b031633146119775760405162461bcd60e51b815260040161039790615566565b612710600c54826119889190615650565b111561199357600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b6000610c0e338484612602565b6007546001600160a01b03163314611a0b5760405162461bcd60e51b815260040161039790615566565b600a5460ff16611a1a57600080fd5b600a805460ff19169055604051600081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590602001610f40565b611a5f338261287f565b50565b600080611a6d611aa1565b90506009548110611a9957612710600b5482611a8991906155f5565b611a939190615614565b91505090565b600091505090565b600080611aac612c2c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611afc9190615394565b602060405180830381865afa158015611b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3d9190615534565b905060005b8251811015611def576000838281518110611b5f57611b5f615668565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611bd55747848381518110611bb957611bb9615668565b6020026020010151602001818151611bd19190615650565b9052505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611c3e57838281518110611c2057611c20615668565b60200260200101516020015183611c379190615650565b9250611ddc565b6001600160a01b03811615611ddc576040516370a0823160e01b81526000906001600160a01b038316906370a0823190611c7c903090600401615394565b602060405180830381865afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd9190615534565b90506000858481518110611cd357611cd3615668565b60200260200101516020015182611cea9190615650565b90508015611dd957600e546040516377ccc49d60e11b81526000916001600160a01b03169063ef99893a90611d4790859088907f0000000000000000000000000000000000000000000000000000000000000000906004016156ad565b600060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d8c91908101906157d4565b9050600181600001515111611da2576000611dcb565b80518051611db2906001906154e8565b81518110611dc257611dc2615668565b60200260200101515b611dd59087615650565b9550505b50505b5080611de78161567e565b915050611b42565b5092915050565b6007546001600160a01b03163314611e205760405162461bcd60e51b815260040161039790615566565b600e546040517f2c6fb4d5ff9fad6ecf2e09cd64cbc9aad92a8b9d2cc0e5c3ddef9b529b0b5ffd91611e5f916001600160a01b03909116908490615636565b60405180910390a1600e80546001600160a01b0319166001600160a01b0392909216919091179055565b33611e926114ff565b6001600160a01b031614611eb85760405162461bcd60e51b8152600401610397906154ff565b6008546040517fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab74106391611ef7916001600160a01b03909116908490615636565b60405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b42841015611f635760405162461bcd60e51b815260206004820152600f60248201526e1c195c9b5a5d0e8e995e1c1a5c9959608a1b6044820152606401610397565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611fb08361567e565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506120118882868686612d54565b61201c8888886124da565b5050505050505050565b6007546001600160a01b031633146120505760405162461bcd60e51b815260040161039790615566565b612064838383600f92909255601055601455565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90612095903090600401615394565b6020604051808303816000875af11580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d89190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e6699061210e903090600401615394565b6020604051808303816000875af115801561212d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121519190615534565b905061216561216083836154e8565b612e80565b600061217183836154e8565b1115610ebe57610ebe6133cb565b6012546040516361bfb47160e11b81526000918291829182916001600160a01b039091169063c37f68e2906121b8903090600401615394565b608060405180830381865afa1580156121d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f991906155bf565b935093509350506000670de0b6b3a7640000828561221791906155f5565b6122219190615614565b905061222d83826154e8565b61223f82670de0b6b3a76400006155f5565b6122499190615614565b94505050505090565b60008061225d611354565b60025490915080158061226e575081155b1561227b57509192915050565b8161228682866155f5565b6122909190615614565b949350505050565b600d81815481106122a857600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806122cd611354565b6002549091508015806122de575081155b156122ed575060009392505050565b8061228683866155f5565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161232d91906158e9565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b336123a16114ff565b6001600160a01b0316146123c75760405162461bcd60e51b8152600401610397906154ff565b6001600160a01b03811661242c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610397565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146124ce5760405162461bcd60e51b815260206004820152601460248201527359616b53747261746567793a3a6f6e6c79454f4160601b6044820152606401610397565b6124d860006137e4565b565b6001600160a01b0383166125305760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610397565b6001600160a01b0382166125865760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610397565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000806127106125f882856155f5565b610cea9190615614565b6001600160a01b0382166126755760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527320746f20746865207a65726f206164647265737360601b6064820152608401610397565b6001600160a01b0383166000908152600460205260409020546126999082906154e8565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546126c9908290615650565b6001600160a01b038084166000818152600460205260409081902093909355915190851690600080516020615b5c833981519152906125db9085815260200190565b601260009054906101000a90046001600160a01b03166001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612760573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5f9190615534565b600061278f82612e80565b61279882613944565b90506127a26133cb565b919050565b61118a8363a9059cbb60e01b84846040516024016127c692919061554d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613a14565b6001600160a01b0382166000908152600460205260409020546128219082906154e8565b6001600160a01b0383166000908152600460205260409020556002546128489082906154e8565b6002556040518181526000906001600160a01b03841690600080516020615b5c833981519152906020015b60405180910390a35050565b600a5460ff1615156001146128d65760405162461bcd60e51b815260206004820152601f60248201527f4261736553747261746567793a3a4465706f736974732064697361626c6564006044820152606401610397565b6128de61270b565b6128e860016137e4565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561295b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297f91906155a4565b6129df5760405162461bcd60e51b815260206004820152602b60248201527f4261736553747261746567793a3a4465706f73697420746f6b656e207472616e60448201526a1cd9995c8819985a5b195960aa1b6064820152608401610397565b60006129ea826125e8565b9050612a02836129fd610a7a84866154e8565b613ae6565b612a0c8282613b9f565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051612a4791815260200190565b60405180910390a2505050565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90612a85903090600401615394565b6020604051808303816000875af1158015612aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac89190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e66990612afe903090600401615394565b6020604051808303816000875af1158015612b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b419190615534565b9050612b5061216083836154e8565b601254604051633af9e66960e01b81526001600160a01b039091169063852a12e3908290633af9e66990612b88903090600401615394565b6020604051808303816000875af1158015612ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcb9190615534565b6040518263ffffffff1660e01b8152600401612be991815260200190565b6020604051808303816000875af1158015612c08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a9190615534565b604080516002808252606082810190935260009190816020015b6040805180820190915260008082526020820152815260200190600190039081612c4657505060408051808201909152738729438eb15e2c8b576fcc6aecda6a148776c0f5815260115460125492935090916020830191612cb6916001600160a01b039182169116600030613c04565b81525081600081518110612ccc57612ccc615668565b602090810291909101810191909152604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682526011546012549293840192612d2e929182169116600130613c04565b81525081600181518110612d4457612d44615668565b6020908102919091010152919050565b6000612d5e6122f8565b60405161190160f01b602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612de9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612e1f5750866001600160a01b0316816001600160a01b0316145b612e775760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e616044820152637475726560e01b6064820152608401610397565b50505050505050565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90612eb1903090600401615394565b6020604051808303816000875af1158015612ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef49190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e66990612f2a903090600401615394565b6020604051808303816000875af1158015612f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6d9190615534565b9050600083612f7c84846154e8565b612f8691906154e8565b601054600f5486612f9787876154e8565b612fa191906154e8565b612fab91906155f5565b612fb59190615614565b612fbf91906154e8565b90506000612fcd82856154e8565b9050600080612fda613cae565b60125460405163095ea7b360e01b81529294509092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b3926130329216908a9060040161554d565b6020604051808303816000875af1158015613051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307591906155a4565b505b821561333257600061308b86888585613d3b565b9050838111156130985750825b60125460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e3906024016020604051808303816000875af11580156130e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131079190615534565b1561315e5760405162461bcd60e51b815260206004820152602160248201527f42656e7169537472617465677956343a3a6661696c656420746f2072656465656044820152606d60f81b6064820152608401610397565b60125460405163073a938160e11b8152600481018390526001600160a01b0390911690630e752702906024016020604051808303816000875af11580156131a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cd9190615534565b1561322a5760405162461bcd60e51b815260206004820152602760248201527f42656e7169537472617465677956343a3a6661696c656420746f20726570617960448201526620626f72726f7760c81b6064820152608401610397565b601254604051633af9e66960e01b81526001600160a01b0390911690633af9e6699061325a903090600401615394565b6020604051808303816000875af1158015613279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329d9190615534565b6012546040516305eff7ef60e21b81529197506001600160a01b0316906317bfdfbc906132ce903090600401615394565b6020604051808303816000875af11580156132ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133119190615534565b96508685106133205750613332565b61332a85886154e8565b935050613077565b60125460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b39261338892919091169060009060040161554d565b6020604051808303816000875af11580156133a7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201c91906155a4565b6012546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc906133fc903090600401615394565b6020604051808303816000875af115801561341b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343f9190615534565b601254604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e66990613475903090600401615394565b6020604051808303816000875af1158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190615534565b90506000806134c5613cae565b9150915060008390506000601054600f5487876134e291906154e8565b6134ec91906155f5565b6134f69190615614565b60125460405163095ea7b360e01b815291925087916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b392613550929190911690869060040161554d565b6020604051808303816000875af115801561356f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359391906155a4565b505b818310156133325760006135ab84838888613d81565b9050826135b88286615650565b11156135cb576135c884846154e8565b90505b6013548110156135db5750613332565b60125460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec906024016020604051808303816000875af1158015613626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364a9190615534565b156136a15760405162461bcd60e51b815260206004820152602160248201527f42656e7169537472617465677956343a3a626f72726f77696e67206661696c656044820152601960fa1b6064820152608401610397565b60125460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d68906024016020604051808303816000875af11580156136ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137109190615534565b1561375d5760405162461bcd60e51b815260206004820152601f60248201527f42656e7169537472617465677956343a3a6c656e64696e67206661696c6564006044820152606401610397565b601254604051633af9e66960e01b81526001600160a01b0390911690633af9e6699061378d903090600401615394565b6020604051808303816000875af11580156137ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d09190615534565b93506137dc8183615650565b915050613595565b60006137ee613da3565b9050600954811115613903576000612710600c548361380d91906155f5565b6138179190615614565b9050801561385957600854613859906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836127a7565b60008361388057612710600b548461387191906155f5565b61387b9190615614565b613883565b60005b905080156138bf576138bf6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836127a7565b60006138de826138cf85876154e8565b6138d991906154e8565b614117565b905080156138ff5760006138f1826125e8565b90506138fd8282613b9f565b505b5050505b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461392c611354565b600254604080519283526020830191909152016114f3565b60125460405163852a12e360e01b8152600481018390526000916001600160a01b03169063852a12e3906024016020604051808303816000875af1158015613990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b49190615534565b15613a105760405162461bcd60e51b815260206004820152602660248201527f42656e71694c656e64696e6753747261746567793a3a6661696c656420746f2060448201526572656465656d60d01b6064820152608401610397565b5090565b6000613a69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661423b9092919063ffffffff16565b80519091501561118a5780806020019051810190613a8791906155a4565b61118a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610397565b60008111613b2b5760405162461bcd60e51b81526020600482015260126024820152715f6d696e743a3a7a65726f2073686172657360701b6044820152606401610397565b80600254613b399190615650565b6002556001600160a01b038216600090815260046020526040902054613b60908290615650565b6001600160a01b038316600081815260046020526040808220939093559151909190600080516020615b5c833981519152906128739085815260200190565b60008211613bfa5760405162461bcd60e51b815260206004820152602260248201527f4261736553747261746567793a3a5374616b6520616d6f756e7420746f6f206c6044820152616f7760f01b6064820152608401610397565b610e0c828261424a565b600080856001600160a01b03166305b9783d85856040518363ffffffff1660e01b8152600401613c35929190615984565b602060405180830381865afa158015613c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c769190615534565b9050613c848686868661425b565b613c908787878761442c565b613c9a9083615650565b613ca49190615650565b9695505050505050565b601154601254604051638e8f294b60e01b8152600092839283926001600160a01b0392831692638e8f294b92613ce992911690600401615394565b6040805180830381865afa158015613d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d2991906159a0565b94670de0b6b3a7640000945092505050565b6000601054601454848487613d5091906155f5565b613d5a9190615614565b613d6490886154e8565b613d6e91906155f5565b613d789190615614565b95945050505050565b60008382613d8f85886155f5565b613d999190615614565b613d7891906154e8565b6000613dad6145a4565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613dfc903090600401615394565b602060405180830381865afa158015613e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3d9190615534565b600d5490915060005b8181101561410f576000600d8281548110613e6357613e63615668565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613f8e57478015613f20577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613f0657600080fd5b505af1158015613f1a573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613f8c57613f838186615650565b945050506140fd565b505b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190613fbd903090600401615394565b602060405180830381865afa158015613fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ffe9190615534565b905060008111801561404257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b156140fa57600e546040516377ccc49d60e11b81526000916001600160a01b03169063ef99893a9061409c90859087907f0000000000000000000000000000000000000000000000000000000000000000906004016156ad565b600060405180830381865afa1580156140b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140e191908101906157d4565b90506140ec816146bd565b6140f69087615650565b9550505b50505b806141078161567e565b915050613e46565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603614176575090565b600e546040516377ccc49d60e11b81526000916001600160a01b03169063ef99893a906141eb9086907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000906004016156ad565b600060405180830381865afa158015614208573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261423091908101906157d4565b9050610cea816146bd565b6060612290848460008561483d565b6142538261496e565b610e0c6133cb565b604080516020810191829052637937969d60e01b9091526000908190806001600160a01b038816637937969d614296888a89602487016159cc565b602060405180830381865afa1580156142b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d79190615534565b9052805160009350909150156144235760006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143569190615534565b8152509050600060405180602001604052806143748a8a8a87614acf565b6001600160e01b031690528051909150156144205760006143958285614d0c565b9050600061440f896001600160a01b03166395dd9193306040518263ffffffff1660e01b81526004016143c89190615394565b602060405180830381865afa1580156143e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144099190615534565b85614d41565b905061441b8183614d5f565b955050505b50505b50949350505050565b6000806040518060200160405280614445888888614d7e565b6001600160e01b0316905260408051602081019182905263111d2e5760e31b909152909150600090806001600160a01b0389166388e972b861448c898b8a602487016159cc565b602060405180830381865afa1580156144a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cd9190615534565b905280519091501580156144e15750815115155b156144f8576a0c097ce7bc90715b34b9f160241b81525b81516000906145165760405180602001604052806000815250614520565b6145208383614d0c565b9050614598876001600160a01b03166370a08231876040518263ffffffff1660e01b81526004016145519190615394565b602060405180830381865afa15801561456e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145929190615534565b82614d5f565b98975050505050505050565b60408051600180825281830190925260009160208083019080368337505060125482519293506001600160a01b0316918391506000906145e6576145e6615668565b6001600160a01b039283166020918202929092010152601154604051633a22995760e11b815291169063744532ae906146289060009030908690600401615a34565b600060405180830381600087803b15801561464257600080fd5b505af1158015614656573d6000803e3d6000fd5b5050601154604051633a22995760e11b81526001600160a01b03909116925063744532ae915061468f9060019030908690600401615a34565b600060405180830381600087803b1580156146a957600080fd5b505af1158015610ebe573d6000803e3d6000fd5b805151600090158015906146fa575081518051600091906146e0906001906154e8565b815181106146f0576146f0615668565b6020026020010151115b1561483557816040015160008151811061471657614716615668565b60200260200101516001600160a01b031663095ea7b3600e60009054906101000a90046001600160a01b0316846000015160008151811061475957614759615668565b60200260200101516040518363ffffffff1660e01b815260040161477e92919061554d565b6020604051808303816000875af115801561479d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147c191906155a4565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b246616906147f2908590600401615a61565b6020604051808303816000875af1158015614811573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c229190615534565b506000919050565b60608247101561489e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610397565b6001600160a01b0385163b6148f55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610397565b600080866001600160a01b031685876040516149119190615afb565b60006040518083038185875af1925050503d806000811461494e576040519150601f19603f3d011682016040523d82523d6000602084013e614953565b606091505b5091509150614963828286614fb1565b979650505050505050565b60125460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b3926149c3929190911690859060040161554d565b6020604051808303816000875af11580156149e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0691906155a4565b5060125460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d68906024016020604051808303816000875af1158015614a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a769190615534565b15611a5f5760405162461bcd60e51b8152602060048201526024808201527f42656e71694c656e64696e6753747261746567793a3a4465706f7369742066616044820152631a5b195960e21b6064820152608401610397565b6000806000866001600160a01b0316634b3a0a7486886040518363ffffffff1660e01b8152600401614b02929190615984565b6040805180830381865afa158015614b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b429190615b17565b63ffffffff16915091506000876001600160a01b031663c376fada87896040518363ffffffff1660e01b8152600401614b7c929190615984565b602060405180830381865afa158015614b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bbd9190615534565b90506000614bcb4284614fea565b9050600081118015614bdd5750600082115b15614cfd576000614c4f896001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015614c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c499190615534565b88614d41565b90506000614c5d8385615024565b90506000808311614c7d5760405180602001604052806000815250614c87565b614c878284615060565b90506000614cac60405180602001604052808a6001600160e01b03168152508361509b565b9050614cee81600001516040518060400160405280601a8152602001796e657720696e646578206578636565647320323234206269747360301b8152506150c7565b98505050505050505050612290565b50600098975050505050505050565b6040805160208101909152600081526040518060200160405280614d3885600001518560000151614fea565b90529392505050565b6000610cea614d5884670de0b6b3a7640000615024565b83516150f6565b60006a0c097ce7bc90715b34b9f160241b6125f8848460000151615024565b6000806000856001600160a01b031663d81c5e4585876040518363ffffffff1660e01b8152600401614db1929190615984565b6040805180830381865afa158015614dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614df19190615b17565b63ffffffff16915091506000866001600160a01b031663cf9cfb6186886040518363ffffffff1660e01b8152600401614e2b929190615984565b602060405180830381865afa158015614e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e6c9190615534565b90506000614e7a4284614fea565b9050600081118015614e8c5750600082115b15614fa3576000876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ef59190615534565b90506000614f038385615024565b90506000808311614f235760405180602001604052806000815250614f2d565b614f2d8284615060565b90506000614f5260405180602001604052808a6001600160e01b03168152508361509b565b9050614f9481600001516040518060400160405280601a8152602001796e657720696e646578206578636565647320323234206269747360301b8152506150c7565b98505050505050505050610cea565b506000979650505050505050565b60608315614fc0575081610cea565b825115614fd05782518084602001fd5b8160405162461bcd60e51b8152600401610397919061526e565b6000610cea8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250615129565b6000610cea8383604051806040016040528060178152602001766d756c7469706c69636174696f6e206f766572666c6f7760481b815250615158565b6040805160208101909152600081526040518060200160405280614d38615095866a0c097ce7bc90715b34b9f160241b615024565b856150f6565b6040805160208101909152600081526040518060200160405280614d38856000015185600001516151ab565b600081600160e01b84106150ee5760405162461bcd60e51b8152600401610397919061526e565b509192915050565b6000610cea83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b8152506151e1565b6000818484111561514d5760405162461bcd60e51b8152600401610397919061526e565b5061229083856154e8565b6000831580615165575082155b1561517257506000610cea565b600061517e84866155f5565b90508361518b8683615614565b1483906144235760405162461bcd60e51b8152600401610397919061526e565b6000610cea8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b81525061520d565b600081836152025760405162461bcd60e51b8152600401610397919061526e565b506122908385615614565b60008061521a8486615650565b905082858210156144235760405162461bcd60e51b8152600401610397919061526e565b60005b83811015615259578181015183820152602001615241565b83811115615268576000848401525b50505050565b602081526000825180602084015261528d81604085016020870161523e565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611a5f57600080fd5b600080604083850312156152c957600080fd5b82356152d4816152a1565b946020939093013593505050565b6000602082840312156152f457600080fd5b5035919050565b60008060006060848603121561531057600080fd5b833561531b816152a1565b9250602084013561532b816152a1565b929592945050506040919091013590565b803560ff811681146127a257600080fd5b600080600080600060a0868803121561536557600080fd5b853594506020860135935061537c6040870161533c565b94979396509394606081013594506080013592915050565b6001600160a01b0391909116815260200190565b6000602082840312156153ba57600080fd5b8135610cea816152a1565b600080604083850312156153d857600080fd5b82356153e3816152a1565b915060208301356153f3816152a1565b809150509250929050565b600080600080600080600060e0888a03121561541957600080fd5b8735615424816152a1565b96506020880135615434816152a1565b955060408801359450606088013593506154506080890161533c565b925060a0880135915060c0880135905092959891949750929550565b60008060006060848603121561548157600080fd5b505081359360208301359350604090920135919050565b600181811c908216806154ac57607f821691505b6020821081036154cc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156154fa576154fa6154d2565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561554657600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6020808252601490820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b604082015260600190565b805180151581146127a257600080fd5b6000602082840312156155b657600080fd5b610cea82615594565b600080600080608085870312156155d557600080fd5b505082516020840151604085015160609095015191969095509092509050565b600081600019048311821515161561560f5761560f6154d2565b500290565b60008261563157634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0392831681529116602082015260400190565b60008219821115615663576156636154d2565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201615690576156906154d2565b5060010190565b634e487b7160e01b600052603160045260246000fd5b9283526001600160a01b03918216602084015216604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715615705576157056156cc565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715615734576157346156cc565b604052919050565b600067ffffffffffffffff821115615756576157566156cc565b5060051b60200190565b600082601f83011261577157600080fd5b815160206157866157818361573c565b61570b565b82815260059290921b840181019181810190868411156157a557600080fd5b8286015b848110156157c95780516157bc816152a1565b83529183019183016157a9565b509695505050505050565b600060208083850312156157e757600080fd5b825167ffffffffffffffff808211156157ff57600080fd5b908401906080828703121561581357600080fd5b61581b6156e2565b82518281111561582a57600080fd5b8301601f8101881361583b57600080fd5b80516158496157818261573c565b81815260059190911b8201860190868101908a83111561586857600080fd5b928701925b828410156158865783518252928701929087019061586d565b8452505050828401518281111561589c57600080fd5b6158a888828601615760565b858301525060408301519350818411156158c157600080fd5b6158cd87858501615760565b6040820152606083015160608201528094505050505092915050565b600080835481600182811c91508083168061590557607f831692505b6020808410820361592457634e487b7160e01b86526022600452602486fd5b818015615938576001811461594957615976565b60ff19861689528489019650615976565b60008a81526020902060005b8681101561596e5781548b820152908501908301615955565b505084890196505b509498975050505050505050565b60ff9290921682526001600160a01b0316602082015260400190565b600080604083850312156159b357600080fd5b6159bc83615594565b9150602083015190509250929050565b60ff9390931683526001600160a01b03918216602084015216604082015260600190565b600081518084526020808501945080840160005b83811015615a295781516001600160a01b031687529582019590820190600101615a04565b509495945050505050565b60ff841681526001600160a01b0383166020820152606060408201819052600090613d78908301846159f0565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015615aa65783518252928401926001929092019190840190615a86565b50838701519350601f19925082868203016040870152615ac681856159f0565b93505050604085015181858403016060860152615ae383826159f0565b92505050606084015160808401528091505092915050565b60008251615b0d81846020870161523e565b9190910192915050565b60008060408385031215615b2a57600080fd5b82516001600160e01b0381168114615b4157600080fd5b602084015190925063ffffffff811681146153f357600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f5548b27f6b5860507c8fbc1e8fd6e30d8092f361512a4fa80e35d0622407d8d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "recoverGas(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens available to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "disableDeposits()": {
        "notice": "Disable deposits"
      },
      "enableDeposits()": {
        "notice": "Enable deposits"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "recoverGas(uint256)": {
        "notice": "Recover GAS from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateFeeCollector(address)": {
        "notice": "Update feeCollector"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 560,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 566,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 586,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10251,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2566,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "devAddr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2568,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "feeCollector",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2570,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2572,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2574,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2576,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11950,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11953,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "simpleRouter",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISimpleRouter)7610"
      },
      {
        "astId": 11830,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "leverageLevel",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 11832,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "leverageBips",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 41424,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "comptroller",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IBenqiUnitroller)42661"
      },
      {
        "astId": 41427,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "tokenDelegator",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IBenqiERC20Delegator)42466"
      },
      {
        "astId": 41429,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "minMinting",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 41431,
        "contract": "contracts/strategies/avalanche/benqi/BenqiStrategyV4.sol:BenqiStrategyV4",
        "label": "redeemLimitSafetyMargin",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBenqiERC20Delegator)42466": {
        "encoding": "inplace",
        "label": "contract IBenqiERC20Delegator",
        "numberOfBytes": "20"
      },
      "t_contract(IBenqiUnitroller)42661": {
        "encoding": "inplace",
        "label": "contract IBenqiUnitroller",
        "numberOfBytes": "20"
      },
      "t_contract(ISimpleRouter)7610": {
        "encoding": "inplace",
        "label": "contract ISimpleRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}