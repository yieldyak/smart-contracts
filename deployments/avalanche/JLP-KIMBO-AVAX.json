{
  "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "gasToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "rewards",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "simpleRouter",
              "type": "address"
            }
          ],
          "internalType": "struct BaseStrategy.BaseStrategySettings",
          "name": "_baseStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dev",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV3.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lamaPayInstance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint216",
          "name": "amountPerSec",
          "type": "uint216"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lamaPayInstance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint216",
          "name": "amountPerSec",
          "type": "uint216"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RemoveStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "UpdateRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lamaPayInstance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "uint216",
          "name": "_amountPerSec",
          "type": "uint216"
        }
      ],
      "name": "addStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedRewardsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lamaPayInstance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "uint216",
          "name": "_amountPerSec",
          "type": "uint216"
        }
      ],
      "name": "removeStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simpleRouter",
      "outputs": [
        {
          "internalType": "contract ISimpleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "streams",
      "outputs": [
        {
          "internalType": "address",
          "name": "lamaPayInstance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint216",
          "name": "amountPerSec",
          "type": "uint216"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "updateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
    "transactionIndex": 5,
    "gasUsed": "4681649",
    "logsBloom": "0x00000000000000000000000000000000400000000000000000c80002000000000000000000000000000000000000000000000000000002000000000000000000010000000000000000000100000008000001000000000000080000000000080000000000020000000000000000000800000000000000080000000000000000400000000000000000000000000000000000040008000000000400000010000000000000000000000400000000000000200000020000000000400000000000080000000000000000000000010000000000000000000002000000000000020020000000020010000000000000000000000002000000000000000000000000000040",
    "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db",
    "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 19,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 20,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 21,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0xcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d580f9cf2fb2d09bc411532988f2afda4e7beff",
        "logIndex": 22,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0xa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00"
        ],
        "data": "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
        "logIndex": 23,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 24,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43203703,
        "transactionHash": "0xdd1e2d2698b1325342d876400242454f632ad0bfa82c39309fa1f8fd4e5d21e2",
        "address": "0xD5aF122207d495E2EF1ac43FdEe5221BF0757b07",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 26,
        "blockHash": "0xe40c5a83e26fdd3c6b0142f3760fc973c643a9d6c11c1caafa7ca33cf8d045db"
      }
    ],
    "blockNumber": 43203703,
    "cumulativeGasUsed": "5688710",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "gasToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "rewards": [
        "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      ],
      "simpleRouter": "0x959a0af5A46F76AA37317BC417D48B445658B188"
    },
    {
      "name": "Yield Yak: JLP KIMBO-AVAX",
      "owner": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "dev": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "feeCollector": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
      "depositToken": "0x03a5888726667FfF1E753fc06B51Dd1245e7371a",
      "rewardToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "minTokensToReinvest": "1000",
      "devFeeBips": 700,
      "reinvestRewardBips": 300
    }
  ],
  "solcInputHash": "44a1269ded178bbf2357667a782e2e4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"simpleRouter\",\"type\":\"address\"}],\"internalType\":\"struct BaseStrategy.BaseStrategySettings\",\"name\":\"_baseStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV3.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lamaPayInstance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint216\",\"name\":\"amountPerSec\",\"type\":\"uint216\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lamaPayInstance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint216\",\"name\":\"amountPerSec\",\"type\":\"uint216\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lamaPayInstance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"uint216\",\"name\":\"_amountPerSec\",\"type\":\"uint216\"}],\"name\":\"addStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lamaPayInstance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"uint216\",\"name\":\"_amountPerSec\",\"type\":\"uint216\"}],\"name\":\"removeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleRouter\",\"outputs\":[{\"internalType\":\"contract ISimpleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"streams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lamaPayInstance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint216\",\"name\":\"amountPerSec\",\"type\":\"uint216\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"recoverGas(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateFeeCollector(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens available to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"disableDeposits()\":{\"notice\":\"Disable deposits\"},\"enableDeposits()\":{\"notice\":\"Enable deposits\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"recoverGas(uint256)\":{\"notice\":\"Recover GAS from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateFeeCollector(address)\":{\"notice\":\"Update feeCollector\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol\":\"MemeRushStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from] - value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        require(value > 0, \\\"_mint::zero shares\\\");\\n        totalSupply = totalSupply + value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x893040cb129e3428494993115424a9e7549ae5935e80b3c406ee672d7199aa70\",\"license\":\"MIT\"},\"contracts/YakStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV3 is YakERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct StrategySettings {\\n        string name;\\n        address owner;\\n        address dev;\\n        address feeCollector;\\n        address depositToken;\\n        address rewardToken;\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public immutable depositToken;\\n    IERC20 public immutable rewardToken;\\n\\n    address public devAddr;\\n    address public feeCollector;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event UpdateFeeCollector(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        name = _strategySettings.name;\\n        depositToken = IERC20(_strategySettings.depositToken);\\n        rewardToken = IERC20(_strategySettings.rewardToken);\\n\\n        devAddr = msg.sender;\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateFeeCollector(_strategySettings.feeCollector);\\n        updateDevAddr(_strategySettings.dev);\\n\\n        enableDeposits();\\n        transferOwnership(_strategySettings.owner);\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return (unclaimedRewards * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens available to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        uint256 tDeposits = totalDeposits();\\n        uint256 tSupply = totalSupply;\\n        if (tSupply == 0 || tDeposits == 0) {\\n            return amount;\\n        }\\n        return (amount * tSupply) / tDeposits;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        uint256 tDeposits = totalDeposits();\\n        uint256 tSupply = totalSupply;\\n        if (tSupply == 0 || tDeposits == 0) {\\n            return 0;\\n        }\\n        return (amount * tDeposits) / tSupply;\\n    }\\n\\n    // Dev protected\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyDev {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Disable deposits\\n     */\\n    function disableDeposits() public onlyDev {\\n        require(DEPOSITS_ENABLED);\\n        DEPOSITS_ENABLED = false;\\n        emit DepositsEnabled(false);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyDev {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyDev {\\n        require(newValue + REINVEST_REWARD_BIPS <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyDev {\\n        require(newValue + DEV_FEE_BIPS <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    // Owner protected\\n\\n    /**\\n     * @notice Enable deposits\\n     */\\n    function enableDeposits() public onlyOwner {\\n        require(!DEPOSITS_ENABLED);\\n        DEPOSITS_ENABLED = true;\\n        emit DepositsEnabled(true);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyOwner {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Update feeCollector\\n     * @param newValue address\\n     */\\n    function updateFeeCollector(address newValue) public onlyOwner {\\n        emit UpdateFeeCollector(feeCollector, newValue);\\n        feeCollector = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover GAS from contract\\n     * @param amount amount\\n     */\\n    function recoverGas(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x13ec4c1d08d0676461ce2e8ae66293b4f41cff59c7d563478133e283741e03c5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/ILamaPay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ILamaPay {\\n    function token() external view returns (address);\\n    function createStream(address to, uint216 amountPerSec) external;\\n    function deposit(uint256 amount) external;\\n    function withdrawable(address from, address to, uint216 amountPerSec)\\n        external\\n        view\\n        returns (uint256 withdrawableAmount, uint256 lastUpdate, uint256 owed);\\n    function withdraw(address from, address to, uint216 amountPerSec) external;\\n}\\n\",\"keccak256\":\"0xf48819856c42b2fbe2af271e670119e479c6c128ee1e5c686f8e2629e8e77d3a\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9934224020ce9192433dcbefcc56ee1500985de4e9611ef42e00498fa0a99dd0\",\"license\":\"MIT\"},\"contracts/interfaces/ISimpleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../router/interfaces/IYakRouter.sol\\\";\\n\\ninterface ISimpleRouter {\\n    error UnsupportedSwap(address _tokenIn, address _tokenOut);\\n    error InvalidConfiguration();\\n\\n    struct SwapConfig {\\n        bool useYakSwapRouter;\\n        uint8 yakSwapMaxSteps;\\n        Path path;\\n    }\\n\\n    struct Path {\\n        address[] adapters;\\n        address[] tokens;\\n    }\\n\\n    function query(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (FormattedOffer memory trade);\\n\\n    function swap(FormattedOffer memory _trade) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xf736215916cbe2075222e996c43468d1bd2c42fd460f4869e2c53b7b74d0f383\",\"license\":\"MIT\"},\"contracts/interfaces/IWGAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWGAS is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4b124eb4cc5c793034c6e08c77b0932df2644e25a0e4868c0dd54efadd820e9b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/router/interfaces/IYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct Query {\\n    address adapter;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n}\\n\\nstruct Offer {\\n    bytes amounts;\\n    bytes adapters;\\n    bytes path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct FormattedOffer {\\n    uint256[] amounts;\\n    address[] adapters;\\n    address[] path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct Trade {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address[] adapters;\\n}\\n\\ninterface IYakRouter {\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    // admin\\n    function setTrustedTokens(address[] memory _trustedTokens) external;\\n    function setAdapters(address[] memory _adapters) external;\\n    function setFeeClaimer(address _claimer) external;\\n    function setMinFee(uint256 _fee) external;\\n\\n    // misc\\n    function trustedTokensCount() external view returns (uint256);\\n    function adaptersCount() external view returns (uint256);\\n\\n    // query\\n\\n    function queryAdapter(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8 _index)\\n        external\\n        returns (uint256);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8[] calldata _options)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n\\n    // swap\\n\\n    function swapNoSplit(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitFromAVAX(Trade calldata _trade, address _to, uint256 _fee) external payable;\\n\\n    function swapNoSplitToAVAX(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2706c56d892343a14619a2414572292ef9f106a98ae53b4740f155358ec22f7e\",\"license\":\"MIT\"},\"contracts/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV3.sol\\\";\\nimport \\\"../interfaces/IWGAS.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"./../interfaces/ISimpleRouter.sol\\\";\\n\\n/**\\n * @notice BaseStrategy\\n */\\nabstract contract BaseStrategy is YakStrategyV3 {\\n    using SafeERC20 for IERC20;\\n\\n    IWGAS internal immutable WGAS;\\n\\n    struct BaseStrategySettings {\\n        address gasToken;\\n        address[] rewards;\\n        address simpleRouter;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    address[] public supportedRewards;\\n    ISimpleRouter public simpleRouter;\\n\\n    event AddReward(address rewardToken);\\n    event RemoveReward(address rewardToken);\\n    event UpdateRouter(address oldRouter, address newRouter);\\n\\n    constructor(BaseStrategySettings memory _settings, StrategySettings memory _strategySettings)\\n        YakStrategyV3(_strategySettings)\\n    {\\n        WGAS = IWGAS(_settings.gasToken);\\n\\n        supportedRewards = _settings.rewards;\\n\\n        simpleRouter = ISimpleRouter(_settings.simpleRouter);\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function updateRouter(address _router) public onlyDev {\\n        emit UpdateRouter(address(simpleRouter), _router);\\n        simpleRouter = ISimpleRouter(_router);\\n    }\\n\\n    function addReward(address _rewardToken) public onlyDev {\\n        bool found;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n            }\\n        }\\n        require(!found, \\\"BaseStrategy::Reward already configured!\\\");\\n        supportedRewards.push(_rewardToken);\\n        emit AddReward(_rewardToken);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        bool found;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"BaseStrategy::Reward not configured!\\\");\\n        supportedRewards.pop();\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function getSupportedRewardsLength() public view returns (uint256) {\\n        return supportedRewards.length;\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s)\\n        external\\n        override\\n    {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"BaseStrategy::Deposits disabled\\\");\\n        _reinvest(true);\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount), \\\"BaseStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount - depositFee));\\n        _stakeDepositTokens(_amount, depositFee);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return (_amount * depositFeeBips) / _bip();\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"BaseStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount - withdrawFee);\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return (_amount * withdrawFeeBips) / _bip();\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertPoolRewardsToRewardToken() private returns (uint256) {\\n        _getRewards();\\n        uint256 rewardTokenAmount = rewardToken.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WGAS)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WGAS.deposit{value: balance}();\\n                }\\n                if (address(rewardToken) == address(WGAS)) {\\n                    rewardTokenAmount += balance;\\n                    continue;\\n                }\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0 && reward != address(rewardToken)) {\\n                FormattedOffer memory offer = simpleRouter.query(amount, reward, address(rewardToken));\\n                rewardTokenAmount += _swap(offer);\\n            }\\n        }\\n        return rewardTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract\\n     * @param userDeposit Controls whether or not a gas refund is payed to msg.sender\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        uint256 amount = _convertPoolRewardsToRewardToken();\\n        if (amount > MIN_TOKENS_TO_REINVEST) {\\n            uint256 devFee = (amount * DEV_FEE_BIPS) / BIPS_DIVISOR;\\n            if (devFee > 0) {\\n                rewardToken.safeTransfer(feeCollector, devFee);\\n            }\\n\\n            uint256 reinvestFee = userDeposit ? 0 : (amount * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n            if (reinvestFee > 0) {\\n                rewardToken.safeTransfer(msg.sender, reinvestFee);\\n            }\\n\\n            uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount - devFee - reinvestFee);\\n\\n            if (depositTokenAmount > 0) {\\n                uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n                _stakeDepositTokens(depositTokenAmount, depositFee);\\n            }\\n        }\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount) {\\n        if (address(rewardToken) == address(depositToken)) return _fromAmount;\\n        FormattedOffer memory offer = simpleRouter.query(_fromAmount, address(rewardToken), address(depositToken));\\n        return _swap(offer);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount, uint256 _depositFee) private {\\n        require(_amount > 0, \\\"BaseStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount, _depositFee);\\n    }\\n\\n    function _swap(FormattedOffer memory _offer) internal returns (uint256 amountOut) {\\n        if (_offer.amounts.length > 0 && _offer.amounts[_offer.amounts.length - 1] > 0) {\\n            IERC20(_offer.path[0]).approve(address(simpleRouter), _offer.amounts[0]);\\n            return simpleRouter.swap(_offer);\\n        }\\n        return 0;\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(WGAS)) {\\n                rewards[i].amount += address(this).balance;\\n            }\\n            if (reward == address(rewardToken)) {\\n                estimatedTotalReward += rewards[i].amount;\\n            } else if (reward > address(0)) {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance + rewards[i].amount;\\n                if (amount > 0) {\\n                    FormattedOffer memory offer = simpleRouter.query(amount, reward, address(rewardToken));\\n                    estimatedTotalReward += offer.amounts.length > 1 ? offer.amounts[offer.amounts.length - 1] : 0;\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    function rescueDeployedFunds(uint256 _minReturnAmountAccepted) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= _minReturnAmountAccepted,\\n            \\\"BaseStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            disableDeposits();\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* ABSTRACT */\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0x6d70e81010d097dd6faa6e5e3657375ef501367af11a746f76e286cdbe3fb700\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../../BaseStrategy.sol\\\";\\n\\nimport \\\"./../../../interfaces/IPair.sol\\\";\\nimport \\\"./../../../interfaces/ILamaPay.sol\\\";\\n\\ncontract MemeRushStrategy is BaseStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    struct Stream {\\n        address lamaPayInstance;\\n        address payer;\\n        uint216 amountPerSec;\\n        address token;\\n    }\\n\\n    address internal immutable token0;\\n    address internal immutable token1;\\n\\n    uint256 public staked;\\n\\n    Stream[] public streams;\\n\\n    event AddStream(address lamaPayInstance, address payer, uint216 amountPerSec, address token);\\n    event RemoveStream(address lamaPayInstance, address payer, uint216 amountPerSec, address token);\\n\\n    constructor(BaseStrategySettings memory _baseStrategySettings, StrategySettings memory _strategySettings)\\n        BaseStrategy(_baseStrategySettings, _strategySettings)\\n    {\\n        token0 = IPair(address(depositToken)).token0();\\n        token1 = IPair(address(depositToken)).token1();\\n    }\\n\\n    function addStream(address _lamaPayInstance, address _payer, uint216 _amountPerSec) external onlyDev {\\n        if (_lamaPayInstance > address(0) && _payer > address(0) && _amountPerSec > 0) {\\n            (, bool found) = findStream(_lamaPayInstance, _payer, _amountPerSec);\\n            require(!found, \\\"MemeRushStrategy::Stream already configured!\\\");\\n            address token = ILamaPay(_lamaPayInstance).token();\\n            streams.push(\\n                Stream({lamaPayInstance: _lamaPayInstance, payer: _payer, amountPerSec: _amountPerSec, token: token})\\n            );\\n            emit AddStream(_lamaPayInstance, _payer, _amountPerSec, token);\\n        }\\n    }\\n\\n    function removeStream(address _lamaPayInstance, address _payer, uint216 _amountPerSec) external onlyDev {\\n        (uint256 index, bool found) = findStream(_lamaPayInstance, _payer, _amountPerSec);\\n        require(found, \\\"MemeRushStrategy::Stream not configured!\\\");\\n        _getRewards();\\n        streams[index] = streams[streams.length - 1];\\n        streams.pop();\\n        emit RemoveStream(_lamaPayInstance, _payer, _amountPerSec, ILamaPay(_lamaPayInstance).token());\\n    }\\n\\n    function findStream(address _lamaPayInstance, address _payer, uint216 _amountPerSec)\\n        internal\\n        view\\n        returns (uint256 index, bool found)\\n    {\\n        for (uint256 i = 0; i < streams.length; i++) {\\n            if (\\n                _lamaPayInstance == streams[i].lamaPayInstance && _payer == streams[i].payer\\n                    && _amountPerSec == streams[i].amountPerSec\\n            ) {\\n                found = true;\\n                index = i;\\n            }\\n        }\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount, uint256) internal override {\\n        staked += _amount;\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 withdrawAmount) {\\n        staked -= _amount;\\n        return _amount;\\n    }\\n\\n    function _pendingRewards() internal view virtual override returns (Reward[] memory) {\\n        Reward[] memory rewards = new Reward[](streams.length);\\n        for (uint256 i = 0; i < streams.length; i++) {\\n            (uint256 withdrawableAmount,,) = ILamaPay(streams[i].lamaPayInstance).withdrawable(\\n                streams[i].payer, address(this), streams[i].amountPerSec\\n            );\\n            rewards[i] = Reward({reward: streams[i].token, amount: withdrawableAmount});\\n        }\\n        return rewards;\\n    }\\n\\n    function _getRewards() internal virtual override {\\n        for (uint256 i = 0; i < streams.length; i++) {\\n            ILamaPay(streams[i].lamaPayInstance).withdraw(streams[i].payer, address(this), streams[i].amountPerSec);\\n        }\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal override returns (uint256 toAmount) {\\n        fromAmount = fromAmount / 2;\\n        if (address(rewardToken) != token0) {\\n            FormattedOffer memory offer = simpleRouter.query(fromAmount, address(rewardToken), token0);\\n            rewardToken.approve(address(simpleRouter), fromAmount);\\n            simpleRouter.swap(offer);\\n        }\\n        if (address(rewardToken) != token1) {\\n            FormattedOffer memory offer = simpleRouter.query(fromAmount, address(rewardToken), token1);\\n            rewardToken.approve(address(simpleRouter), fromAmount);\\n            simpleRouter.swap(offer);\\n        }\\n        toAmount = addLiquidity(\\n            address(depositToken), IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this))\\n        );\\n    }\\n\\n    function addLiquidity(address depositToken, uint256 maxAmountIn0, uint256 maxAmountIn1)\\n        internal\\n        returns (uint256)\\n    {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n        IERC20(token0).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(token1).safeTransfer(depositToken, amountIn1);\\n\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    function _quoteLiquidityAmountOut(uint256 amountIn, uint256 reserve0, uint256 reserve1)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return (amountIn * reserve1) / reserve0;\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        return staked;\\n    }\\n\\n    function _emergencyWithdraw() internal override {}\\n}\\n\",\"keccak256\":\"0xbf953dd60696497db83ea0ad5d9afff2097bd537ab03140a09d0de9404c1cd54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526009610120819052685969656c642059616b60b81b6101409081526200002f91600091906200081d565b506040805180820190915260038082526216549560ea1b60209092019182526200005c916001916200081d565b503480156200006a57600080fd5b5060405162005be538038062005be58339810160408190526200008d9162000b35565b600680546001600160a01b0319163390811790915560405183918391829190819060009060008051602062005bc5833981519152908290a35080518051620000de916000916020909101906200081d565b506080808201516001600160a01b0390811690915260a0808301519091169052600780546001600160a01b0319163317905560c08101516200012090620002fe565b60e081015162000130906200039f565b61010081015162000141906200045b565b6060810151620001519062000517565b60408101516200016190620005cb565b6200016b6200067f565b60208101516200017b9062000720565b5081516001600160a01b031660c0526020808301518051620001a292600d920190620008ac565b50604082810151600e80546001600160a01b0319166001600160a01b039092169190911790558051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a150506080516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000242573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000268919062000c68565b6001600160a01b031660e0816001600160a01b0316815250506080516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e8919062000c68565b6001600160a01b0316610100525062000cf09050565b6007546001600160a01b031633146200035e5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c7944657600000000000000000000000060448201526064015b60405180910390fd5b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b6007546001600160a01b03163314620003fb5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015260640162000355565b612710600b54826200040e919062000c8d565b11156200041a57600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b03163314620004b75760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015260640162000355565b612710600c5482620004ca919062000c8d565b1115620004d657600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b6006546001600160a01b03163314620005625760405162461bcd60e51b8152602060048201819052602482015260008051602062005ba5833981519152604482015260640162000355565b600854604080516001600160a01b03928316815291831660208301527fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314620006165760405162461bcd60e51b8152602060048201819052602482015260008051602062005ba5833981519152604482015260640162000355565b600754604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314620006ca5760405162461bcd60e51b8152602060048201819052602482015260008051602062005ba5833981519152604482015260640162000355565b600a5460ff1615620006db57600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a1565b6006546001600160a01b031633146200076b5760405162461bcd60e51b8152602060048201819052602482015260008051602062005ba5833981519152604482015260640162000355565b6001600160a01b038116620007d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000355565b6006546040516001600160a01b0380841692169060008051602062005bc583398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b8280546200082b9062000cb4565b90600052602060002090601f0160209004810192826200084f57600085556200089a565b82601f106200086a57805160ff19168380011785556200089a565b828001600101855582156200089a579182015b828111156200089a5782518255916020019190600101906200087d565b50620008a892915062000904565b5090565b8280548282559060005260206000209081019282156200089a579160200282015b828111156200089a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620008cd565b5b80821115620008a8576000815560010162000905565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b03811182821017156200095757620009576200091b565b60405290565b604051606081016001600160401b03811182821017156200095757620009576200091b565b604051601f8201601f191681016001600160401b0381118282101715620009ad57620009ad6200091b565b604052919050565b80516001600160a01b0381168114620009cd57600080fd5b919050565b600082601f830112620009e457600080fd5b81516001600160401b0381111562000a005762000a006200091b565b602062000a16601f8301601f1916820162000982565b828152858284870101111562000a2b57600080fd5b60005b8381101562000a4b57858101830151828201840152820162000a2e565b8381111562000a5d5760008385840101525b5095945050505050565b6000610120828403121562000a7b57600080fd5b62000a8562000931565b82519091506001600160401b0381111562000a9f57600080fd5b62000aad84828501620009d2565b82525062000abe60208301620009b5565b602082015262000ad160408301620009b5565b604082015262000ae460608301620009b5565b606082015262000af760808301620009b5565b608082015262000b0a60a08301620009b5565b60a082015260c082015160c082015260e082015160e082015261010080830151818301525092915050565b6000806040838503121562000b4957600080fd5b82516001600160401b038082111562000b6157600080fd5b908401906060828703121562000b7657600080fd5b62000b806200095d565b62000b8b83620009b5565b81526020808401518381111562000ba157600080fd5b8401601f8101891362000bb357600080fd5b80518481111562000bc85762000bc86200091b565b8060051b62000bd984820162000982565b918252828101840191848101908c84111562000bf457600080fd5b938501935b8385101562000c1d5762000c0d85620009b5565b8252938501939085019062000bf9565b868601525062000c349250505060408501620009b5565b604083015286015190945091508082111562000c4f57600080fd5b5062000c5e8582860162000a67565b9150509250929050565b60006020828403121562000c7b57600080fd5b62000c8682620009b5565b9392505050565b6000821982111562000caf57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168062000cc957607f821691505b60208210810362000cea57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051614d9e62000e0760003960008181613ce901528181613d8901528181613fd50152614320015260008181613abe01528181613b5e01528181613f5501526142ec01526000818161208b015281816138110152818161384001526138b501526000818161084901528181611fee015281816120f301528181612232015281816133eb015281816134530152818161375d015281816138df0152818161399b015281816139fe01528181613ae801528181613b3601528181613c0301528181613d1301528181613d610152613e2e01526000818161074901528181610aab01528181610b7e01528181610d6601528181610df301528181612c950152613f2b0152614d9e6000f3fe608060405234801561001057600080fd5b50600436106103995760003560e01c80639291d563116101e9578063c4b24a461161010f578063dd8ce4d6116100ad578063f2fde38b1161007c578063f2fde38b1461081e578063f6314d0714610831578063f7c618c114610844578063fdb5a03e1461086b57600080fd5b8063dd8ce4d6146107dd578063e75ab045146107f0578063eab89a5a14610803578063ed24911d1461081657600080fd5b8063d2c35ce8116100e9578063d2c35ce81461076b578063d505accf1461077e578063da09c72c14610791578063dd62ed3e146107a457600080fd5b8063c4b24a4614610729578063c851cc3214610731578063c89039c51461074457600080fd5b8063a9059cbb11610187578063b9e57b8011610156578063b9e57b80146106f2578063bd079f55146106fa578063bec67bd614610703578063c415b95c1461071657600080fd5b8063a9059cbb146106b7578063ac67e1af146106ca578063b52a321f146106d2578063b6b55f25146106df57600080fd5b80639c9b2e21116101c35780639c9b2e21146106575780639e4e73181461066a578063a4d5e67c14610691578063a8ae2b7c146106a457600080fd5b80639291d5631461062957806395d89b411461063c57806399729ec11461064457600080fd5b80635e4c57a4116102ce5780637897e7f61161026c578063818372301161023b57806381837230146105d55780638980f11f146105e85780638aff733d146105fb5780638da5cb5b1461060457600080fd5b80637897e7f6146105875780637ae267731461059a5780637d882097146105ad5780637ecebe00146105b557600080fd5b8063666d25b9116102a8578063666d25b9146105305780636a8b25331461054357806370a0823114610556578063715018a61461057f57600080fd5b80635e4c57a4146104d05780635ea682ea146104d857806364d60d91146104e157600080fd5b8063247d284b1161033b5780632f4f21e2116103155780632f4f21e21461046957806330adf81f1461047c578063313ce567146104a35780634a970be7146104bd57600080fd5b8063247d284b146103f6578063258250da1461044c5780632e1a7d4d1461045457600080fd5b8063110560351161037757806311056035146103f657806318160ddd1461040957806320606b701461041257806323b872dd1461043957600080fd5b806306fdde031461039e578063095ea7b3146103bc5780630b76619b146103df575b600080fd5b6103a6610873565b6040516103b39190614588565b60405180910390f35b6103cf6103ca3660046145d0565b610901565b60405190151581526020016103b3565b6103e8600f5481565b6040519081526020016103b3565b6103e86104043660046145fc565b610917565b6103e860025481565b6103e87f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103cf610447366004614615565b610928565b600d546103e8565b6104676104623660046145fc565b6109f1565b005b6104676104773660046145d0565b610b17565b6103e87f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6104ab601281565b60405160ff90911681526020016103b3565b6104676104cb36600461466c565b610b25565b610467610bf3565b6103e8600c5481565b6104f46104ef3660046145fc565b610ca3565b604080516001600160a01b03958616815293851660208501526001600160d81b03909216918301919091529190911660608201526080016103b3565b61046761053e3660046145fc565b610cf4565b6104676105513660046146b3565b610f6e565b6103e861056436600461470a565b6001600160a01b031660009081526004602052604090205490565b61046761127d565b6104676105953660046145fc565b611321565b6104676105a8366004614727565b6113f3565b600f546103e8565b6103e86105c336600461470a565b60056020526000908152604090205481565b6104676105e33660046145fc565b6114c0565b6104676105f63660046145d0565b611552565b6103e8600b5481565b6006546001600160a01b03165b6040516001600160a01b0390911681526020016103b3565b61046761063736600461470a565b611614565b6103a66116d7565b6104676106523660046145fc565b6116e4565b61046761066536600461470a565b611792565b6103e87fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61046761069f36600461470a565b611918565b6104676106b23660046145fc565b611b1b565b6103cf6106c53660046145d0565b611bc9565b610467611bd6565b600a546103cf9060ff1681565b6104676106ed3660046145fc565b611c71565b6103e8611c7e565b6103e860095481565b6104676107113660046146b3565b611cbd565b600854610611906001600160a01b031681565b6103e8611fc0565b61046761073f36600461470a565b612315565b6106117f000000000000000000000000000000000000000000000000000000000000000081565b61046761077936600461470a565b6123cf565b61046761078c366004614760565b612492565b600754610611906001600160a01b031681565b6103e86107b2366004614727565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103e86107eb3660046145fc565b6125a5565b6106116107fe3660046145fc565b6125ec565b6103e86108113660046145fc565b612616565b6103e861264d565b61046761082c36600461470a565b6126ed565b600e54610611906001600160a01b031681565b6106117f000000000000000000000000000000000000000000000000000000000000000081565b61046761281f565b60008054610880906147ce565b80601f01602080910402602001604051908101604052809291908181526020018280546108ac906147ce565b80156108f95780601f106108ce576101008083540402835291602001916108f9565b820191906000526020600020905b8154815290600101906020018083116108dc57829003601f168201915b505050505081565b600061090e33848461287a565b50600192915050565b600061092282612988565b92915050565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061096257506000198114155b156109d85760006109738583614818565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6109e38686866129a2565b6001925050505b9392505050565b60006109fc82612616565b905060008111610a795760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a3a576974686472617720616d6f756e7420746f60448201527f6f206c6f7700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000610a8482612ac6565b90506000610a9183612988565b9050610ad233610aa18385614818565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612ae5565b610adc3385612b65565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610b218282612bf9565b5050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610bca57600080fd5b505af1158015610bde573d6000803e3d6000fd5b50505050610bec3386612bf9565b5050505050565b6006546001600160a01b03163314610c4d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600a5460ff1615610c5d57600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a1565b60108181548110610cb357600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039283169450908216926001600160d81b0316911684565b6006546001600160a01b03163314610d4e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd9919061482f565b90506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e66919061482f565b905082610e738383614818565b1015610f0d5760405162461bcd60e51b815260206004820152604260248201527f4261736553747261746567793a3a456d657267656e637920776974686472617760448201527f206d696e696d756d2072657475726e20616d6f756e74206e6f7420726561636860648201527f6564000000000000000000000000000000000000000000000000000000000000608482015260a401610a70565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234610f37600f5490565b6002546040805192835260208301919091520160405180910390a1600a5460ff161515600103610f6957610f69611bd6565b505050565b6007546001600160a01b03163314610fbf5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b600080610fcd858585612df1565b915091508061102f5760405162461bcd60e51b815260206004820152602860248201527f4d656d655275736853747261746567793a3a53747265616d206e6f7420636f6e604482015267666967757265642160c01b6064820152608401610a70565b611037612ed5565b6010805461104790600190614818565b8154811061105757611057614848565b90600052602060002090600402016010838154811061107857611078614848565b60009182526020909120825460049092020180546001600160a01b03199081166001600160a01b039384161782556001808501549083018054831691851691909117905560028085015490830180547fffffffffff000000000000000000000000000000000000000000000000000000166001600160d81b039092169190911790556003938401549390910180549091169290911691909117905560108054806111245761112461485e565b6000828152602090819020600460001990930183810290910180546001600160a01b03199081168255600182018054821690556002820180547fffffffffff000000000000000000000000000000000000000000000000000000169055600390910180549091169055909255604080517ffc0c546a00000000000000000000000000000000000000000000000000000000815290517ff3152af0022d4b208d9ecbd314ca66f3764d16e822c9880c7d370a6330021ac7938993899389936001600160a01b0387169363fc0c546a93838101939192918290030181865afa158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190614874565b604080516001600160a01b03958616815293851660208501526001600160d81b03909216918301919091529190911660608201526080015b60405180910390a15050505050565b6006546001600160a01b031633146112d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b0316331461137b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6000811161138857600080fd5b604051339082156108fc029083906000818181858888f193505050501580156113b5573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a150565b6007546001600160a01b031633146114445760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b79190614891565b610b2157600080fd5b6007546001600160a01b031633146115115760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b6006546001600160a01b031633146115ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600081116115b957600080fd5b6115cd6001600160a01b0383163383612ae5565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b0316331461166e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600754604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610880906147ce565b6007546001600160a01b031633146117355760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b612710600b548261174691906148b3565b111561175157600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b031633146117e35760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b6000805b600d5481101561183a57600d818154811061180457611804614848565b6000918252602090912001546001600160a01b039081169084160361182857600191505b80611832816148cb565b9150506117e7565b50801561189a5760405162461bcd60e51b815260206004820152602860248201527f4261736553747261746567793a3a52657761726420616c726561647920636f6e604482015267666967757265642160c01b6064820152608401610a70565b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384169081179091556040519081527f1714865bf5baa84e3439536a013c87cfe030b4cd69f344a5f2a4877de3d517ce90602001611608565b6007546001600160a01b031633146119695760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b6000805b600d54811015611a3957600d818154811061198a5761198a614848565b6000918252602090912001546001600160a01b0390811690841603611a2757600d8054600193506119bc908490614818565b815481106119cc576119cc614848565b600091825260209091200154600d80546001600160a01b0390921691839081106119f8576119f8614848565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80611a31816148cb565b91505061196d565b5080611aac5760405162461bcd60e51b8152602060048201526024808201527f4261736553747261746567793a3a526577617264206e6f7420636f6e6669677560448201527f72656421000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600d805480611abd57611abd61485e565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03841681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc9101611608565b6007546001600160a01b03163314611b6c5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b612710600c5482611b7d91906148b3565b1115611b8857600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b600061090e3384846129a2565b6007546001600160a01b03163314611c275760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b600a5460ff16611c3657600080fd5b600a805460ff19169055604051600081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590602001610c99565b611c7b3382612bf9565b50565b600080611c89611fc0565b90506009548110611cb557612710600b5482611ca591906148e4565b611caf9190614903565b91505090565b600091505090565b6007546001600160a01b03163314611d0e5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b6001600160a01b03831615801590611d2e57506001600160a01b03821615155b8015611d4357506000816001600160d81b0316115b15610f69576000611d55848484612df1565b9150508015611dcc5760405162461bcd60e51b815260206004820152602c60248201527f4d656d655275736853747261746567793a3a53747265616d20616c726561647960448201527f20636f6e666967757265642100000000000000000000000000000000000000006064820152608401610a70565b6000846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190614874565b60408051608080820183526001600160a01b0389811680845289821660208086018281526001600160d81b038c8116888a018181528b88166060808c01828152601080546001810182556000919091529c517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6726004909e029d8e0180546001600160a01b0319908116928e1692909217905596517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6738e0180548916918d1691909117905592517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6748d0180547fffffffffff00000000000000000000000000000000000000000000000000000016919096161790945590517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae675909a018054909416999097169890981790915587519384529083019190915294810193909352928201929092529192507ff7568797d3c3a8683cc15f72610e4377cd2a50c535e7e237ee1da95f589d7cb6910161126e565b600080611fcb613017565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612059919061482f565b905060005b825181101561230e57600083828151811061207b5761207b614848565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036120f157478483815181106120d5576120d5614848565b60200260200101516020018181516120ed91906148b3565b9052505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03160361215a5783828151811061213c5761213c614848565b6020026020010151602001518361215391906148b3565b92506122fb565b6001600160a01b038116156122fb576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156121b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d4919061482f565b905060008584815181106121ea576121ea614848565b6020026020010151602001518261220191906148b3565b905080156122f857600e546040516377ccc49d60e11b8152600481018390526001600160a01b0385811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015612283573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122ab9190810190614a2d565b90506001816000015151116122c15760006122ea565b805180516122d190600190614818565b815181106122e1576122e1614848565b60200260200101515b6122f490876148b3565b9550505b50505b5080612306816148cb565b91505061205e565b5092915050565b6007546001600160a01b031633146123665760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b600e54604080516001600160a01b03928316815291831660208301527f2c6fb4d5ff9fad6ecf2e09cd64cbc9aad92a8b9d2cc0e5c3ddef9b529b0b5ffd910160405180910390a1600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146124295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600854604080516001600160a01b03928316815291831660208301527fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b428410156124e25760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610a70565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661252f836148cb565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050612590888286868661323f565b61259b88888861287a565b5050505050505050565b6000806125b1600f5490565b6002549091508015806125c2575081155b156125cf57509192915050565b816125da82866148e4565b6125e49190614903565b949350505050565b600d81815481106125fc57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080612622600f5490565b600254909150801580612633575081155b15612642575060009392505050565b806125da83866148e4565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516126829190614b42565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146127475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6001600160a01b0381166127c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a70565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b32331461286e5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610a70565b612878600061339f565b565b6001600160a01b0383166128d05760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610a70565b6001600160a01b0382166129265760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610a70565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008061271061299882856148e4565b6109ea9190614903565b6001600160a01b038216612a1e5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610a70565b6001600160a01b038316600090815260046020526040902054612a42908290614818565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612a729082906148b3565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061297b9085815260200190565b600081600f6000828254612ada9190614818565b909155509192915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f69908490613500565b6001600160a01b038216600090815260046020526040902054612b89908290614818565b6001600160a01b038316600090815260046020526040902055600254612bb0908290614818565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600a5460ff161515600114612c505760405162461bcd60e51b815260206004820152601f60248201527f4261736553747261746567793a3a4465706f736974732064697361626c6564006044820152606401610a70565b612c5a600161339f565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015612ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0a9190614891565b612d7c5760405162461bcd60e51b815260206004820152602b60248201527f4261736553747261746567793a3a4465706f73697420746f6b656e207472616e60448201527f73666572206661696c65640000000000000000000000000000000000000000006064820152608401610a70565b6000612d8782612988565b9050612d9f83612d9a6107eb8486614818565b6135e5565b612da982826136bb565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051612de491815260200190565b60405180910390a2505050565b60008060005b601054811015612ecc5760108181548110612e1457612e14614848565b60009182526020909120600490910201546001600160a01b038781169116148015612e70575060108181548110612e4d57612e4d614848565b60009182526020909120600160049092020101546001600160a01b038681169116145b8015612ead575060108181548110612e8a57612e8a614848565b60009182526020909120600260049092020101546001600160d81b038581169116145b15612eba57600191508092505b80612ec4816148cb565b915050612df7565b50935093915050565b60005b601054811015611c7b5760108181548110612ef557612ef5614848565b6000918252602090912060049091020154601080546001600160a01b03909216916317a566e4919084908110612f2d57612f2d614848565b906000526020600020906004020160010160009054906101000a90046001600160a01b03163060108581548110612f6657612f66614848565b600091825260209091206004918202016002015460405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03948516928101929092529190921660248301526001600160d81b03166044820152606401600060405180830381600087803b158015612fec57600080fd5b505af1158015613000573d6000803e3d6000fd5b50505050808061300f906148cb565b915050612ed8565b60105460609060009067ffffffffffffffff81111561303857613038614925565b60405190808252806020026020018201604052801561307d57816020015b60408051808201909152600080825260208201528152602001906001900390816130565790505b50905060005b601054811015613239576000601082815481106130a2576130a2614848565b6000918252602090912060049091020154601080546001600160a01b0390921691633f053acd9190859081106130da576130da614848565b906000526020600020906004020160010160009054906101000a90046001600160a01b0316306010868154811061311357613113614848565b600091825260209091206004918202016002015460405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03948516928101929092529190921660248301526001600160d81b03166044820152606401606060405180830381865afa15801561319c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c09190614bdd565b505090506040518060400160405280601084815481106131e2576131e2614848565b6000918252602091829020600360049092020101546001600160a01b0316825201829052835184908490811061321a5761321a614848565b6020026020010181905250508080613231906148cb565b915050613083565b50919050565b600061324961264d565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156132ef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906133255750866001600160a01b0316816001600160a01b0316145b6133965760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610a70565b50505050505050565b60006133a961373b565b90506009548111156134be576000612710600c54836133c891906148e4565b6133d29190614903565b9050801561341457600854613414906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612ae5565b60008361343b57612710600b548461342c91906148e4565b6134369190614903565b61343e565b60005b9050801561347a5761347a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612ae5565b60006134998261348a8587614818565b6134949190614818565b613aad565b905080156134ba5760006134ac82612988565b90506134b882826136bb565b505b5050505b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346134e8600f5490565b60025460408051928352602083019190915201611608565b6000613555826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661404d9092919063ffffffff16565b805190915015610f6957808060200190518101906135739190614891565b610f695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a70565b600081116136355760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610a70565b8060025461364391906148b3565b6002556001600160a01b03821660009081526004602052604090205461366a9082906148b3565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612bed9085815260200190565b600082116137315760405162461bcd60e51b815260206004820152602260248201527f4261736553747261746567793a3a5374616b6520616d6f756e7420746f6f206c60448201527f6f770000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b610b21828261405c565b6000613745612ed5565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156137ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d0919061482f565b600d5490915060005b81811015613aa5576000600d82815481106137f6576137f6614848565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613921574780156138b3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561389957600080fd5b505af11580156138ad573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160361391f5761391681866148b3565b94505050613a93565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398c919061482f565b90506000811180156139d057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15613a9057600e546040516377ccc49d60e11b8152600481018390526001600160a01b0384811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613a4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a779190810190614a2d565b9050613a8281614077565b613a8c90876148b3565b9550505b50505b80613a9d816148cb565b9150506137d9565b509092915050565b6000613aba600283614903565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613ce757600e546040516377ccc49d60e11b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613baf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613bd79190810190614a2d565b600e5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529192507f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015613c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c709190614891565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b24661690613ca1908490600401614c4f565b6020604051808303816000875af1158015613cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce4919061482f565b50505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613f1257600e546040516377ccc49d60e11b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613dda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e029190810190614a2d565b600e5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529192507f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015613e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9b9190614891565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b24661690613ecc908490600401614c4f565b6020604051808303816000875af1158015613eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0f919061482f565b50505b6040516370a0823160e01b8152306004820152610922907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015613f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc0919061482f565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015614024573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614048919061482f565b61420b565b60606125e484846000856143d5565b81600f600082825461406e91906148b3565b90915550505050565b805151600090158015906140b45750815180516000919061409a90600190614818565b815181106140aa576140aa614848565b6020026020010151115b156142035781604001516000815181106140d0576140d0614848565b60200260200101516001600160a01b031663095ea7b3600e60009054906101000a90046001600160a01b0316846000015160008151811061411357614113614848565b60200260200101516040518363ffffffff1660e01b815260040161414c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561416b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061418f9190614891565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b246616906141c0908590600401614c4f565b6020604051808303816000875af11580156141df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610922919061482f565b506000919050565b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561424e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142729190614d07565b509150915060006142a486846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16614512565b9050848111156142df578490506142dc85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16614512565b95505b6143136001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168888612ae5565b6143476001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883612ae5565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03881690636a627842906024016020604051808303816000875af11580156143a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ca919061482f565b979650505050505050565b60608247101561444d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b0385163b6144a45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a70565b600080866001600160a01b031685876040516144c09190614d4c565b60006040518083038185875af1925050503d80600081146144fd576040519150601f19603f3d011682016040523d82523d6000602084013e614502565b606091505b50915091506143ca82828661451f565b6000826125da83866148e4565b6060831561452e5750816109ea565b82511561453e5782518084602001fd5b8160405162461bcd60e51b8152600401610a709190614588565b60005b8381101561457357818101518382015260200161455b565b83811115614582576000848401525b50505050565b60208152600082518060208401526145a7816040850160208701614558565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611c7b57600080fd5b600080604083850312156145e357600080fd5b82356145ee816145bb565b946020939093013593505050565b60006020828403121561460e57600080fd5b5035919050565b60008060006060848603121561462a57600080fd5b8335614635816145bb565b92506020840135614645816145bb565b929592945050506040919091013590565b803560ff8116811461466757600080fd5b919050565b600080600080600060a0868803121561468457600080fd5b853594506020860135935061469b60408701614656565b94979396509394606081013594506080013592915050565b6000806000606084860312156146c857600080fd5b83356146d3816145bb565b925060208401356146e3816145bb565b915060408401356001600160d81b03811681146146ff57600080fd5b809150509250925092565b60006020828403121561471c57600080fd5b81356109ea816145bb565b6000806040838503121561473a57600080fd5b8235614745816145bb565b91506020830135614755816145bb565b809150509250929050565b600080600080600080600060e0888a03121561477b57600080fd5b8735614786816145bb565b96506020880135614796816145bb565b955060408801359450606088013593506147b260808901614656565b925060a0880135915060c0880135905092959891949750929550565b600181811c908216806147e257607f821691505b60208210810361323957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561482a5761482a614802565b500390565b60006020828403121561484157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561488657600080fd5b81516109ea816145bb565b6000602082840312156148a357600080fd5b815180151581146109ea57600080fd5b600082198211156148c6576148c6614802565b500190565b6000600182016148dd576148dd614802565b5060010190565b60008160001904831182151516156148fe576148fe614802565b500290565b60008261492057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561495e5761495e614925565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561498d5761498d614925565b604052919050565b600067ffffffffffffffff8211156149af576149af614925565b5060051b60200190565b600082601f8301126149ca57600080fd5b815160206149df6149da83614995565b614964565b82815260059290921b840181019181810190868411156149fe57600080fd5b8286015b84811015614a22578051614a15816145bb565b8352918301918301614a02565b509695505050505050565b60006020808385031215614a4057600080fd5b825167ffffffffffffffff80821115614a5857600080fd5b9084019060808287031215614a6c57600080fd5b614a7461493b565b825182811115614a8357600080fd5b8301601f81018813614a9457600080fd5b8051614aa26149da82614995565b81815260059190911b8201860190868101908a831115614ac157600080fd5b928701925b82841015614adf57835182529287019290870190614ac6565b84525050508284015182811115614af557600080fd5b614b01888286016149b9565b85830152506040830151935081841115614b1a57600080fd5b614b26878585016149b9565b6040820152606083015160608201528094505050505092915050565b600080835481600182811c915080831680614b5e57607f831692505b60208084108203614b7d57634e487b7160e01b86526022600452602486fd5b818015614b915760018114614ba257614bcf565b60ff19861689528489019650614bcf565b60008a81526020902060005b86811015614bc75781548b820152908501908301614bae565b505084890196505b509498975050505050505050565b600080600060608486031215614bf257600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b83811015614c445781516001600160a01b031687529582019590820190600101614c1f565b509495945050505050565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015614c945783518252928401926001929092019190840190614c74565b50838701519350601f19925082868203016040870152614cb48185614c0b565b93505050604085015181858403016060860152614cd18382614c0b565b92505050606084015160808401528091505092915050565b80516dffffffffffffffffffffffffffff8116811461466757600080fd5b600080600060608486031215614d1c57600080fd5b614d2584614ce9565b9250614d3360208501614ce9565b9150604084015163ffffffff811681146146ff57600080fd5b60008251614d5e818460208701614558565b919091019291505056fea26469706673582212204d43c4f7bb2d1b7ed7cb9fcd58d30bb3b6d13d7e64aeaa2f83800741a5ea7dd264736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103995760003560e01c80639291d563116101e9578063c4b24a461161010f578063dd8ce4d6116100ad578063f2fde38b1161007c578063f2fde38b1461081e578063f6314d0714610831578063f7c618c114610844578063fdb5a03e1461086b57600080fd5b8063dd8ce4d6146107dd578063e75ab045146107f0578063eab89a5a14610803578063ed24911d1461081657600080fd5b8063d2c35ce8116100e9578063d2c35ce81461076b578063d505accf1461077e578063da09c72c14610791578063dd62ed3e146107a457600080fd5b8063c4b24a4614610729578063c851cc3214610731578063c89039c51461074457600080fd5b8063a9059cbb11610187578063b9e57b8011610156578063b9e57b80146106f2578063bd079f55146106fa578063bec67bd614610703578063c415b95c1461071657600080fd5b8063a9059cbb146106b7578063ac67e1af146106ca578063b52a321f146106d2578063b6b55f25146106df57600080fd5b80639c9b2e21116101c35780639c9b2e21146106575780639e4e73181461066a578063a4d5e67c14610691578063a8ae2b7c146106a457600080fd5b80639291d5631461062957806395d89b411461063c57806399729ec11461064457600080fd5b80635e4c57a4116102ce5780637897e7f61161026c578063818372301161023b57806381837230146105d55780638980f11f146105e85780638aff733d146105fb5780638da5cb5b1461060457600080fd5b80637897e7f6146105875780637ae267731461059a5780637d882097146105ad5780637ecebe00146105b557600080fd5b8063666d25b9116102a8578063666d25b9146105305780636a8b25331461054357806370a0823114610556578063715018a61461057f57600080fd5b80635e4c57a4146104d05780635ea682ea146104d857806364d60d91146104e157600080fd5b8063247d284b1161033b5780632f4f21e2116103155780632f4f21e21461046957806330adf81f1461047c578063313ce567146104a35780634a970be7146104bd57600080fd5b8063247d284b146103f6578063258250da1461044c5780632e1a7d4d1461045457600080fd5b8063110560351161037757806311056035146103f657806318160ddd1461040957806320606b701461041257806323b872dd1461043957600080fd5b806306fdde031461039e578063095ea7b3146103bc5780630b76619b146103df575b600080fd5b6103a6610873565b6040516103b39190614588565b60405180910390f35b6103cf6103ca3660046145d0565b610901565b60405190151581526020016103b3565b6103e8600f5481565b6040519081526020016103b3565b6103e86104043660046145fc565b610917565b6103e860025481565b6103e87f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103cf610447366004614615565b610928565b600d546103e8565b6104676104623660046145fc565b6109f1565b005b6104676104773660046145d0565b610b17565b6103e87f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6104ab601281565b60405160ff90911681526020016103b3565b6104676104cb36600461466c565b610b25565b610467610bf3565b6103e8600c5481565b6104f46104ef3660046145fc565b610ca3565b604080516001600160a01b03958616815293851660208501526001600160d81b03909216918301919091529190911660608201526080016103b3565b61046761053e3660046145fc565b610cf4565b6104676105513660046146b3565b610f6e565b6103e861056436600461470a565b6001600160a01b031660009081526004602052604090205490565b61046761127d565b6104676105953660046145fc565b611321565b6104676105a8366004614727565b6113f3565b600f546103e8565b6103e86105c336600461470a565b60056020526000908152604090205481565b6104676105e33660046145fc565b6114c0565b6104676105f63660046145d0565b611552565b6103e8600b5481565b6006546001600160a01b03165b6040516001600160a01b0390911681526020016103b3565b61046761063736600461470a565b611614565b6103a66116d7565b6104676106523660046145fc565b6116e4565b61046761066536600461470a565b611792565b6103e87fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61046761069f36600461470a565b611918565b6104676106b23660046145fc565b611b1b565b6103cf6106c53660046145d0565b611bc9565b610467611bd6565b600a546103cf9060ff1681565b6104676106ed3660046145fc565b611c71565b6103e8611c7e565b6103e860095481565b6104676107113660046146b3565b611cbd565b600854610611906001600160a01b031681565b6103e8611fc0565b61046761073f36600461470a565b612315565b6106117f000000000000000000000000000000000000000000000000000000000000000081565b61046761077936600461470a565b6123cf565b61046761078c366004614760565b612492565b600754610611906001600160a01b031681565b6103e86107b2366004614727565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103e86107eb3660046145fc565b6125a5565b6106116107fe3660046145fc565b6125ec565b6103e86108113660046145fc565b612616565b6103e861264d565b61046761082c36600461470a565b6126ed565b600e54610611906001600160a01b031681565b6106117f000000000000000000000000000000000000000000000000000000000000000081565b61046761281f565b60008054610880906147ce565b80601f01602080910402602001604051908101604052809291908181526020018280546108ac906147ce565b80156108f95780601f106108ce576101008083540402835291602001916108f9565b820191906000526020600020905b8154815290600101906020018083116108dc57829003601f168201915b505050505081565b600061090e33848461287a565b50600192915050565b600061092282612988565b92915050565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061096257506000198114155b156109d85760006109738583614818565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6109e38686866129a2565b6001925050505b9392505050565b60006109fc82612616565b905060008111610a795760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a3a576974686472617720616d6f756e7420746f60448201527f6f206c6f7700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000610a8482612ac6565b90506000610a9183612988565b9050610ad233610aa18385614818565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612ae5565b610adc3385612b65565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610b218282612bf9565b5050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610bca57600080fd5b505af1158015610bde573d6000803e3d6000fd5b50505050610bec3386612bf9565b5050505050565b6006546001600160a01b03163314610c4d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600a5460ff1615610c5d57600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a1565b60108181548110610cb357600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039283169450908216926001600160d81b0316911684565b6006546001600160a01b03163314610d4e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd9919061482f565b90506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e66919061482f565b905082610e738383614818565b1015610f0d5760405162461bcd60e51b815260206004820152604260248201527f4261736553747261746567793a3a456d657267656e637920776974686472617760448201527f206d696e696d756d2072657475726e20616d6f756e74206e6f7420726561636860648201527f6564000000000000000000000000000000000000000000000000000000000000608482015260a401610a70565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234610f37600f5490565b6002546040805192835260208301919091520160405180910390a1600a5460ff161515600103610f6957610f69611bd6565b505050565b6007546001600160a01b03163314610fbf5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b600080610fcd858585612df1565b915091508061102f5760405162461bcd60e51b815260206004820152602860248201527f4d656d655275736853747261746567793a3a53747265616d206e6f7420636f6e604482015267666967757265642160c01b6064820152608401610a70565b611037612ed5565b6010805461104790600190614818565b8154811061105757611057614848565b90600052602060002090600402016010838154811061107857611078614848565b60009182526020909120825460049092020180546001600160a01b03199081166001600160a01b039384161782556001808501549083018054831691851691909117905560028085015490830180547fffffffffff000000000000000000000000000000000000000000000000000000166001600160d81b039092169190911790556003938401549390910180549091169290911691909117905560108054806111245761112461485e565b6000828152602090819020600460001990930183810290910180546001600160a01b03199081168255600182018054821690556002820180547fffffffffff000000000000000000000000000000000000000000000000000000169055600390910180549091169055909255604080517ffc0c546a00000000000000000000000000000000000000000000000000000000815290517ff3152af0022d4b208d9ecbd314ca66f3764d16e822c9880c7d370a6330021ac7938993899389936001600160a01b0387169363fc0c546a93838101939192918290030181865afa158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190614874565b604080516001600160a01b03958616815293851660208501526001600160d81b03909216918301919091529190911660608201526080015b60405180910390a15050505050565b6006546001600160a01b031633146112d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b0316331461137b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6000811161138857600080fd5b604051339082156108fc029083906000818181858888f193505050501580156113b5573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a150565b6007546001600160a01b031633146114445760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b79190614891565b610b2157600080fd5b6007546001600160a01b031633146115115760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b6006546001600160a01b031633146115ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600081116115b957600080fd5b6115cd6001600160a01b0383163383612ae5565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b0316331461166e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600754604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610880906147ce565b6007546001600160a01b031633146117355760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b612710600b548261174691906148b3565b111561175157600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b031633146117e35760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b6000805b600d5481101561183a57600d818154811061180457611804614848565b6000918252602090912001546001600160a01b039081169084160361182857600191505b80611832816148cb565b9150506117e7565b50801561189a5760405162461bcd60e51b815260206004820152602860248201527f4261736553747261746567793a3a52657761726420616c726561647920636f6e604482015267666967757265642160c01b6064820152608401610a70565b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384169081179091556040519081527f1714865bf5baa84e3439536a013c87cfe030b4cd69f344a5f2a4877de3d517ce90602001611608565b6007546001600160a01b031633146119695760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b6000805b600d54811015611a3957600d818154811061198a5761198a614848565b6000918252602090912001546001600160a01b0390811690841603611a2757600d8054600193506119bc908490614818565b815481106119cc576119cc614848565b600091825260209091200154600d80546001600160a01b0390921691839081106119f8576119f8614848565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80611a31816148cb565b91505061196d565b5080611aac5760405162461bcd60e51b8152602060048201526024808201527f4261736553747261746567793a3a526577617264206e6f7420636f6e6669677560448201527f72656421000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600d805480611abd57611abd61485e565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03841681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc9101611608565b6007546001600160a01b03163314611b6c5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b612710600c5482611b7d91906148b3565b1115611b8857600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b600061090e3384846129a2565b6007546001600160a01b03163314611c275760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b600a5460ff16611c3657600080fd5b600a805460ff19169055604051600081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590602001610c99565b611c7b3382612bf9565b50565b600080611c89611fc0565b90506009548110611cb557612710600b5482611ca591906148e4565b611caf9190614903565b91505090565b600091505090565b6007546001600160a01b03163314611d0e5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b6001600160a01b03831615801590611d2e57506001600160a01b03821615155b8015611d4357506000816001600160d81b0316115b15610f69576000611d55848484612df1565b9150508015611dcc5760405162461bcd60e51b815260206004820152602c60248201527f4d656d655275736853747261746567793a3a53747265616d20616c726561647960448201527f20636f6e666967757265642100000000000000000000000000000000000000006064820152608401610a70565b6000846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190614874565b60408051608080820183526001600160a01b0389811680845289821660208086018281526001600160d81b038c8116888a018181528b88166060808c01828152601080546001810182556000919091529c517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6726004909e029d8e0180546001600160a01b0319908116928e1692909217905596517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6738e0180548916918d1691909117905592517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6748d0180547fffffffffff00000000000000000000000000000000000000000000000000000016919096161790945590517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae675909a018054909416999097169890981790915587519384529083019190915294810193909352928201929092529192507ff7568797d3c3a8683cc15f72610e4377cd2a50c535e7e237ee1da95f589d7cb6910161126e565b600080611fcb613017565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612059919061482f565b905060005b825181101561230e57600083828151811061207b5761207b614848565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036120f157478483815181106120d5576120d5614848565b60200260200101516020018181516120ed91906148b3565b9052505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03160361215a5783828151811061213c5761213c614848565b6020026020010151602001518361215391906148b3565b92506122fb565b6001600160a01b038116156122fb576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156121b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d4919061482f565b905060008584815181106121ea576121ea614848565b6020026020010151602001518261220191906148b3565b905080156122f857600e546040516377ccc49d60e11b8152600481018390526001600160a01b0385811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015612283573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122ab9190810190614a2d565b90506001816000015151116122c15760006122ea565b805180516122d190600190614818565b815181106122e1576122e1614848565b60200260200101515b6122f490876148b3565b9550505b50505b5080612306816148cb565b91505061205e565b5092915050565b6007546001600160a01b031633146123665760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610a70565b600e54604080516001600160a01b03928316815291831660208301527f2c6fb4d5ff9fad6ecf2e09cd64cbc9aad92a8b9d2cc0e5c3ddef9b529b0b5ffd910160405180910390a1600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146124295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b600854604080516001600160a01b03928316815291831660208301527fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b428410156124e25760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610a70565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661252f836148cb565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050612590888286868661323f565b61259b88888861287a565b5050505050505050565b6000806125b1600f5490565b6002549091508015806125c2575081155b156125cf57509192915050565b816125da82866148e4565b6125e49190614903565b949350505050565b600d81815481106125fc57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080612622600f5490565b600254909150801580612633575081155b15612642575060009392505050565b806125da83866148e4565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516126829190614b42565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146127475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a70565b6001600160a01b0381166127c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a70565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b32331461286e5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610a70565b612878600061339f565b565b6001600160a01b0383166128d05760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610a70565b6001600160a01b0382166129265760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610a70565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008061271061299882856148e4565b6109ea9190614903565b6001600160a01b038216612a1e5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610a70565b6001600160a01b038316600090815260046020526040902054612a42908290614818565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612a729082906148b3565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061297b9085815260200190565b600081600f6000828254612ada9190614818565b909155509192915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f69908490613500565b6001600160a01b038216600090815260046020526040902054612b89908290614818565b6001600160a01b038316600090815260046020526040902055600254612bb0908290614818565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600a5460ff161515600114612c505760405162461bcd60e51b815260206004820152601f60248201527f4261736553747261746567793a3a4465706f736974732064697361626c6564006044820152606401610a70565b612c5a600161339f565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015612ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0a9190614891565b612d7c5760405162461bcd60e51b815260206004820152602b60248201527f4261736553747261746567793a3a4465706f73697420746f6b656e207472616e60448201527f73666572206661696c65640000000000000000000000000000000000000000006064820152608401610a70565b6000612d8782612988565b9050612d9f83612d9a6107eb8486614818565b6135e5565b612da982826136bb565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051612de491815260200190565b60405180910390a2505050565b60008060005b601054811015612ecc5760108181548110612e1457612e14614848565b60009182526020909120600490910201546001600160a01b038781169116148015612e70575060108181548110612e4d57612e4d614848565b60009182526020909120600160049092020101546001600160a01b038681169116145b8015612ead575060108181548110612e8a57612e8a614848565b60009182526020909120600260049092020101546001600160d81b038581169116145b15612eba57600191508092505b80612ec4816148cb565b915050612df7565b50935093915050565b60005b601054811015611c7b5760108181548110612ef557612ef5614848565b6000918252602090912060049091020154601080546001600160a01b03909216916317a566e4919084908110612f2d57612f2d614848565b906000526020600020906004020160010160009054906101000a90046001600160a01b03163060108581548110612f6657612f66614848565b600091825260209091206004918202016002015460405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03948516928101929092529190921660248301526001600160d81b03166044820152606401600060405180830381600087803b158015612fec57600080fd5b505af1158015613000573d6000803e3d6000fd5b50505050808061300f906148cb565b915050612ed8565b60105460609060009067ffffffffffffffff81111561303857613038614925565b60405190808252806020026020018201604052801561307d57816020015b60408051808201909152600080825260208201528152602001906001900390816130565790505b50905060005b601054811015613239576000601082815481106130a2576130a2614848565b6000918252602090912060049091020154601080546001600160a01b0390921691633f053acd9190859081106130da576130da614848565b906000526020600020906004020160010160009054906101000a90046001600160a01b0316306010868154811061311357613113614848565b600091825260209091206004918202016002015460405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03948516928101929092529190921660248301526001600160d81b03166044820152606401606060405180830381865afa15801561319c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c09190614bdd565b505090506040518060400160405280601084815481106131e2576131e2614848565b6000918252602091829020600360049092020101546001600160a01b0316825201829052835184908490811061321a5761321a614848565b6020026020010181905250508080613231906148cb565b915050613083565b50919050565b600061324961264d565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156132ef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906133255750866001600160a01b0316816001600160a01b0316145b6133965760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610a70565b50505050505050565b60006133a961373b565b90506009548111156134be576000612710600c54836133c891906148e4565b6133d29190614903565b9050801561341457600854613414906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612ae5565b60008361343b57612710600b548461342c91906148e4565b6134369190614903565b61343e565b60005b9050801561347a5761347a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612ae5565b60006134998261348a8587614818565b6134949190614818565b613aad565b905080156134ba5760006134ac82612988565b90506134b882826136bb565b505b5050505b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346134e8600f5490565b60025460408051928352602083019190915201611608565b6000613555826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661404d9092919063ffffffff16565b805190915015610f6957808060200190518101906135739190614891565b610f695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a70565b600081116136355760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610a70565b8060025461364391906148b3565b6002556001600160a01b03821660009081526004602052604090205461366a9082906148b3565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612bed9085815260200190565b600082116137315760405162461bcd60e51b815260206004820152602260248201527f4261736553747261746567793a3a5374616b6520616d6f756e7420746f6f206c60448201527f6f770000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b610b21828261405c565b6000613745612ed5565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156137ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d0919061482f565b600d5490915060005b81811015613aa5576000600d82815481106137f6576137f6614848565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613921574780156138b3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561389957600080fd5b505af11580156138ad573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160361391f5761391681866148b3565b94505050613a93565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398c919061482f565b90506000811180156139d057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15613a9057600e546040516377ccc49d60e11b8152600481018390526001600160a01b0384811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613a4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a779190810190614a2d565b9050613a8281614077565b613a8c90876148b3565b9550505b50505b80613a9d816148cb565b9150506137d9565b509092915050565b6000613aba600283614903565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613ce757600e546040516377ccc49d60e11b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613baf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613bd79190810190614a2d565b600e5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529192507f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015613c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c709190614891565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b24661690613ca1908490600401614c4f565b6020604051808303816000875af1158015613cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce4919061482f565b50505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613f1257600e546040516377ccc49d60e11b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613dda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e029190810190614a2d565b600e5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529192507f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015613e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9b9190614891565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b24661690613ecc908490600401614c4f565b6020604051808303816000875af1158015613eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0f919061482f565b50505b6040516370a0823160e01b8152306004820152610922907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015613f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc0919061482f565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015614024573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614048919061482f565b61420b565b60606125e484846000856143d5565b81600f600082825461406e91906148b3565b90915550505050565b805151600090158015906140b45750815180516000919061409a90600190614818565b815181106140aa576140aa614848565b6020026020010151115b156142035781604001516000815181106140d0576140d0614848565b60200260200101516001600160a01b031663095ea7b3600e60009054906101000a90046001600160a01b0316846000015160008151811061411357614113614848565b60200260200101516040518363ffffffff1660e01b815260040161414c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561416b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061418f9190614891565b50600e54604051632d92330b60e11b81526001600160a01b0390911690635b246616906141c0908590600401614c4f565b6020604051808303816000875af11580156141df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610922919061482f565b506000919050565b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561424e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142729190614d07565b509150915060006142a486846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16614512565b9050848111156142df578490506142dc85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16614512565b95505b6143136001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168888612ae5565b6143476001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883612ae5565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03881690636a627842906024016020604051808303816000875af11580156143a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ca919061482f565b979650505050505050565b60608247101561444d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b0385163b6144a45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a70565b600080866001600160a01b031685876040516144c09190614d4c565b60006040518083038185875af1925050503d80600081146144fd576040519150601f19603f3d011682016040523d82523d6000602084013e614502565b606091505b50915091506143ca82828661451f565b6000826125da83866148e4565b6060831561452e5750816109ea565b82511561453e5782518084602001fd5b8160405162461bcd60e51b8152600401610a709190614588565b60005b8381101561457357818101518382015260200161455b565b83811115614582576000848401525b50505050565b60208152600082518060208401526145a7816040850160208701614558565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611c7b57600080fd5b600080604083850312156145e357600080fd5b82356145ee816145bb565b946020939093013593505050565b60006020828403121561460e57600080fd5b5035919050565b60008060006060848603121561462a57600080fd5b8335614635816145bb565b92506020840135614645816145bb565b929592945050506040919091013590565b803560ff8116811461466757600080fd5b919050565b600080600080600060a0868803121561468457600080fd5b853594506020860135935061469b60408701614656565b94979396509394606081013594506080013592915050565b6000806000606084860312156146c857600080fd5b83356146d3816145bb565b925060208401356146e3816145bb565b915060408401356001600160d81b03811681146146ff57600080fd5b809150509250925092565b60006020828403121561471c57600080fd5b81356109ea816145bb565b6000806040838503121561473a57600080fd5b8235614745816145bb565b91506020830135614755816145bb565b809150509250929050565b600080600080600080600060e0888a03121561477b57600080fd5b8735614786816145bb565b96506020880135614796816145bb565b955060408801359450606088013593506147b260808901614656565b925060a0880135915060c0880135905092959891949750929550565b600181811c908216806147e257607f821691505b60208210810361323957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561482a5761482a614802565b500390565b60006020828403121561484157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561488657600080fd5b81516109ea816145bb565b6000602082840312156148a357600080fd5b815180151581146109ea57600080fd5b600082198211156148c6576148c6614802565b500190565b6000600182016148dd576148dd614802565b5060010190565b60008160001904831182151516156148fe576148fe614802565b500290565b60008261492057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561495e5761495e614925565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561498d5761498d614925565b604052919050565b600067ffffffffffffffff8211156149af576149af614925565b5060051b60200190565b600082601f8301126149ca57600080fd5b815160206149df6149da83614995565b614964565b82815260059290921b840181019181810190868411156149fe57600080fd5b8286015b84811015614a22578051614a15816145bb565b8352918301918301614a02565b509695505050505050565b60006020808385031215614a4057600080fd5b825167ffffffffffffffff80821115614a5857600080fd5b9084019060808287031215614a6c57600080fd5b614a7461493b565b825182811115614a8357600080fd5b8301601f81018813614a9457600080fd5b8051614aa26149da82614995565b81815260059190911b8201860190868101908a831115614ac157600080fd5b928701925b82841015614adf57835182529287019290870190614ac6565b84525050508284015182811115614af557600080fd5b614b01888286016149b9565b85830152506040830151935081841115614b1a57600080fd5b614b26878585016149b9565b6040820152606083015160608201528094505050505092915050565b600080835481600182811c915080831680614b5e57607f831692505b60208084108203614b7d57634e487b7160e01b86526022600452602486fd5b818015614b915760018114614ba257614bcf565b60ff19861689528489019650614bcf565b60008a81526020902060005b86811015614bc75781548b820152908501908301614bae565b505084890196505b509498975050505050505050565b600080600060608486031215614bf257600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b83811015614c445781516001600160a01b031687529582019590820190600101614c1f565b509495945050505050565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015614c945783518252928401926001929092019190840190614c74565b50838701519350601f19925082868203016040870152614cb48185614c0b565b93505050604085015181858403016060860152614cd18382614c0b565b92505050606084015160808401528091505092915050565b80516dffffffffffffffffffffffffffff8116811461466757600080fd5b600080600060608486031215614d1c57600080fd5b614d2584614ce9565b9250614d3360208501614ce9565b9150604084015163ffffffff811681146146ff57600080fd5b60008251614d5e818460208701614558565b919091019291505056fea26469706673582212204d43c4f7bb2d1b7ed7cb9fcd58d30bb3b6d13d7e64aeaa2f83800741a5ea7dd264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "recoverGas(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens available to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "disableDeposits()": {
        "notice": "Disable deposits"
      },
      "enableDeposits()": {
        "notice": "Enable deposits"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "recoverGas(uint256)": {
        "notice": "Recover GAS from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateFeeCollector(address)": {
        "notice": "Update feeCollector"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 13,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 19,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1690,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 552,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "devAddr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 554,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 556,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 558,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 560,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 562,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2292,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2295,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "simpleRouter",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISimpleRouter)1347"
      },
      {
        "astId": 3363,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "staked",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3367,
        "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
        "label": "streams",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_struct(Stream)3357_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stream)3357_storage)dyn_storage": {
        "base": "t_struct(Stream)3357_storage",
        "encoding": "dynamic_array",
        "label": "struct MemeRushStrategy.Stream[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISimpleRouter)1347": {
        "encoding": "inplace",
        "label": "contract ISimpleRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Stream)3357_storage": {
        "encoding": "inplace",
        "label": "struct MemeRushStrategy.Stream",
        "members": [
          {
            "astId": 3350,
            "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
            "label": "lamaPayInstance",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3352,
            "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
            "label": "payer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3354,
            "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
            "label": "amountPerSec",
            "offset": 0,
            "slot": "2",
            "type": "t_uint216"
          },
          {
            "astId": 3356,
            "contract": "contracts/strategies/avalanche/traderjoe/MemeRushStrategy.sol:MemeRushStrategy",
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}