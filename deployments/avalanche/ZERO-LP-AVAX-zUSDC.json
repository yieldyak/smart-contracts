{
  "address": "0x6ea142f55aE733eeaEef5fEA34d4312478c762e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getLPTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForLPTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IStakingRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x836ba75696310aeb604fb1608e1f46074b7aa57277e6c91bef7fb966505a4703",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x6ea142f55aE733eeaEef5fEA34d4312478c762e5",
    "transactionIndex": 0,
    "gasUsed": "4615575",
    "logsBloom": "0x
    "blockHash": "0x9250e0839e8ad1c435d42943c35555e10a920318486574e56abf009304a8b6ef",
    "transactionHash": "0x836ba75696310aeb604fb1608e1f46074b7aa57277e6c91bef7fb966505a4703",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 571586,
        "transactionHash": "0x836ba75696310aeb604fb1608e1f46074b7aa57277e6c91bef7fb966505a4703",
        "address": "0x6ea142f55aE733eeaEef5fEA34d4312478c762e5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9250e0839e8ad1c435d42943c35555e10a920318486574e56abf009304a8b6ef"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 571586,
        "transactionHash": "0x836ba75696310aeb604fb1608e1f46074b7aa57277e6c91bef7fb966505a4703",
        "address": "0x008E26068B3EB40B443d3Ea88c1fF99B789c10F7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006ea142f55ae733eeaeef5fea34d4312478c762e5",
          "0x00000000000000000000000085995d5f8ee9645ca855e92de16fa62d26398060"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x9250e0839e8ad1c435d42943c35555e10a920318486574e56abf009304a8b6ef"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 571586,
        "transactionHash": "0x836ba75696310aeb604fb1608e1f46074b7aa57277e6c91bef7fb966505a4703",
        "address": "0x474Bb79C3e8E65DcC6dF30F9dE68592ed48BBFDb",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006ea142f55ae733eeaeef5fea34d4312478c762e5",
          "0x00000000000000000000000085995d5f8ee9645ca855e92de16fa62d26398060"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x9250e0839e8ad1c435d42943c35555e10a920318486574e56abf009304a8b6ef"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 571586,
        "transactionHash": "0x836ba75696310aeb604fb1608e1f46074b7aa57277e6c91bef7fb966505a4703",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006ea142f55ae733eeaeef5fea34d4312478c762e5",
          "0x00000000000000000000000085995d5f8ee9645ca855e92de16fa62d26398060"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x9250e0839e8ad1c435d42943c35555e10a920318486574e56abf009304a8b6ef"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 571586,
        "transactionHash": "0x836ba75696310aeb604fb1608e1f46074b7aa57277e6c91bef7fb966505a4703",
        "address": "0x17766e5dd91FdC14C24CD9847e5E93fD62a05aFd",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006ea142f55ae733eeaeef5fea34d4312478c762e5",
          "0x0000000000000000000000008754699cf9f32b56654f7da44ff580bdf09f3526"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x9250e0839e8ad1c435d42943c35555e10a920318486574e56abf009304a8b6ef"
      }
    ],
    "blockNumber": 571586,
    "cumulativeGasUsed": "4615575",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x17766e5dd91FdC14C24CD9847e5E93fD62a05aFd",
    "0x008E26068B3EB40B443d3Ea88c1fF99B789c10F7",
    "0x8754699cf9f32B56654F7dA44fF580BdF09f3526",
    "0x85995d5f8ee9645cA855e92de16FA62D26398060"
  ],
  "solcInputHash": "8081f89e454191fd2026f900d12e02cc",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLPTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"Unclaimed rewards from staking contract\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of LP tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of LP tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"Estimated rewards tokens earned for calling `reinvest()`\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getLPTokensForShares(uint256)\":{\"params\":{\"amount\":\"Snowball tokens\"},\"returns\":{\"_0\":\"LP tokens\"}},\"getSharesForLPTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of LP tokens\",\"params\":{\"amount\":\"LP tokens\"},\"returns\":{\"_0\":\"Snowball tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateReinvestReward(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of Snowball tokens to redeem\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_TYPEHASH()\":{\"notice\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Unclaimed rewards from staking contract\"},\"deposit(uint256)\":{\"notice\":\"Deposit LP tokens to receive Snowball tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit LP tokens to receive Snowball tokens\"},\"emergencyWithdraw()\":{\"notice\":\"Allows exit from Staking Contract without additional logic\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward for caller\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getLPTokensForShares(uint256)\":{\"notice\":\"Calculate LP tokens for a given amount of Snowball tokens\"},\"getSharesForLPTokens(uint256)\":{\"notice\":\"Calculate Snowball tokens for a given amount of LP tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest rewards from staking contract to LP tokens\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest minimum threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw LP tokens by redeeming Snowball tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DexStrategy.sol\":\"DexStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DexStrategy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SnowballERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\ncontract DexStrategy is SnowballERC20, Ownable {\\n  using SafeMath for uint;\\n\\n  uint public totalDeposits;\\n\\n  IRouter public router;\\n  IPair public lpToken;\\n  IERC20 private token0;\\n  IERC20 private token1;\\n  IERC20 public rewardToken;\\n  IStakingRewards public stakingContract;\\n\\n  uint public MIN_TOKENS_TO_REINVEST = 20;\\n  uint public REINVEST_REWARD_BIPS = 500;\\n  uint public ADMIN_FEE_BIPS = 500;\\n  uint constant private BIPS_DIVISOR = 10000;\\n\\n  event Deposit(address account, uint amount);\\n  event Withdraw(address account, uint amount);\\n  event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n  event Recovered(address token, uint amount);\\n  event UpdateAdminFee(uint oldValue, uint newValue);\\n  event UpdateReinvestReward(uint oldValue, uint newValue);\\n  event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n\\n  constructor(address _lpToken, address _rewardToken, address _stakingContract, address _router) {\\n    lpToken = IPair(_lpToken);\\n    rewardToken = IERC20(_rewardToken);\\n    stakingContract = IStakingRewards(_stakingContract);\\n    router = IRouter(_router);\\n\\n    address _token0 = IPair(_lpToken).token0();\\n    address _token1 = IPair(_lpToken).token1();\\n    token0 = IERC20(_token0);\\n    token1 = IERC20(_token1);\\n\\n    IERC20(_rewardToken).approve(_router, uint(-1));\\n    IERC20(_token0).approve(_router, uint(-1));\\n    IERC20(_token1).approve(_router, uint(-1));\\n    IPair(_lpToken).approve(_stakingContract, uint(-1));\\n\\n    name = string(\\n      abi.encodePacked(\\n        \\\"Snowball: \\\",\\n        lpToken.symbol(), \\\" \\\",\\n        IERC20(_token0).symbol(), \\\"-\\\",\\n        IERC20(_token1).symbol()\\n      )\\n    );\\n  }\\n\\n  /**\\n    * @dev Throws if called by smart contract\\n    */\\n  modifier onlyEOA() {\\n      require(tx.origin == msg.sender, \\\"onlyEOA\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @notice Deposit LP tokens to receive Snowball tokens\\n   * @param amount Amount of LP tokens to deposit\\n   */\\n  function deposit(uint amount) external {\\n    _deposit(amount);\\n  }\\n\\n  /**\\n   * @notice Deposit LP tokens to receive Snowball tokens\\n   * @param amount Amount of LP tokens to deposit\\n   * @param deadline The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    lpToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    _deposit(amount);\\n  }\\n\\n  function _deposit(uint amount) internal {\\n    require(totalDeposits >= totalSupply, \\\"deposit failed\\\");\\n    require(lpToken.transferFrom(msg.sender, address(this), amount), \\\"transferFrom failed\\\");\\n    _stakeLpTokens(amount);\\n    _mint(msg.sender, getSharesForLPTokens(amount));\\n    totalDeposits = totalDeposits.add(amount);\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw LP tokens by redeeming Snowball tokens\\n   * @param amount Amount of Snowball tokens to redeem\\n   */\\n  function withdraw(uint amount) external {\\n    uint lpTokenAmount = getLPTokensForShares(amount);\\n    if (lpTokenAmount > 0) {\\n      _withdrawLpTokens(lpTokenAmount);\\n      require(lpToken.transfer(msg.sender, lpTokenAmount), \\\"transfer failed\\\");\\n      _burn(msg.sender, amount);\\n      totalDeposits = totalDeposits.sub(lpTokenAmount);\\n      emit Withdraw(msg.sender, lpTokenAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate Snowball tokens for a given amount of LP tokens\\n   * @dev If contract is empty, use 1:1 ratio\\n   * @dev Could return zero shares for very low amounts of LP tokens\\n   * @param amount LP tokens\\n   * @return Snowball tokens\\n   */\\n  function getSharesForLPTokens(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return amount;\\n    }\\n    return amount.mul(totalSupply).div(totalDeposits);\\n  }\\n\\n  /**\\n   * @notice Calculate LP tokens for a given amount of Snowball tokens\\n   * @param amount Snowball tokens\\n   * @return LP tokens\\n   */\\n  function getLPTokensForShares(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return 0;\\n    }\\n    return amount.mul(totalDeposits).div(totalSupply);\\n  }\\n\\n  /**\\n   * @notice Unclaimed rewards from staking contract\\n   * @return Unclaimed rewards from staking contract\\n   */\\n  function checkReward() public view returns (uint) {\\n    return stakingContract.earned(address(this));\\n  }\\n\\n  /**\\n   * @notice Estimate reinvest reward for caller\\n   * @return Estimated rewards tokens earned for calling `reinvest()`\\n   */\\n  function estimateReinvestReward() external view returns (uint) {\\n    uint unclaimedRewards = checkReward();\\n    if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n      return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to LP tokens\\n   */\\n  function reinvest() external onlyEOA {\\n    uint unclaimedRewards = checkReward();\\n    require(unclaimedRewards >= MIN_TOKENS_TO_REINVEST, \\\"MIN_TOKENS_TO_REINVEST\\\");\\n    stakingContract.getReward();\\n\\n    uint adminFee = unclaimedRewards.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n    if (adminFee > 0) {\\n      require(rewardToken.transfer(owner(), adminFee), \\\"admin fee transfer failed\\\");\\n    }\\n\\n    uint reinvestFee = unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    if (reinvestFee > 0) {\\n      require(rewardToken.transfer(msg.sender, reinvestFee), \\\"reinvest fee transfer failed\\\");\\n    }\\n\\n    uint lpTokenAmount = _convertRewardTokensToLpTokens(unclaimedRewards.sub(adminFee).sub(reinvestFee));\\n    _stakeLpTokens(lpTokenAmount);\\n    totalDeposits = totalDeposits.add(lpTokenAmount);\\n\\n    emit Reinvest(totalDeposits, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Converts entire reward token balance to LP tokens\\n   * @dev Always converts through router; there are no price checks enabled\\n   * @return LP tokens received\\n   */\\n  function _convertRewardTokensToLpTokens(uint amount) internal returns (uint) {\\n    uint amountIn = amount.div(2);\\n    require(amountIn > 0, \\\"amount too low\\\");\\n\\n    // swap to token0\\n    address[] memory path0 = new address[](2);\\n    path0[0] = address(rewardToken);\\n    path0[1] = address(token0);\\n\\n    uint amountOutToken0 = amountIn;\\n    if (path0[0] != path0[1]) {\\n      uint[] memory amountsOutToken0 = router.getAmountsOut(amountIn, path0);\\n      amountOutToken0 = amountsOutToken0[amountsOutToken0.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken0, path0, address(this), block.timestamp);\\n    }\\n\\n    // swap to token1\\n    address[] memory path1 = new address[](2);\\n    path1[0] = path0[0];\\n    path1[1] = address(token1);\\n\\n    uint amountOutToken1 = amountIn;\\n    if (path1[0] != path1[1]) {\\n      uint[] memory amountsOutToken1 = router.getAmountsOut(amountIn, path1);\\n      amountOutToken1 = amountsOutToken1[amountsOutToken1.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken1, path1, address(this), block.timestamp);\\n    }\\n\\n    (,,uint liquidity) = router.addLiquidity(\\n      path0[1], path1[1],\\n      amountOutToken0, amountOutToken1,\\n      0, 0,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    return liquidity;\\n  }\\n\\n  /**\\n   * @notice Stakes LP tokens in Staking Contract\\n   * @param amount LP tokens to stake\\n   */\\n  function _stakeLpTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.stake(amount);\\n  }\\n\\n  /**\\n   * @notice Withdraws LP tokens from Staking Contract\\n   * @dev Rewards are not automatically collected from the Staking Contract\\n   * @param amount LP tokens to remove;\\n   */\\n  function _withdrawLpTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.withdraw(amount);\\n  }\\n\\n  /**\\n   * @notice Allows exit from Staking Contract without additional logic\\n   */\\n  function emergencyWithdraw() external onlyOwner {\\n    stakingContract.exit();\\n    totalDeposits = 0;\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvest(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n    MIN_TOKENS_TO_REINVEST = newValue;\\n  }\\n\\n  /**\\n   * @notice Update admin fee\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateAdminFee(uint newValue) external onlyOwner {\\n    require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR, \\\"admin fee too high\\\");\\n    emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n    ADMIN_FEE_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Update reinvest reward\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateReinvestReward(uint newValue) external onlyOwner {\\n    require(newValue.add(ADMIN_FEE_BIPS) <= BIPS_DIVISOR, \\\"reinvest reward too high\\\");\\n    emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n    REINVEST_REWARD_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Recover ERC20 from contract\\n   * @param tokenAddress token address\\n   * @param tokenAmount amount to recover\\n   */\\n  function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n    require(tokenAmount > 0, 'amount too low');\\n    IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  /**\\n   * @notice Recover AVAX from contract\\n   * @param amount amount\\n   */\\n  function recoverAVAX(uint amount) external onlyOwner {\\n    require(amount > 0, 'amount too low');\\n    msg.sender.transfer(amount);\\n    emit Recovered(address(0), amount);\\n  }\\n}\",\"keccak256\":\"0x3f0a6ab5696064e636babfaa5aee2e8b2f68460d19597cc334bb035c06601473\",\"license\":\"MIT\"},\"contracts/SnowballERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract SnowballERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Snowball\\\";\\n    string public symbol = \\\"SNOW\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0xa5a8e218daa55fdd26a731444fa88e32ada12df9c3454f69f7898600db2d5427\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x95d20e03691f0c743661793bf9bcba6bbf47932bd37077ebd1341188da931c14\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(address token, uint amountTokenDesired, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountAVAX);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb1bf34011dee59a85fed0223e0d71993445c7b3dd02145ff0f06a883339ae904\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IStakingRewards {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function getRewardForDuration() external view returns (uint256);\\n    function stake(uint256 amount) external;\\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function withdraw(uint256 amount) external;\\n    function getReward() external;\\n    function exit() external;\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n}\",\"keccak256\":\"0x9676b12193d43245e7d016ce33557b15fd0acae70d91067e9d5cc83877397cff\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c80638da5cb5b1161013b578063d3bd0e0b116100b8578063ee99205c1161007c578063ee99205c146106bd578063f2fde38b146106db578063f7c618c1146106f7578063f887ea4014610715578063fdb5a03e1461073357610248565b8063d3bd0e0b14610619578063d505accf14610649578063db2e21bc14610665578063dd62ed3e1461066f578063ed24911d1461069f57610248565b8063b6b55f25116100ff578063b6b55f2514610587578063b9e57b80146105a3578063bd079f55146105c1578063c4b24a46146105df578063cff1b6ef146105fd57610248565b80638da5cb5b146104e157806395d89b41146104ff5780639e4e73181461051d578063a8ae2b7c1461053b578063a9059cbb1461055757610248565b80634ebb7916116101c95780637d8820971161018d5780637d8820971461043d5780637ecebe001461045b578063818372301461048b5780638980f11f146104a75780638aff733d146104c357610248565b80634ebb7916146103995780635fcbd285146103b557806370a08231146103d3578063715018a6146104035780637739524c1461040d57610248565b806323b872dd1161021057806323b872dd146102f55780632e1a7d4d1461032557806330adf81f14610341578063313ce5671461035f5780634a970be71461037d57610248565b806306fdde031461024d578063076771111461026b578063095ea7b31461028957806318160ddd146102b957806320606b70146102d7575b600080fd5b61025561073d565b60405161026291906143e7565b60405180910390f35b6102736107db565b6040516102809190614669565b60405180910390f35b6102a3600480360381019061029e919061370f565b6107e1565b6040516102b0919061424c565b60405180910390f35b6102c16107f8565b6040516102ce9190614669565b60405180910390f35b6102df6107fe565b6040516102ec9190614267565b60405180910390f35b61030f600480360381019061030a9190613622565b610825565b60405161031c919061424c565b60405180910390f35b61033f600480360381019061033a91906137b5565b610a3e565b005b610349610bae565b6040516103569190614267565b60405180910390f35b610367610bd5565b6040516103749190614737565b60405180910390f35b61039760048036038101906103929190613856565b610bda565b005b6103b360048036038101906103ae91906137b5565b610c83565b005b6103bd610dc6565b6040516103ca9190614396565b60405180910390f35b6103ed60048036038101906103e891906135bd565b610dec565b6040516103fa9190614669565b60405180910390f35b61040b610e35565b005b610427600480360381019061042291906137b5565b610f72565b6040516104349190614669565b60405180910390f35b610445610fcb565b6040516104529190614669565b60405180910390f35b610475600480360381019061047091906135bd565b610fd1565b6040516104829190614669565b60405180910390f35b6104a560048036038101906104a091906137b5565b610fe9565b005b6104c160048036038101906104bc919061370f565b6110aa565b005b6104cb611234565b6040516104d89190614669565b60405180910390f35b6104e961123a565b6040516104f691906140bb565b60405180910390f35b610507611264565b60405161051491906143e7565b60405180910390f35b610525611302565b6040516105329190614267565b60405180910390f35b610555600480360381019061055091906137b5565b611329565b005b610571600480360381019061056c919061370f565b611443565b60405161057e919061424c565b60405180910390f35b6105a1600480360381019061059c91906137b5565b61145a565b005b6105ab611466565b6040516105b89190614669565b60405180910390f35b6105c96114b6565b6040516105d69190614669565b60405180910390f35b6105e76114bc565b6040516105f49190614669565b60405180910390f35b610617600480360381019061061291906137b5565b61156d565b005b610633600480360381019061062e91906137b5565b611687565b6040516106409190614669565b60405180910390f35b610663600480360381019061065e9190613671565b6116e1565b005b61066d6117eb565b005b610689600480360381019061068491906135e6565b6118f3565b6040516106969190614669565b60405180910390f35b6106a761197a565b6040516106b49190614267565b60405180910390f35b6106c5611a13565b6040516106d291906143cc565b60405180910390f35b6106f560048036038101906106f091906135bd565b611a39565b005b6106ff611be5565b60405161070c919061437b565b60405180910390f35b61071d611c0b565b60405161072a91906143b1565b60405180910390f35b61073b611c31565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107d35780601f106107a8576101008083540402835291602001916107d3565b820191906000526020600020905b8154815290600101906020018083116107b657829003601f168201915b505050505081565b60105481565b60006107ee33848461205b565b6001905092915050565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561090857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610a2657600061093c856040518060600160405280602f8152602001614a51602f9139846122269092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a1c9190614669565b60405180910390a3505b610a31868686612281565b6001925050509392505050565b6000610a4982611687565b90506000811115610baa57610a5d8161249f565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610aba92919061417c565b602060405180830381600087803b158015610ad457600080fd5b505af1158015610ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0c919061378c565b610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290614609565b60405180910390fd5b610b553383612572565b610b6a816007546126c090919063ffffffff16565b6007819055507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051610ba192919061417c565b60405180910390a15b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610c41979695949392919061410d565b600060405180830381600087803b158015610c5b57600080fd5b505af1158015610c6f573d6000803e3d6000fd5b50505050610c7c8561270a565b5050505050565b610c8b6128b3565b73ffffffffffffffffffffffffffffffffffffffff16610ca961123a565b73ffffffffffffffffffffffffffffffffffffffff1614610cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf690614529565b60405180910390fd5b60008111610d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3990614469565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d88573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610dbb92919061417c565b60405180910390a150565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e3d6128b3565b73ffffffffffffffffffffffffffffffffffffffff16610e5b61123a565b73ffffffffffffffffffffffffffffffffffffffff1614610eb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea890614529565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080610f8c6007546002546128bb90919063ffffffff16565b1415610f9a57819050610fc6565b610fc3600754610fb5600254856128bb90919063ffffffff16565b61292b90919063ffffffff16565b90505b919050565b60075481565b60056020528060005260406000206000915090505481565b610ff16128b3565b73ffffffffffffffffffffffffffffffffffffffff1661100f61123a565b73ffffffffffffffffffffffffffffffffffffffff1614611065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105c90614529565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600e54826040516110989291906146b4565b60405180910390a180600e8190555050565b6110b26128b3565b73ffffffffffffffffffffffffffffffffffffffff166110d061123a565b73ffffffffffffffffffffffffffffffffffffffff1614611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111d90614529565b60405180910390fd5b60008111611169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116090614469565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016111a492919061417c565b602060405180830381600087803b1580156111be57600080fd5b505af11580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f6919061378c565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051611228929190614223565b60405180910390a15050565b600f5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112fa5780601f106112cf576101008083540402835291602001916112fa565b820191906000526020600020905b8154815290600101906020018083116112dd57829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b6113316128b3565b73ffffffffffffffffffffffffffffffffffffffff1661134f61123a565b73ffffffffffffffffffffffffffffffffffffffff16146113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90614529565b60405180910390fd5b6127106113bd6010548361297590919063ffffffff16565b11156113fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f590614649565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f54826040516114319291906146b4565b60405180910390a180600f8190555050565b6000611450338484612281565b6001905092915050565b6114638161270a565b50565b6000806114716114bc565b9050600e5481106114ad576114a5612710611497600f54846128bb90919063ffffffff16565b61292b90919063ffffffff16565b9150506114b3565b60009150505b90565b600e5481565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b815260040161151891906140bb565b60206040518083038186803b15801561153057600080fd5b505afa158015611544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156891906137de565b905090565b6115756128b3565b73ffffffffffffffffffffffffffffffffffffffff1661159361123a565b73ffffffffffffffffffffffffffffffffffffffff16146115e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e090614529565b60405180910390fd5b612710611601600f548361297590919063ffffffff16565b1115611642576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611639906145a9565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601054826040516116759291906146b4565b60405180910390a18060108190555050565b6000806116a16007546002546128bb90919063ffffffff16565b14156116b057600090506116dc565b6116d96002546116cb600754856128bb90919063ffffffff16565b61292b90919063ffffffff16565b90505b919050565b42841015611724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171b906144a9565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055896040516020016117b196959493929190614282565b6040516020818303038152906040528051906020012090506117d688828686866129ca565b6117e188888861205b565b5050505050505050565b6117f36128b3565b73ffffffffffffffffffffffffffffffffffffffff1661181161123a565b73ffffffffffffffffffffffffffffffffffffffff1614611867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185e90614529565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9fad8ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118d157600080fd5b505af11580156118e5573d6000803e3d6000fd5b505050506000600781905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516119af919061406d565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b6119e3612b01565b306040516020016119f89594939291906142e3565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a416128b3565b73ffffffffffffffffffffffffffffffffffffffff16611a5f61123a565b73ffffffffffffffffffffffffffffffffffffffff1614611ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aac90614529565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1c90614409565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c96906145c9565b60405180910390fd5b6000611ca96114bc565b9050600e54811015611cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce7906144c9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d5a57600080fd5b505af1158015611d6e573d6000803e3d6000fd5b505050506000611d9d612710611d8f601054856128bb90919063ffffffff16565b61292b90919063ffffffff16565b90506000811115611e9e57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb611dee61123a565b836040518363ffffffff1660e01b8152600401611e0c929190614223565b602060405180830381600087803b158015611e2657600080fd5b505af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e919061378c565b611e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e94906144e9565b60405180910390fd5b5b6000611ec9612710611ebb600f54866128bb90919063ffffffff16565b61292b90919063ffffffff16565b90506000811115611fc357600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611f3192919061417c565b602060405180830381600087803b158015611f4b57600080fd5b505af1158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f83919061378c565b611fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb990614489565b60405180910390fd5b5b6000611ff2611fed83611fdf86886126c090919063ffffffff16565b6126c090919063ffffffff16565b612b0e565b9050611ffd8161326e565b6120128160075461297590919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23460075460025460405161204d9291906146b4565b60405180910390a150505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156120cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c290614549565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561213b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213290614629565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516122199190614669565b60405180910390a3505050565b600083831115829061226e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226591906143e7565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156122f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e890614569565b60405180910390fd5b61235d816040518060600160405280602e8152602001614aa7602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122269092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123f281600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297590919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124929190614669565b60405180910390a3505050565b600081116124e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d990614469565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161253d9190614669565b600060405180830381600087803b15801561255757600080fd5b505af115801561256b573d6000803e3d6000fd5b5050505050565b6125de81604051806060016040528060278152602001614a8060279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122269092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061265081604051806060016040528060278152602001614a2a602791396002546122269092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516126b49190614669565b60405180910390a35050565b600061270283836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612226565b905092915050565b6002546007541015612751576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612748906145e9565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016127b0939291906140d6565b602060405180830381600087803b1580156127ca57600080fd5b505af11580156127de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612802919061378c565b612841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283890614589565b60405180910390fd5b61284a8161326e565b61285c3361285783610f72565b613341565b6128718160075461297590919063ffffffff16565b6007819055507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c33826040516128a892919061417c565b60405180910390a150565b600033905090565b6000808314156128ce5760009050612925565b60008284029050828482816128df57fe5b0414612920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291790614509565b60405180910390fd5b809150505b92915050565b600061296d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061345b565b905092915050565b6000808284019050838110156129c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b790614429565b60405180910390fd5b8091505092915050565b60006129d461197a565b856040516020016129e6929190614084565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051612a239493929190614336565b6020604051602081039080840390855afa158015612a45573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612ab957508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aef90614449565b60405180910390fd5b50505050505050565b6000804690508091505090565b600080612b2560028461292b90919063ffffffff16565b905060008111612b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6190614469565b60405180910390fd5b6060600267ffffffffffffffff81118015612b8457600080fd5b50604051908082528060200260200182016040528015612bb35781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110612be657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110612c5057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600082905081600181518110612c9c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1682600081518110612cc757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612e77576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b8152600401612d49929190614684565b60006040518083038186803b158015612d6157600080fd5b505afa158015612d75573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612d9e919061374b565b905080600182510381518110612db057fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b8152600401612e1d9594939291906146dd565b600060405180830381600087803b158015612e3757600080fd5b505af1158015612e4b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612e74919061374b565b50505b6060600267ffffffffffffffff81118015612e9157600080fd5b50604051908082528060200260200182016040528015612ec05781602001602082028036833780820191505090505b50905082600081518110612ed057fe5b602002602001015181600081518110612ee557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110612f4f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600084905081600181518110612f9b57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1682600081518110612fc657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613176576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b8152600401613048929190614684565b60006040518083038186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061309d919061374b565b9050806001825103815181106130af57fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b815260040161311c9594939291906146dd565b600060405180830381600087803b15801561313657600080fd5b505af115801561314a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613173919061374b565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e33700866001815181106131c357fe5b6020026020010151856001815181106131d857fe5b6020026020010151878660008030426040518963ffffffff1660e01b815260040161320a9897969594939291906141a5565b606060405180830381600087803b15801561322457600080fd5b505af1158015613238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325c9190613807565b92505050809650505050505050919050565b600081116132b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a890614469565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a694fc3a826040518263ffffffff1660e01b815260040161330c9190614669565b600060405180830381600087803b15801561332657600080fd5b505af115801561333a573d6000803e3d6000fd5b5050505050565b6133568160025461297590919063ffffffff16565b6002819055506133ae81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297590919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161344f9190614669565b60405180910390a35050565b600080831182906134a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349991906143e7565b60405180910390fd5b5060008385816134ae57fe5b049050809150509392505050565b6000813590506134cb816149b6565b92915050565b600082601f8301126134e257600080fd5b81516134f56134f082614783565b614752565b9150818183526020840193506020810190508385602084028201111561351a57600080fd5b60005b8381101561354a57816135308882613593565b84526020840193506020830192505060018101905061351d565b5050505092915050565b600081519050613563816149cd565b92915050565b600081359050613578816149e4565b92915050565b60008135905061358d816149fb565b92915050565b6000815190506135a2816149fb565b92915050565b6000813590506135b781614a12565b92915050565b6000602082840312156135cf57600080fd5b60006135dd848285016134bc565b91505092915050565b600080604083850312156135f957600080fd5b6000613607858286016134bc565b9250506020613618858286016134bc565b9150509250929050565b60008060006060848603121561363757600080fd5b6000613645868287016134bc565b9350506020613656868287016134bc565b92505060406136678682870161357e565b9150509250925092565b600080600080600080600060e0888a03121561368c57600080fd5b600061369a8a828b016134bc565b97505060206136ab8a828b016134bc565b96505060406136bc8a828b0161357e565b95505060606136cd8a828b0161357e565b94505060806136de8a828b016135a8565b93505060a06136ef8a828b01613569565b92505060c06137008a828b01613569565b91505092959891949750929550565b6000806040838503121561372257600080fd5b6000613730858286016134bc565b92505060206137418582860161357e565b9150509250929050565b60006020828403121561375d57600080fd5b600082015167ffffffffffffffff81111561377757600080fd5b613783848285016134d1565b91505092915050565b60006020828403121561379e57600080fd5b60006137ac84828501613554565b91505092915050565b6000602082840312156137c757600080fd5b60006137d58482850161357e565b91505092915050565b6000602082840312156137f057600080fd5b60006137fe84828501613593565b91505092915050565b60008060006060848603121561381c57600080fd5b600061382a86828701613593565b935050602061383b86828701613593565b925050604061384c86828701613593565b9150509250925092565b600080600080600060a0868803121561386e57600080fd5b600061387c8882890161357e565b955050602061388d8882890161357e565b945050604061389e888289016135a8565b93505060606138af88828901613569565b92505060806138c088828901613569565b9150509295509295909350565b60006138d983836138f4565b60208301905092915050565b6138ee8161488e565b82525050565b6138fd8161482f565b82525050565b61390c8161482f565b82525050565b600061391d826147d4565b61392781856147f7565b9350613932836147af565b8060005b8381101561396357815161394a88826138cd565b9750613955836147ea565b925050600181019050613936565b5085935050505092915050565b61397981614841565b82525050565b6139888161484d565b82525050565b61399f61399a8261484d565b614999565b82525050565b6000815460018116600081146139c257600181146139e757613a2b565b607f60028304166139d38187614808565b955060ff1983168652808601935050613a2b565b600282046139f58187614808565b9550613a00856147bf565b60005b82811015613a2257815481890152600182019150602081019050613a03565b82880195505050505b505092915050565b613a3c816148a0565b82525050565b613a4b816148c4565b82525050565b613a5a816148e8565b82525050565b613a698161490c565b82525050565b613a7881614930565b82525050565b6000613a89826147df565b613a938185614813565b9350613aa3818560208601614966565b613aac816149a5565b840191505092915050565b6000613ac4602683614813565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613b2a600283614824565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000613b6a601b83614813565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000613baa602483614813565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c10600e83614813565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b6000613c50601c83614813565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b6000613c90600f83614813565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b6000613cd0601683614813565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b6000613d10601983614813565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b6000613d50602183614813565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613db6602083614813565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613df6601c83614813565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b6000613e36603483614813565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b6000613e9c601383614813565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b6000613edc601283614813565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b6000613f1c600783614813565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613f5c600e83614813565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b6000613f9c600f83614813565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b6000613fdc601e83614813565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b600061401c601883614813565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b61405881614877565b82525050565b61406781614881565b82525050565b600061407982846139a5565b915081905092915050565b600061408f82613b1d565b915061409b828561398e565b6020820191506140ab828461398e565b6020820191508190509392505050565b60006020820190506140d06000830184613903565b92915050565b60006060820190506140eb60008301866138e5565b6140f86020830185613903565b614105604083018461404f565b949350505050565b600060e082019050614122600083018a6138e5565b61412f6020830189613903565b61413c604083018861404f565b614149606083018761404f565b614156608083018661405e565b61416360a083018561397f565b61417060c083018461397f565b98975050505050505050565b600060408201905061419160008301856138e5565b61419e602083018461404f565b9392505050565b6000610100820190506141bb600083018b613903565b6141c8602083018a613903565b6141d5604083018961404f565b6141e2606083018861404f565b6141ef6080830187613a6f565b6141fc60a0830186613a6f565b61420960c0830185613903565b61421660e083018461404f565b9998505050505050505050565b60006040820190506142386000830185613903565b614245602083018461404f565b9392505050565b60006020820190506142616000830184613970565b92915050565b600060208201905061427c600083018461397f565b92915050565b600060c082019050614297600083018961397f565b6142a46020830188613903565b6142b16040830187613903565b6142be606083018661404f565b6142cb608083018561404f565b6142d860a083018461404f565b979650505050505050565b600060a0820190506142f8600083018861397f565b614305602083018761397f565b614312604083018661397f565b61431f606083018561404f565b61432c6080830184613903565b9695505050505050565b600060808201905061434b600083018761397f565b614358602083018661405e565b614365604083018561397f565b614372606083018461397f565b95945050505050565b60006020820190506143906000830184613a33565b92915050565b60006020820190506143ab6000830184613a42565b92915050565b60006020820190506143c66000830184613a51565b92915050565b60006020820190506143e16000830184613a60565b92915050565b600060208201905081810360008301526144018184613a7e565b905092915050565b6000602082019050818103600083015261442281613ab7565b9050919050565b6000602082019050818103600083015261444281613b5d565b9050919050565b6000602082019050818103600083015261446281613b9d565b9050919050565b6000602082019050818103600083015261448281613c03565b9050919050565b600060208201905081810360008301526144a281613c43565b9050919050565b600060208201905081810360008301526144c281613c83565b9050919050565b600060208201905081810360008301526144e281613cc3565b9050919050565b6000602082019050818103600083015261450281613d03565b9050919050565b6000602082019050818103600083015261452281613d43565b9050919050565b6000602082019050818103600083015261454281613da9565b9050919050565b6000602082019050818103600083015261456281613de9565b9050919050565b6000602082019050818103600083015261458281613e29565b9050919050565b600060208201905081810360008301526145a281613e8f565b9050919050565b600060208201905081810360008301526145c281613ecf565b9050919050565b600060208201905081810360008301526145e281613f0f565b9050919050565b6000602082019050818103600083015261460281613f4f565b9050919050565b6000602082019050818103600083015261462281613f8f565b9050919050565b6000602082019050818103600083015261464281613fcf565b9050919050565b600060208201905081810360008301526146628161400f565b9050919050565b600060208201905061467e600083018461404f565b92915050565b6000604082019050614699600083018561404f565b81810360208301526146ab8184613912565b90509392505050565b60006040820190506146c9600083018561404f565b6146d6602083018461404f565b9392505050565b600060a0820190506146f2600083018861404f565b6146ff602083018761404f565b81810360408301526147118186613912565b90506147206060830185613903565b61472d608083018461404f565b9695505050505050565b600060208201905061474c600083018461405e565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614779576147786149a3565b5b8060405250919050565b600067ffffffffffffffff82111561479e5761479d6149a3565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061483a82614857565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061489982614942565b9050919050565b60006148ab826148b2565b9050919050565b60006148bd82614857565b9050919050565b60006148cf826148d6565b9050919050565b60006148e182614857565b9050919050565b60006148f3826148fa565b9050919050565b600061490582614857565b9050919050565b60006149178261491e565b9050919050565b600061492982614857565b9050919050565b600061493b82614877565b9050919050565b600061494d82614954565b9050919050565b600061495f82614857565b9050919050565b60005b83811015614984578082015181840152602081019050614969565b83811115614993576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b6149bf8161482f565b81146149ca57600080fd5b50565b6149d681614841565b81146149e157600080fd5b50565b6149ed8161484d565b81146149f857600080fd5b50565b614a0481614877565b8114614a0f57600080fd5b50565b614a1b81614881565b8114614a2657600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212209d9aff928822d379e93728a8fe5321bb7a59174f2cca786f259088de26f0713364736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "Unclaimed rewards from staking contract"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of LP tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of LP tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "Estimated rewards tokens earned for calling `reinvest()`"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getLPTokensForShares(uint256)": {
        "params": {
          "amount": "Snowball tokens"
        },
        "returns": {
          "_0": "LP tokens"
        }
      },
      "getSharesForLPTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of LP tokens",
        "params": {
          "amount": "LP tokens"
        },
        "returns": {
          "_0": "Snowball tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateReinvestReward(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of Snowball tokens to redeem"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_TYPEHASH()": {
        "notice": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "VERSION_HASH()": {
        "notice": "keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Unclaimed rewards from staking contract"
      },
      "deposit(uint256)": {
        "notice": "Deposit LP tokens to receive Snowball tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit LP tokens to receive Snowball tokens"
      },
      "emergencyWithdraw()": {
        "notice": "Allows exit from Staking Contract without additional logic"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward for caller"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getLPTokensForShares(uint256)": {
        "notice": "Calculate LP tokens for a given amount of Snowball tokens"
      },
      "getSharesForLPTokens(uint256)": {
        "notice": "Calculate Snowball tokens for a given amount of LP tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest rewards from staking contract to LP tokens"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest minimum threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw LP tokens by redeeming Snowball tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 986,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 989,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 994,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1000,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1004,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1020,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2121,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRouter)1992"
      },
      {
        "astId": 22,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "lpToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPair)1612"
      },
      {
        "astId": 24,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "token0",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)1596"
      },
      {
        "astId": 26,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "token1",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1596"
      },
      {
        "astId": 28,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "rewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1596"
      },
      {
        "astId": 30,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "stakingContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IStakingRewards)2090"
      },
      {
        "astId": 33,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 36,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 39,
        "contract": "contracts/DexStrategy.sol:DexStrategy",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1596": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)1612": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)1992": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingRewards)2090": {
        "encoding": "inplace",
        "label": "contract IStakingRewards",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}