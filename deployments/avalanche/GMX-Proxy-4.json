{
  "address": "0x8b904F73E1e3c105d3E9d19B6FBB9BEB8c5773c3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gmxDepositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouterV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyAndStakeGlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardTracker",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glpMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxDepositor",
      "outputs": [
        {
          "internalType": "contract IGmxDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxRewardRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeESGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedESGMX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb8ecf4739080c06deca9b8e53eb8bcb6e79201be732db50ca450113b00ee25f",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x8b904F73E1e3c105d3E9d19B6FBB9BEB8c5773c3",
    "transactionIndex": 6,
    "gasUsed": "1730896",
    "logsBloom": "0x
    "blockHash": "0x78e1afb480defd01e82f323f2036e7bf95e7d35a3777784b53998c561f861318",
    "transactionHash": "0xcb8ecf4739080c06deca9b8e53eb8bcb6e79201be732db50ca450113b00ee25f",
    "logs": [],
    "blockNumber": 23618780,
    "cumulativeGasUsed": "3570428",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x565d72A63d3dc4a2F3Dd7609Fd85c4FD394523B2",
    "0x82147C5A7E850eA4E28155DF107F2590fD4ba327",
    "0xB70B91CE0771d3f4c81D87660f71Da31d48eB3B3",
    "0xea3e895b0696e161c68486ee2f85e6cc6ef962d0"
  ],
  "solcInputHash": "35da06a56606351c58d1e1db85c60d97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gmxDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouterV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardTracker\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxDepositor\",\"outputs\":[{\"internalType\":\"contract IGmxDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxRewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeESGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedESGMX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/gmx/GmxProxy.sol\":\"GmxProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IYakStrategy {\\n    function depositToken() external view returns (address);\\n\\n    function depositFor(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf708acb7d65bf39a9d7ed9a14cd296f7b1a9152050c688475c8cc968e07e6e70\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity 0.8.13;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc346884413e71a1422efe5e44741b2692cbabf006f562dbdf38186790f49b1c5\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/GmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../interfaces/IYakStrategy.sol\\\";\\nimport \\\"../../../lib/SafeERC20.sol\\\";\\nimport \\\"../../../lib/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IGmxDepositor.sol\\\";\\nimport \\\"./interfaces/IGmxRewardRouter.sol\\\";\\nimport \\\"./interfaces/IGmxRewardTracker.sol\\\";\\nimport \\\"./interfaces/IGmxProxy.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(\\n        IGmxDepositor gmxDepositor,\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returnValue) = gmxDepositor.execute(target, value, data);\\n        if (!success) revert(\\\"GmxProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\ncontract GmxProxy is IGmxProxy {\\n    using SafeMath for uint256;\\n    using SafeProxy for IGmxDepositor;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    address internal constant GMX = 0x62edc0692BD897D2295872a9FFCac5425011c661;\\n    address internal constant fsGLP = 0x5643F4b25E36478eE1E90418d5343cb6591BcB9d;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address internal constant esGMX = 0xFf1489227BbAAC61a9209A08929E4c2a526DdD17;\\n\\n    address public devAddr;\\n    mapping(address => address) public approvedStrategies;\\n\\n    IGmxDepositor public immutable override gmxDepositor;\\n    address public immutable override gmxRewardRouter;\\n    address public immutable glpMinter;\\n\\n    address internal immutable gmxRewardTracker;\\n    address internal immutable glpManager;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"GmxProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(\\n            approvedStrategies[fsGLP] == msg.sender || approvedStrategies[GMX] == msg.sender,\\n            \\\"GmxProxy:onlyGLPStrategy\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGLPStrategy() {\\n        require(approvedStrategies[fsGLP] == msg.sender, \\\"GmxProxy:onlyGLPStrategy\\\");\\n        _;\\n    }\\n\\n    modifier onlyGMXStrategy() {\\n        require(approvedStrategies[GMX] == msg.sender, \\\"GmxProxy::onlyGMXStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _gmxDepositor,\\n        address _gmxRewardRouter,\\n        address _gmxRewardRouterV2,\\n        address _devAddr\\n    ) {\\n        require(_gmxDepositor > address(0), \\\"GmxProxy::Invalid depositor address provided\\\");\\n        require(_gmxRewardRouter > address(0), \\\"GmxProxy::Invalid reward router address provided\\\");\\n        require(_devAddr > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = _devAddr;\\n        gmxDepositor = IGmxDepositor(_gmxDepositor);\\n        gmxRewardRouter = _gmxRewardRouter;\\n        glpMinter = _gmxRewardRouterV2;\\n        gmxRewardTracker = IGmxRewardRouter(_gmxRewardRouter).stakedGmxTracker();\\n        glpManager = IGmxRewardRouter(_gmxRewardRouterV2).glpManager();\\n    }\\n\\n    function updateDevAddr(address newValue) public onlyDev {\\n        require(newValue > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = newValue;\\n    }\\n\\n    function approveStrategy(address _strategy) external onlyDev {\\n        address depositToken = IYakStrategy(_strategy).depositToken();\\n        require(approvedStrategies[depositToken] == address(0), \\\"GmxProxy::Strategy for deposit token already added\\\");\\n        approvedStrategies[depositToken] = _strategy;\\n    }\\n\\n    function stakeESGMX() external onlyDev {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\\"stakeEsGmx(uint256)\\\", IERC20(esGMX).balanceOf(address(gmxDepositor)))\\n        );\\n    }\\n\\n    function stakedESGMX() public view returns (uint256) {\\n        return IGmxRewardTracker(gmxRewardTracker).depositBalances(address(gmxDepositor), esGMX);\\n    }\\n\\n    function buyAndStakeGlp(uint256 _amount) external override onlyGLPStrategy returns (uint256) {\\n        IERC20(WAVAX).safeTransfer(address(gmxDepositor), _amount);\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, _amount));\\n        bytes memory result = gmxDepositor.safeExecute(\\n            glpMinter,\\n            0,\\n            abi.encodeWithSignature(\\\"mintAndStakeGlp(address,uint256,uint256,uint256)\\\", WAVAX, _amount, 0, 0)\\n        );\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, 0));\\n        return toUint256(result, 0);\\n    }\\n\\n    function withdrawGlp(uint256 _amount) external override onlyGLPStrategy {\\n        _withdrawGlp(_amount);\\n    }\\n\\n    function _withdrawGlp(uint256 _amount) private {\\n        gmxDepositor.safeExecute(fsGLP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function stakeGmx(uint256 _amount) external override onlyGMXStrategy {\\n        IERC20(GMX).safeTransfer(address(gmxDepositor), _amount);\\n        gmxDepositor.safeExecute(\\n            GMX,\\n            0,\\n            abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gmxRewardTracker, _amount)\\n        );\\n        gmxDepositor.safeExecute(gmxRewardRouter, 0, abi.encodeWithSignature(\\\"stakeGmx(uint256)\\\", _amount));\\n        gmxDepositor.safeExecute(GMX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gmxRewardTracker, 0));\\n    }\\n\\n    function withdrawGmx(uint256 _amount) external override onlyGMXStrategy {\\n        _withdrawGmx(_amount);\\n    }\\n\\n    function _withdrawGmx(uint256 _amount) private {\\n        gmxDepositor.safeExecute(gmxRewardRouter, 0, abi.encodeWithSignature(\\\"unstakeGmx(uint256)\\\", _amount));\\n        gmxDepositor.safeExecute(GMX, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function pendingRewards(address _rewardTracker) external view override returns (uint256) {\\n        address feeGmxTracker = IGmxRewardRouter(gmxRewardRouter).feeGmxTracker();\\n        if (_rewardTracker == feeGmxTracker) return 0;\\n\\n        return\\n            IGmxRewardTracker(IGmxRewardRouter(gmxRewardRouter).feeGlpTracker()).claimable(address(gmxDepositor)) +\\n            IGmxRewardTracker(feeGmxTracker).claimable(address(gmxDepositor));\\n    }\\n\\n    function claimReward(address rewardTracker) external override onlyStrategy {\\n        address feeGmxTracker = IGmxRewardRouter(gmxRewardRouter).feeGmxTracker();\\n        if (rewardTracker == feeGmxTracker) return;\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"handleRewards(bool,bool,bool,bool,bool,bool,bool)\\\",\\n                false,\\n                false,\\n                true,\\n                true,\\n                true,\\n                true,\\n                false\\n            )\\n        );\\n        uint256 reward = IERC20(WAVAX).balanceOf(address(gmxDepositor));\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n    }\\n\\n    function totalDeposits(address _rewardTracker) external view override returns (uint256) {\\n        address depositToken = IYakStrategy(msg.sender).depositToken();\\n        if (depositToken == GMX) {\\n            address rewardTracker = IGmxRewardRouter(gmxRewardRouter).stakedGmxTracker();\\n            return IGmxRewardTracker(rewardTracker).depositBalances(address(gmxDepositor), depositToken);\\n        }\\n        return IGmxRewardTracker(_rewardTracker).stakedAmounts(address(gmxDepositor));\\n    }\\n\\n    function emergencyWithdrawGLP(uint256 _balance) external override onlyGLPStrategy {\\n        _withdrawGlp(_balance);\\n    }\\n\\n    function emergencyWithdrawGMX(uint256 _balance) external override onlyGMXStrategy {\\n        _withdrawGmx(_balance);\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xe87684bb6d4fb27d7eac97dee88c3781b56044ba3e6cab4b8a682fae9b237c55\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxDepositor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function setGmxProxy(address _proxy) external;\\n}\\n\",\"keccak256\":\"0xd44c62d9eeae0bab1a485260ef6c4ccb2e8cc13a75df386dbc1391d46bebc855\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IGmxDepositor.sol\\\";\\n\\ninterface IGmxProxy {\\n    function gmxDepositor() external view returns (IGmxDepositor);\\n\\n    function gmxRewardRouter() external view returns (address);\\n\\n    function buyAndStakeGlp(uint256 _amount) external returns (uint256);\\n\\n    function withdrawGlp(uint256 _amount) external;\\n\\n    function stakeGmx(uint256 _amount) external;\\n\\n    function withdrawGmx(uint256 _amount) external;\\n\\n    function pendingRewards(address _rewardTracker) external view returns (uint256);\\n\\n    function claimReward(address _rewardTracker) external;\\n\\n    function totalDeposits(address _rewardTracker) external view returns (uint256);\\n\\n    function emergencyWithdrawGLP(uint256 _balance) external;\\n\\n    function emergencyWithdrawGMX(uint256 _balance) external;\\n}\\n\",\"keccak256\":\"0x56681634a4b46627ed0bd5a333d2ebcb409c2e6979b35f08b096a96822c64c0f\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardRouter {\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function bonusGmxTracker() external view returns (address);\\n\\n    function feeGmxTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function mintAndStakeGlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb4fe2513f2699887de4c0453bf9159ab7770a3036abc65f3d9c980f2655f2fdc\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3f96481089ef8357ff0fb03797a6363666cb2d7376f4f35d117d2b1f7464ef7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620021ff380380620021ff8339810160408190526200003591620002c7565b6001600160a01b038416620000a65760405162461bcd60e51b815260206004820152602c60248201527f476d7850726f78793a3a496e76616c6964206465706f7369746f72206164647260448201526b195cdcc81c1c9bdd9a59195960a21b60648201526084015b60405180910390fd5b6001600160a01b038316620001175760405162461bcd60e51b815260206004820152603060248201527f476d7850726f78793a3a496e76616c69642072657761726420726f757465722060448201526f1859191c995cdcc81c1c9bdd9a59195960821b60648201526084016200009d565b6001600160a01b0381166200017e5760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c69642064657620616464726573732070726044820152651bdd9a59195960d21b60648201526084016200009d565b600080546001600160a01b0319166001600160a01b038381169190911790915584811660805283811660a081905290831660c0526040805163067200c560e11b81529051630ce4018a916004808201926020929091908290030181865afa158015620001ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000214919062000324565b6001600160a01b031660e0816001600160a01b031681525050816001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200026c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000292919062000324565b6001600160a01b031661010052506200034992505050565b80516001600160a01b0381168114620002c257600080fd5b919050565b60008060008060808587031215620002de57600080fd5b620002e985620002aa565b9350620002f960208601620002aa565b92506200030960408601620002aa565b91506200031960608601620002aa565b905092959194509250565b6000602082840312156200033757600080fd5b6200034282620002aa565b9392505050565b60805160a05160c05160e05161010051611dad6200045260003960008181610b630152610d0801526000818161115e0152818161150e015261161c01526000818161018e0152610c61015260008181610222015281816103690152818161047b015281816105ab01528181610e5701528181610f320152818161126b01528181611565015261174d0152600081816101400152818161033e0152818161044b015281816105360152818161064201528181610b3101528181610bfd01528181610cd301528181610fa401528181610fe4015281816110d40152818161111901528181611302015281816113b9015281816114dc015281816115e601526117ce0152611dad6000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80639d54b524116100b2578063d279c19111610081578063da09c72c11610066578063da09c72c1461029b578063e9403256146102ae578063f3daeacc146102c157600080fd5b8063d279c19114610280578063d28cd38a1461029357600080fd5b80639d54b5241461021d578063bf4d14d514610244578063c10300f7146101e4578063c613aec01461025757600080fd5b80633b8ae397116101095780635c72f4b5116100ee5780635c72f4b5146101f757806367860cce146101f75780639291d5631461020a57600080fd5b80633b8ae397146101d157806356615529146101e457600080fd5b8063026879dc1461013b57806311ff5fff1461017f57806328495daa1461018957806331d7a262146101b0575b600080fd5b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101876102d4565b005b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101c36101be366004611b2c565b610476565b604051908152602001610176565b6101876101df366004611b2c565b6106c8565b6101876101f2366004611b49565b610848565b610187610205366004611b49565b6108e7565b610187610218366004611b2c565b610986565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101c3610252366004611b49565b610a7f565b610162610265366004611b2c565b6001602052600090815260409020546001600160a01b031681565b61018761028e366004611b2c565b610d6c565b6101c3611102565b600054610162906001600160a01b031681565b6101c36102bc366004611b2c565b6111d0565b6101876102cf366004611b49565b61142c565b6000546001600160a01b031633146103275760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152610473907f00000000000000000000000000000000000000000000000000000000000000009060009073ff1489227bbaac61a9209a08929e4c2a526ddd17906370a0823190602401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190611b62565b6040516024016103fe91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167fef8c5994000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b50565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166351c3e3b46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb9190611b7b565b9050806001600160a01b0316836001600160a01b03160361051f5750600092915050565b60405163402914f560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015282169063402914f590602401602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190611b62565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611b7b565b60405163402914f560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091169063402914f590602401602060405180830381865afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190611b62565b6106c19190611b98565b9392505050565b6000546001600160a01b031633146107165760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b604482015260640161031e565b6000816001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190611b7b565b6001600160a01b03808216600090815260016020526040902054919250161561080b5760405162461bcd60e51b815260206004820152603260248201527f476d7850726f78793a3a537472617465677920666f72206465706f736974207460448201527f6f6b656e20616c72656164792061646465640000000000000000000000000000606482015260840161031e565b6001600160a01b03908116600090815260016020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633146108de5760405162461bcd60e51b815260206004820152601960248201527f476d7850726f78793a3a6f6e6c79474d58537472617465677900000000000000604482015260640161031e565b61047381611748565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b0316331461097d5760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604482015260640161031e565b6104738161182c565b6000546001600160a01b031633146109d45760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b604482015260640161031e565b6001600160a01b038116610a505760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c696420646576206164647265737320707260448201527f6f76696465640000000000000000000000000000000000000000000000000000606482015260840161031e565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b735643f4b25e36478ee1e90418d5343cb6591bcb9d600090815260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b03163314610b175760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604482015260640161031e565b610b5673b31f66aa3c1e785363f0875a1b74e27b85fd66c77f000000000000000000000000000000000000000000000000000000000000000084611861565b6040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260448101839052610c259073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906000906064015b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b5060405173b31f66aa3c1e785363f0875a1b74e27b85fd66c76024820152604481018390526000606482018190526084820181905290610cfb907f000000000000000000000000000000000000000000000000000000000000000090839060a40160408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152600060448201819052919250610d5b9173b31f66aa3c1e785363f0875a1b74e27b85fd66c791606401610bb0565b506106c18160006118b8565b919050565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b0316331480610e0757507362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633145b610e535760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604482015260640161031e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166351c3e3b46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190611b7b565b9050806001600160a01b0316826001600160a01b031603610ef6575050565b604051600060248201819052604482018190526001606483018190526084830181905260a4830181905260c483015260e48201819052610fcc917f000000000000000000000000000000000000000000000000000000000000000091906101040160408051601f198184030181529190526020810180516001600160e01b03167f30b70002000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190611b62565b604051336024820152604481018290529091506110fc9073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b50505050565b604051637aeceb1f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273ff1489227bbaac61a9209a08929e4c2a526ddd1760248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f5d9d63e90604401602060405180830381865afa1580156111a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cb9190611b62565b905090565b600080336001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112359190611b7b565b90507fffffffffffffffffffffffff9d123f96d427682dd6a78d5600353abdafee399f6001600160a01b038216016113895760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630ce4018a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190611b7b565b604051637aeceb1f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015284811660248301529192509082169063f5d9d63e90604401602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113819190611b62565b949350505050565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528416906310c1c10390602401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190611b62565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633146114c25760405162461bcd60e51b815260206004820152601960248201527f476d7850726f78793a3a6f6e6c79474d58537472617465677900000000000000604482015260640161031e565b6115017362edc0692bd897d2295872a9ffcac5425011c6617f000000000000000000000000000000000000000000000000000000000000000083611861565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044810182905261155f907362edc0692bd897d2295872a9ffcac5425011c66190600090606401610bb0565b5061160e7f000000000000000000000000000000000000000000000000000000000000000060008360405160240161159991815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167ff3daeacc000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260006044820181905261166d917362edc0692bd897d2295872a9ffcac5425011c6619190606401610bb0565b5050565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b81526004016116a693929190611c16565b6000604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ed9190810190611c6d565b915091508161173e5760405162461bcd60e51b815260206004820152601c60248201527f476d7850726f78793a3a7361666545786563757465206661696c656400000000604482015260640161031e565b9695505050505050565b6117f67f000000000000000000000000000000000000000000000000000000000000000060008360405160240161178191815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167f078580d2000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b506040513360248201526044810182905261166d907362edc0692bd897d2295872a9ffcac5425011c661906000906064016110a0565b6040513360248201526044810182905261166d90735643f4b25e36478ee1e90418d5343cb6591bcb9d906000906064016110a0565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526118b390849061191e565b505050565b60006118c5826020611b98565b835110156119155760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e64730000000000000000000000604482015260640161031e565b50016020015190565b6000611973826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a039092919063ffffffff16565b8051909150156118b357808060200190518101906119919190611d2d565b6118b35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161031e565b60606113818484600085856001600160a01b0385163b611a655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161031e565b600080866001600160a01b03168587604051611a819190611d48565b60006040518083038185875af1925050503d8060008114611abe576040519150601f19603f3d011682016040523d82523d6000602084013e611ac3565b606091505b5091509150611ad3828286611ade565b979650505050505050565b60608315611aed5750816106c1565b825115611afd5782518084602001fd5b8160405162461bcd60e51b815260040161031e9190611d64565b6001600160a01b038116811461047357600080fd5b600060208284031215611b3e57600080fd5b81356106c181611b17565b600060208284031215611b5b57600080fd5b5035919050565b600060208284031215611b7457600080fd5b5051919050565b600060208284031215611b8d57600080fd5b81516106c181611b17565b60008219821115611bb957634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015611bd9578181015183820152602001611bc1565b838111156110fc5750506000910152565b60008151808452611c02816020860160208601611bbe565b601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201526000611c3e6060830184611bea565b95945050505050565b80518015158114610d6757600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c8057600080fd5b611c8983611c47565b9150602083015167ffffffffffffffff80821115611ca657600080fd5b818501915085601f830112611cba57600080fd5b815181811115611ccc57611ccc611c57565b604051601f8201601f19908116603f01168101908382118183101715611cf457611cf4611c57565b81604052828152886020848701011115611d0d57600080fd5b611d1e836020830160208801611bbe565b80955050505050509250929050565b600060208284031215611d3f57600080fd5b6106c182611c47565b60008251611d5a818460208701611bbe565b9190910192915050565b6020815260006106c16020830184611bea56fea2646970667358221220247d207851fc2045c30138b7c8da6b2d42e700a77e2086a47d73f08542a2dd7764736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80639d54b524116100b2578063d279c19111610081578063da09c72c11610066578063da09c72c1461029b578063e9403256146102ae578063f3daeacc146102c157600080fd5b8063d279c19114610280578063d28cd38a1461029357600080fd5b80639d54b5241461021d578063bf4d14d514610244578063c10300f7146101e4578063c613aec01461025757600080fd5b80633b8ae397116101095780635c72f4b5116100ee5780635c72f4b5146101f757806367860cce146101f75780639291d5631461020a57600080fd5b80633b8ae397146101d157806356615529146101e457600080fd5b8063026879dc1461013b57806311ff5fff1461017f57806328495daa1461018957806331d7a262146101b0575b600080fd5b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101876102d4565b005b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101c36101be366004611b2c565b610476565b604051908152602001610176565b6101876101df366004611b2c565b6106c8565b6101876101f2366004611b49565b610848565b610187610205366004611b49565b6108e7565b610187610218366004611b2c565b610986565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101c3610252366004611b49565b610a7f565b610162610265366004611b2c565b6001602052600090815260409020546001600160a01b031681565b61018761028e366004611b2c565b610d6c565b6101c3611102565b600054610162906001600160a01b031681565b6101c36102bc366004611b2c565b6111d0565b6101876102cf366004611b49565b61142c565b6000546001600160a01b031633146103275760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152610473907f00000000000000000000000000000000000000000000000000000000000000009060009073ff1489227bbaac61a9209a08929e4c2a526ddd17906370a0823190602401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190611b62565b6040516024016103fe91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167fef8c5994000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b50565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166351c3e3b46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb9190611b7b565b9050806001600160a01b0316836001600160a01b03160361051f5750600092915050565b60405163402914f560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015282169063402914f590602401602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190611b62565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611b7b565b60405163402914f560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091169063402914f590602401602060405180830381865afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190611b62565b6106c19190611b98565b9392505050565b6000546001600160a01b031633146107165760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b604482015260640161031e565b6000816001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190611b7b565b6001600160a01b03808216600090815260016020526040902054919250161561080b5760405162461bcd60e51b815260206004820152603260248201527f476d7850726f78793a3a537472617465677920666f72206465706f736974207460448201527f6f6b656e20616c72656164792061646465640000000000000000000000000000606482015260840161031e565b6001600160a01b03908116600090815260016020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633146108de5760405162461bcd60e51b815260206004820152601960248201527f476d7850726f78793a3a6f6e6c79474d58537472617465677900000000000000604482015260640161031e565b61047381611748565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b0316331461097d5760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604482015260640161031e565b6104738161182c565b6000546001600160a01b031633146109d45760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b604482015260640161031e565b6001600160a01b038116610a505760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c696420646576206164647265737320707260448201527f6f76696465640000000000000000000000000000000000000000000000000000606482015260840161031e565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b735643f4b25e36478ee1e90418d5343cb6591bcb9d600090815260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b03163314610b175760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604482015260640161031e565b610b5673b31f66aa3c1e785363f0875a1b74e27b85fd66c77f000000000000000000000000000000000000000000000000000000000000000084611861565b6040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260448101839052610c259073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906000906064015b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b5060405173b31f66aa3c1e785363f0875a1b74e27b85fd66c76024820152604481018390526000606482018190526084820181905290610cfb907f000000000000000000000000000000000000000000000000000000000000000090839060a40160408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152600060448201819052919250610d5b9173b31f66aa3c1e785363f0875a1b74e27b85fd66c791606401610bb0565b506106c18160006118b8565b919050565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b0316331480610e0757507362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633145b610e535760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c5053747261746567790000000000000000604482015260640161031e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166351c3e3b46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190611b7b565b9050806001600160a01b0316826001600160a01b031603610ef6575050565b604051600060248201819052604482018190526001606483018190526084830181905260a4830181905260c483015260e48201819052610fcc917f000000000000000000000000000000000000000000000000000000000000000091906101040160408051601f198184030181529190526020810180516001600160e01b03167f30b70002000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190611b62565b604051336024820152604481018290529091506110fc9073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b50505050565b604051637aeceb1f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273ff1489227bbaac61a9209a08929e4c2a526ddd1760248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f5d9d63e90604401602060405180830381865afa1580156111a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cb9190611b62565b905090565b600080336001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112359190611b7b565b90507fffffffffffffffffffffffff9d123f96d427682dd6a78d5600353abdafee399f6001600160a01b038216016113895760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630ce4018a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190611b7b565b604051637aeceb1f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015284811660248301529192509082169063f5d9d63e90604401602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113819190611b62565b949350505050565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528416906310c1c10390602401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190611b62565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633146114c25760405162461bcd60e51b815260206004820152601960248201527f476d7850726f78793a3a6f6e6c79474d58537472617465677900000000000000604482015260640161031e565b6115017362edc0692bd897d2295872a9ffcac5425011c6617f000000000000000000000000000000000000000000000000000000000000000083611861565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044810182905261155f907362edc0692bd897d2295872a9ffcac5425011c66190600090606401610bb0565b5061160e7f000000000000000000000000000000000000000000000000000000000000000060008360405160240161159991815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167ff3daeacc000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260006044820181905261166d917362edc0692bd897d2295872a9ffcac5425011c6619190606401610bb0565b5050565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b81526004016116a693929190611c16565b6000604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ed9190810190611c6d565b915091508161173e5760405162461bcd60e51b815260206004820152601c60248201527f476d7850726f78793a3a7361666545786563757465206661696c656400000000604482015260640161031e565b9695505050505050565b6117f67f000000000000000000000000000000000000000000000000000000000000000060008360405160240161178191815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167f078580d2000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611671565b506040513360248201526044810182905261166d907362edc0692bd897d2295872a9ffcac5425011c661906000906064016110a0565b6040513360248201526044810182905261166d90735643f4b25e36478ee1e90418d5343cb6591bcb9d906000906064016110a0565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526118b390849061191e565b505050565b60006118c5826020611b98565b835110156119155760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e64730000000000000000000000604482015260640161031e565b50016020015190565b6000611973826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a039092919063ffffffff16565b8051909150156118b357808060200190518101906119919190611d2d565b6118b35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161031e565b60606113818484600085856001600160a01b0385163b611a655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161031e565b600080866001600160a01b03168587604051611a819190611d48565b60006040518083038185875af1925050503d8060008114611abe576040519150601f19603f3d011682016040523d82523d6000602084013e611ac3565b606091505b5091509150611ad3828286611ade565b979650505050505050565b60608315611aed5750816106c1565b825115611afd5782518084602001fd5b8160405162461bcd60e51b815260040161031e9190611d64565b6001600160a01b038116811461047357600080fd5b600060208284031215611b3e57600080fd5b81356106c181611b17565b600060208284031215611b5b57600080fd5b5035919050565b600060208284031215611b7457600080fd5b5051919050565b600060208284031215611b8d57600080fd5b81516106c181611b17565b60008219821115611bb957634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015611bd9578181015183820152602001611bc1565b838111156110fc5750506000910152565b60008151808452611c02816020860160208601611bbe565b601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201526000611c3e6060830184611bea565b95945050505050565b80518015158114610d6757600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c8057600080fd5b611c8983611c47565b9150602083015167ffffffffffffffff80821115611ca657600080fd5b818501915085601f830112611cba57600080fd5b815181811115611ccc57611ccc611c57565b604051601f8201601f19908116603f01168101908382118183101715611cf457611cf4611c57565b81604052828152886020848701011115611d0d57600080fd5b611d1e836020830160208801611bbe565b80955050505050509250929050565b600060208284031215611d3f57600080fd5b6106c182611c47565b60008251611d5a818460208701611bbe565b9190910192915050565b6020815260006106c16020830184611bea56fea2646970667358221220247d207851fc2045c30138b7c8da6b2d42e700a77e2086a47d73f08542a2dd7764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33424,
        "contract": "contracts/strategies/avalanche/gmx/GmxProxy.sol:GmxProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33428,
        "contract": "contracts/strategies/avalanche/gmx/GmxProxy.sol:GmxProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}