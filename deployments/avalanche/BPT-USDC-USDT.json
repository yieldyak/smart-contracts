{
  "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_dropBptAmountOnPoolJoin",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "balancerVault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "balancerPoolTokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "boostFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "boostFeeReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct BalancerStrategy.BalancerStrategySettings",
          "name": "_balancerStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "gasToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "rewards",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "simpleRouter",
              "type": "address"
            }
          ],
          "internalType": "struct BaseStrategy.BaseStrategySettings",
          "name": "_settings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dev",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV3.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "UpdateRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balMinter",
      "outputs": [
        {
          "internalType": "contract IBalMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolTokenIn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IBalancerVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostFeeBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dropBptAmountOnPoolJoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedRewardsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simpleRouter",
      "outputs": [
        {
          "internalType": "contract ISimpleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IBalancerGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boostFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_boostFeeBips",
          "type": "uint256"
        }
      ],
      "name": "updateBoostFeeSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "updateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
    "transactionIndex": 3,
    "gasUsed": "5189234",
    "logsBloom": "0x00000000000000000000000000000000400000000000000000c80000000000000000000000000000000000000000000000000000200002000000000000000000010000000000000000000100000008000001000000000000080000000000080000000000020000000000000000000800000000000000080000000000000000400000000000000000000000000000000080040008000000000400000010000000000000000000000400000000000000200000020000000000000000000000080000000000000000000000010000000000200000000002000000000000020020000000020010000000000000000000000002000000000000000000000000000000",
    "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31",
    "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 13,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 14,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 15,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0xcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d580f9cf2fb2d09bc411532988f2afda4e7beff",
        "logIndex": 16,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0xa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00"
        ],
        "data": "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
        "logIndex": 17,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 18,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 35187198,
        "transactionHash": "0xc5d42ca8544de425f54482412c0ec33cbd3133abbef122804910cd1eb9906551",
        "address": "0x206F460DEF7e6453DffA868Aea758B8051Cc1971",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 20,
        "blockHash": "0x107cab51dee5dd6df69915d9643795832a5da8cc2b2f19b564acbfd53af9dd31"
      }
    ],
    "blockNumber": 35187198,
    "cumulativeGasUsed": "5682479",
    "status": 1,
    "byzantium": true
  },
  "args": [
    true,
    {
      "stakingContract": "0x74AbfE305bc0D729f29a2da26C5b7EF0BD1e3A8C",
      "balancerVault": "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
      "balancerPoolTokenIn": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
      "boostFeeBips": "0",
      "boostFeeReceiver": "0x0000000000000000000000000000000000000000"
    },
    {
      "gasToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "rewards": [
        "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
      ],
      "simpleRouter": "0x959a0af5A46F76AA37317BC417D48B445658B188"
    },
    {
      "name": "Yield Yak: USDC-USDT-BPT",
      "owner": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "dev": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "feeCollector": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
      "depositToken": "0xB26f0e66317846Bd5fE0cBAa1d269f0efEb05c96",
      "rewardToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "minTokensToReinvest": "1000",
      "devFeeBips": 700,
      "reinvestRewardBips": 300
    }
  ],
  "solcInputHash": "8f66dec619209539780895f73bdf2c61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_dropBptAmountOnPoolJoin\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balancerPoolTokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"boostFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"boostFeeReceiver\",\"type\":\"address\"}],\"internalType\":\"struct BalancerStrategy.BalancerStrategySettings\",\"name\":\"_balancerStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"simpleRouter\",\"type\":\"address\"}],\"internalType\":\"struct BaseStrategy.BaseStrategySettings\",\"name\":\"_settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV3.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balMinter\",\"outputs\":[{\"internalType\":\"contract IBalMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolTokenIn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropBptAmountOnPoolJoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleRouter\",\"outputs\":[{\"internalType\":\"contract ISimpleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IBalancerGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boostFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boostFeeBips\",\"type\":\"uint256\"}],\"name\":\"updateBoostFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"recoverGas(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateFeeCollector(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens available to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"disableDeposits()\":{\"notice\":\"Disable deposits\"},\"enableDeposits()\":{\"notice\":\"Enable deposits\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"recoverGas(uint256)\":{\"notice\":\"Recover GAS from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateFeeCollector(address)\":{\"notice\":\"Update feeCollector\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol\":\"BalancerDirectJoinStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from] - value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        require(value > 0, \\\"_mint::zero shares\\\");\\n        totalSupply = totalSupply + value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x893040cb129e3428494993115424a9e7549ae5935e80b3c406ee672d7199aa70\",\"license\":\"MIT\"},\"contracts/YakStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV3 is YakERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct StrategySettings {\\n        string name;\\n        address owner;\\n        address dev;\\n        address feeCollector;\\n        address depositToken;\\n        address rewardToken;\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public immutable depositToken;\\n    IERC20 public immutable rewardToken;\\n\\n    address public devAddr;\\n    address public feeCollector;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event UpdateFeeCollector(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        name = _strategySettings.name;\\n        depositToken = IERC20(_strategySettings.depositToken);\\n        rewardToken = IERC20(_strategySettings.rewardToken);\\n\\n        devAddr = msg.sender;\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateFeeCollector(_strategySettings.feeCollector);\\n        updateDevAddr(_strategySettings.dev);\\n\\n        enableDeposits();\\n        transferOwnership(_strategySettings.owner);\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return (unclaimedRewards * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens available to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        uint256 tDeposits = totalDeposits();\\n        uint256 tSupply = totalSupply;\\n        if (tSupply == 0 || tDeposits == 0) {\\n            return amount;\\n        }\\n        return (amount * tSupply) / tDeposits;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        uint256 tDeposits = totalDeposits();\\n        uint256 tSupply = totalSupply;\\n        if (tSupply == 0 || tDeposits == 0) {\\n            return 0;\\n        }\\n        return (amount * tDeposits) / tSupply;\\n    }\\n\\n    // Dev protected\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyDev {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Disable deposits\\n     */\\n    function disableDeposits() public onlyDev {\\n        require(DEPOSITS_ENABLED);\\n        DEPOSITS_ENABLED = false;\\n        emit DepositsEnabled(false);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyDev {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyDev {\\n        require(newValue + REINVEST_REWARD_BIPS <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyDev {\\n        require(newValue + DEV_FEE_BIPS <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    // Owner protected\\n\\n    /**\\n     * @notice Enable deposits\\n     */\\n    function enableDeposits() public onlyOwner {\\n        require(!DEPOSITS_ENABLED);\\n        DEPOSITS_ENABLED = true;\\n        emit DepositsEnabled(true);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyOwner {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Update feeCollector\\n     * @param newValue address\\n     */\\n    function updateFeeCollector(address newValue) public onlyOwner {\\n        emit UpdateFeeCollector(feeCollector, newValue);\\n        feeCollector = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover GAS from contract\\n     * @param amount amount\\n     */\\n    function recoverGas(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x13ec4c1d08d0676461ce2e8ae66293b4f41cff59c7d563478133e283741e03c5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/ISimpleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../router/interfaces/IYakRouter.sol\\\";\\n\\ninterface ISimpleRouter {\\n    error UnsupportedSwap(address _tokenIn, address _tokenOut);\\n    error InvalidConfiguration();\\n\\n    struct SwapConfig {\\n        bool useYakSwapRouter;\\n        uint8 yakSwapMaxSteps;\\n        Path path;\\n    }\\n\\n    struct Path {\\n        address[] adapters;\\n        address[] tokens;\\n    }\\n\\n    function query(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (FormattedOffer memory trade);\\n\\n    function swap(FormattedOffer memory _trade) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xf736215916cbe2075222e996c43468d1bd2c42fd460f4869e2c53b7b74d0f383\",\"license\":\"MIT\"},\"contracts/interfaces/IWGAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWGAS is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4b124eb4cc5c793034c6e08c77b0932df2644e25a0e4868c0dd54efadd820e9b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/router/interfaces/IYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct Query {\\n    address adapter;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n}\\n\\nstruct Offer {\\n    bytes amounts;\\n    bytes adapters;\\n    bytes path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct FormattedOffer {\\n    uint256[] amounts;\\n    address[] adapters;\\n    address[] path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct Trade {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address[] adapters;\\n}\\n\\ninterface IYakRouter {\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    // admin\\n    function setTrustedTokens(address[] memory _trustedTokens) external;\\n    function setAdapters(address[] memory _adapters) external;\\n    function setFeeClaimer(address _claimer) external;\\n    function setMinFee(uint256 _fee) external;\\n\\n    // misc\\n    function trustedTokensCount() external view returns (uint256);\\n    function adaptersCount() external view returns (uint256);\\n\\n    // query\\n\\n    function queryAdapter(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8 _index)\\n        external\\n        returns (uint256);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8[] calldata _options)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n\\n    // swap\\n\\n    function swapNoSplit(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitFromAVAX(Trade calldata _trade, address _to, uint256 _fee) external payable;\\n\\n    function swapNoSplitToAVAX(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2706c56d892343a14619a2414572292ef9f106a98ae53b4740f155358ec22f7e\",\"license\":\"MIT\"},\"contracts/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV3.sol\\\";\\nimport \\\"../interfaces/IWGAS.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"./../interfaces/ISimpleRouter.sol\\\";\\n\\n/**\\n * @notice BaseStrategy\\n */\\nabstract contract BaseStrategy is YakStrategyV3 {\\n    using SafeERC20 for IERC20;\\n\\n    IWGAS internal immutable WGAS;\\n\\n    struct BaseStrategySettings {\\n        address gasToken;\\n        address[] rewards;\\n        address simpleRouter;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    address[] public supportedRewards;\\n    ISimpleRouter public simpleRouter;\\n\\n    event AddReward(address rewardToken);\\n    event RemoveReward(address rewardToken);\\n    event UpdateRouter(address oldRouter, address newRouter);\\n\\n    constructor(BaseStrategySettings memory _settings, StrategySettings memory _strategySettings)\\n        YakStrategyV3(_strategySettings)\\n    {\\n        WGAS = IWGAS(_settings.gasToken);\\n\\n        supportedRewards = _settings.rewards;\\n\\n        simpleRouter = ISimpleRouter(_settings.simpleRouter);\\n\\n        require(_strategySettings.minTokensToReinvest > 0, \\\"BaseStrategy::Invalid configuration\\\");\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function updateRouter(address _router) public onlyDev {\\n        emit UpdateRouter(address(simpleRouter), _router);\\n        simpleRouter = ISimpleRouter(_router);\\n    }\\n\\n    function addReward(address _rewardToken) public onlyDev {\\n        bool found;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n            }\\n        }\\n        require(!found, \\\"BaseStrategy::Reward already configured!\\\");\\n        supportedRewards.push(_rewardToken);\\n        emit AddReward(_rewardToken);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        bool found;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"BaseStrategy::Reward not configured!\\\");\\n        supportedRewards.pop();\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function getSupportedRewardsLength() public view returns (uint256) {\\n        return supportedRewards.length;\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s)\\n        external\\n        override\\n    {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"BaseStrategy::Deposits disabled\\\");\\n        _reinvest(true);\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount), \\\"BaseStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount - depositFee));\\n        _stakeDepositTokens(_amount, depositFee);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return (_amount * depositFeeBips) / _bip();\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"BaseStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount - withdrawFee);\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return (_amount * withdrawFeeBips) / _bip();\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertPoolRewardsToRewardToken() private returns (uint256) {\\n        _getRewards();\\n        uint256 rewardTokenAmount = rewardToken.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WGAS)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WGAS.deposit{value: balance}();\\n                }\\n                if (address(rewardToken) == address(WGAS)) {\\n                    rewardTokenAmount += balance;\\n                    continue;\\n                }\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0 && reward != address(rewardToken)) {\\n                FormattedOffer memory offer = simpleRouter.query(amount, reward, address(rewardToken));\\n                rewardTokenAmount += _swap(offer);\\n            }\\n        }\\n        return rewardTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract\\n     * @param userDeposit Controls whether or not a gas refund is payed to msg.sender\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        uint256 amount = _convertPoolRewardsToRewardToken();\\n        if (amount > MIN_TOKENS_TO_REINVEST) {\\n            uint256 devFee = (amount * DEV_FEE_BIPS) / BIPS_DIVISOR;\\n            if (devFee > 0) {\\n                rewardToken.safeTransfer(feeCollector, devFee);\\n            }\\n\\n            uint256 reinvestFee = userDeposit ? 0 : (amount * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n            if (reinvestFee > 0) {\\n                rewardToken.safeTransfer(msg.sender, reinvestFee);\\n            }\\n\\n            uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount - devFee - reinvestFee);\\n\\n            if (depositTokenAmount > 0) {\\n                uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n                _stakeDepositTokens(depositTokenAmount, depositFee);\\n                emit Reinvest(totalDeposits(), totalSupply);\\n            }\\n        }\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount) {\\n        if (address(rewardToken) == address(depositToken)) return _fromAmount;\\n        FormattedOffer memory offer = simpleRouter.query(_fromAmount, address(rewardToken), address(depositToken));\\n        return _swap(offer);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount, uint256 _depositFee) private {\\n        require(_amount > 0, \\\"BaseStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount, _depositFee);\\n    }\\n\\n    function _swap(FormattedOffer memory _offer) internal returns (uint256 amountOut) {\\n        if (_offer.amounts.length > 0 && _offer.amounts[_offer.amounts.length - 1] > 0) {\\n            IERC20(_offer.path[0]).approve(address(simpleRouter), _offer.amounts[0]);\\n            return simpleRouter.swap(_offer);\\n        }\\n        return 0;\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(WGAS)) {\\n                rewards[i].amount += address(this).balance;\\n            }\\n            if (reward == address(rewardToken)) {\\n                estimatedTotalReward += rewards[i].amount;\\n            } else if (reward > address(0)) {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance + rewards[i].amount;\\n                if (amount > 0) {\\n                    FormattedOffer memory offer = simpleRouter.query(amount, reward, address(rewardToken));\\n                    estimatedTotalReward += offer.amounts.length > 1 ? offer.amounts[offer.amounts.length - 1] : 0;\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    function rescueDeployedFunds(uint256 _minReturnAmountAccepted) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= _minReturnAmountAccepted,\\n            \\\"BaseStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            disableDeposits();\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* ABSTRACT */\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0x904417c6ee4bcb99113809dc5a79351f2b43446c6f83b67260a52fc591e5fc50\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./BalancerStrategy.sol\\\";\\n\\ncontract BalancerDirectJoinStrategy is BalancerStrategy {\\n    uint256 constant JOIN_KIND = 1; // EXACT_TOKENS_IN_FOR_BPT_OUT\\n    uint256 immutable bptIndex;\\n    bool public immutable dropBptAmountOnPoolJoin;\\n\\n    constructor(\\n        bool _dropBptAmountOnPoolJoin,\\n        BalancerStrategySettings memory _balancerStrategySettings,\\n        BaseStrategySettings memory _settings,\\n        StrategySettings memory _strategySettings\\n    ) BalancerStrategy(_balancerStrategySettings, _settings, _strategySettings) {\\n        dropBptAmountOnPoolJoin = _dropBptAmountOnPoolJoin;\\n        bptIndex = IBalancerPool(address(depositToken)).getBptIndex();\\n    }\\n\\n    function _joinPool(uint256 _amountIn) internal override returns (uint256 amountOut) {\\n        uint256[] memory amounts = new uint256[](poolTokens.length);\\n        uint256[] memory userDataAmounts = new uint[](dropBptAmountOnPoolJoin ? amounts.length - 1 : amounts.length);\\n        uint256 userDataAmountsIndex;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            amounts[i] = poolTokens[i] == balancerPoolTokenIn ? _amountIn : 0;\\n            if (dropBptAmountOnPoolJoin && i == bptIndex) continue;\\n            userDataAmounts[userDataAmountsIndex] = poolTokens[i] == balancerPoolTokenIn ? _amountIn : 0;\\n            userDataAmountsIndex++;\\n        }\\n        bytes memory userData = abi.encode(JOIN_KIND, userDataAmounts, 0);\\n\\n        IBalancerVault.JoinPoolRequest memory request =\\n            IBalancerVault.JoinPoolRequest(poolTokens, amounts, userData, false);\\n        IERC20(balancerPoolTokenIn).approve(address(balancerVault), _amountIn);\\n        balancerVault.joinPool(poolId, address(this), address(this), request);\\n        return depositToken.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa5310ca950a302232492119642607b65c411b8c6727c1b584c49f9de3d668cec\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/balancer/BalancerStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../BaseStrategy.sol\\\";\\n\\nimport \\\"./interfaces/IBalancerVault.sol\\\";\\nimport \\\"./interfaces/IBalancerPool.sol\\\";\\nimport \\\"./interfaces/IBalancerGauge.sol\\\";\\nimport \\\"./interfaces/IBalMinter.sol\\\";\\n\\nabstract contract BalancerStrategy is BaseStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    IBalancerGauge public immutable stakingContract;\\n    IBalancerVault public immutable balancerVault;\\n    IBalMinter public immutable balMinter;\\n    bytes32 public immutable poolId;\\n    address public immutable balancerPoolTokenIn;\\n\\n    uint256 public boostFeeBips;\\n    address public boostFeeReceiver;\\n\\n    address internal immutable BAL;\\n    address[] internal poolTokens;\\n\\n    struct BalancerStrategySettings {\\n        address stakingContract;\\n        address balancerVault;\\n        address balancerPoolTokenIn;\\n        uint256 boostFeeBips;\\n        address boostFeeReceiver;\\n    }\\n\\n    constructor(\\n        BalancerStrategySettings memory _balancerStrategySettings,\\n        BaseStrategySettings memory _settings,\\n        StrategySettings memory _strategySettings\\n    ) BaseStrategy(_settings, _strategySettings) {\\n        stakingContract = IBalancerGauge(_balancerStrategySettings.stakingContract);\\n        balancerVault = IBalancerVault(_balancerStrategySettings.balancerVault);\\n        balancerPoolTokenIn = _balancerStrategySettings.balancerPoolTokenIn;\\n        boostFeeBips = _balancerStrategySettings.boostFeeBips;\\n        boostFeeReceiver = _balancerStrategySettings.boostFeeReceiver;\\n        balMinter = IBalMinter(stakingContract.bal_pseudo_minter());\\n        poolId = IBalancerPool(address(depositToken)).getPoolId();\\n        BAL = stakingContract.bal_token();\\n        (poolTokens,,) = balancerVault.getPoolTokens(poolId);\\n    }\\n\\n    function updateBoostFeeSettings(address _boostFeeReceiver, uint256 _boostFeeBips) external onlyDev {\\n        boostFeeReceiver = _boostFeeReceiver;\\n        boostFeeBips = min(_boostFeeBips, BIPS_DIVISOR);\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount, uint256) internal override {\\n        depositToken.approve(address(stakingContract), _amount);\\n        stakingContract.deposit(_amount);\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 withdrawAmount) {\\n        stakingContract.withdraw(_amount);\\n        return _amount;\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        stakingContract.withdraw(totalDeposits());\\n        depositToken.approve(address(stakingContract), 0);\\n    }\\n\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        Reward[] memory pendingRewards = new Reward[](stakingContract.reward_count() + 1);\\n        for (uint256 i = 0; i < pendingRewards.length - 1; i++) {\\n            address rewardToken = stakingContract.reward_tokens(i);\\n            uint256 amount = stakingContract.claimable_reward(address(this), rewardToken);\\n            pendingRewards[i] = Reward({reward: rewardToken, amount: amount});\\n        }\\n        pendingRewards[pendingRewards.length - 1] = Reward({reward: BAL, amount: _pendingBalRewards()});\\n        return pendingRewards;\\n    }\\n\\n    function _pendingBalRewards() internal view returns (uint256 pendingBal) {\\n        if (!balMinter.isValidGaugeFactory(address(stakingContract))) return 0;\\n\\n        uint256 period = stakingContract.period();\\n        uint256 periodTime = stakingContract.period_timestamp(period);\\n        uint256 integrateInvSupply = stakingContract.integrate_inv_supply(period);\\n\\n        uint256 workingSupply = stakingContract.working_supply();\\n        if (block.timestamp > periodTime && !stakingContract.is_killed()) {\\n            uint256 prevWeekTime = periodTime;\\n            uint256 weekTime = min(((periodTime + 1 weeks) / 1 weeks * 1 weeks), block.timestamp);\\n            while (true) {\\n                uint256 dt = weekTime - prevWeekTime;\\n                if (workingSupply != 0) {\\n                    integrateInvSupply +=\\n                        stakingContract.inflation_rate(prevWeekTime / 1 weeks) * 10e18 * dt / workingSupply;\\n                }\\n                if (weekTime == block.timestamp) {\\n                    break;\\n                }\\n                prevWeekTime = weekTime;\\n                weekTime = min(weekTime + 1 weeks, block.timestamp);\\n            }\\n        }\\n\\n        pendingBal = (\\n            stakingContract.working_balances(address(this))\\n                * (integrateInvSupply - stakingContract.integrate_inv_supply_of(address(this))) / 10e18\\n        ) - balMinter.minted(address(this), address(stakingContract));\\n\\n        if (boostFeeReceiver > address(0)) {\\n            pendingBal -= (pendingBal * boostFeeBips) / BIPS_DIVISOR;\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function _getRewards() internal override {\\n        stakingContract.claim_rewards();\\n        if (balMinter.isValidGaugeFactory(address(stakingContract))) {\\n            balMinter.mint(address(stakingContract));\\n            if (boostFeeReceiver > address(0)) {\\n                uint256 boostFee = (IERC20(BAL).balanceOf(address(this)) * boostFeeBips) / BIPS_DIVISOR;\\n                if (boostFee > 0) {\\n                    IERC20(BAL).safeTransfer(boostFeeReceiver, boostFee);\\n                }\\n            }\\n        }\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        return stakingContract.balanceOf(address(this));\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount)\\n        internal\\n        virtual\\n        override\\n        returns (uint256 toAmount)\\n    {\\n        if (address(rewardToken) != balancerPoolTokenIn) {\\n            FormattedOffer memory offer = simpleRouter.query(_fromAmount, address(rewardToken), balancerPoolTokenIn);\\n            _fromAmount = _swap(offer);\\n        }\\n\\n        return _joinPool(_fromAmount);\\n    }\\n\\n    function _joinPool(uint256 _amountIn) internal virtual returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x662793172e89a25409e52c9d8dd6d463dee6ecd00b2349504b05d75f87dc8782\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/balancer/interfaces/IBalMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBalMinter {\\n    function minted(address user, address gauge) external view returns (uint256);\\n    function mint(address gauge) external;\\n    function isValidGaugeFactory(address gauge) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x804522a05b355596b0f5d451755e375fd1e163325af62e313e35e136cb5e0896\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/balancer/interfaces/IBalancerGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBalancerGauge {\\n    function balanceOf(address user) external view returns (uint256);\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function reward_count() external view returns (uint256);\\n    function reward_tokens(uint256 index) external view returns (address);\\n    function claimable_reward(address user, address rewardToken) external view returns (uint256);\\n    function claim_rewards() external;\\n    function bal_token() external view returns (address);\\n    function working_balances(address user) external view returns (uint256);\\n    function integrate_inv_supply_of(address user) external view returns (uint256);\\n    function period() external view returns (uint256);\\n    function period_timestamp(uint256 period) external view returns (uint256);\\n    function integrate_inv_supply(uint256 period) external view returns (uint256);\\n    function is_killed() external view returns (bool);\\n    function working_supply() external view returns (uint256);\\n    function inflation_rate(uint256 time) external view returns (uint256);\\n    function bal_pseudo_minter() external view returns (address);\\n}\\n\",\"keccak256\":\"0xabe9cdabce54da4ad50f7cad0752856ab2d35964e4a460c606e607be55b68fde\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/balancer/interfaces/IBalancerPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBalancerPool {\\n    function getPoolId() external view returns (bytes32);\\n    function getBptIndex() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf760d3e1247c5f236fb4d2e216db45831638251cd8fcc4195641846a5251e8d3\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/balancer/interfaces/IBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBalancerVault {\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function joinPool(bytes32 poolId, address sender, address recipient, JoinPoolRequest memory request)\\n        external\\n        payable;\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(SingleSwap memory singleSwap, FundManagement memory funds, uint256 limit, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        address[] memory assets,\\n        FundManagement memory fundManagement,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n    function getPool(bytes32 poolId) external view returns (address pool, uint8);\\n}\\n\",\"keccak256\":\"0xca587ebd9c94e5d979e8ef078a91e3dfcb6190d1206dca60d44b77131c2ff401\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61022060405260096101e0819052685969656c642059616b60b81b6102009081526200002f916000919062000a46565b506040805180820190915260038082526216549560ea1b60209092019182526200005c9160019162000a46565b503480156200006a57600080fd5b5060405162006775380380620067758339810160408190526200008d9162000e91565b828282818180600033600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062006755833981519152908290a35080518051620000eb9160009160209091019062000a46565b506080808201516001600160a01b0390811690915260a0808301519091169052600780546001600160a01b0319163317905560c08101516200012d906200052b565b60e08101516200013d90620005c8565b6101008101516200014e9062000684565b60608101516200015e9062000740565b60408101516200016e90620007f4565b62000178620008a8565b6020810151620001889062000949565b5081516001600160a01b031660c0526020808301518051620001af92600d92019062000ad5565b506040820151600e80546001600160a01b0319166001600160a01b0390921691909117905560c0810151620002375760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a3a496e76616c696420636f6e6669677572617460448201526234b7b760e91b60648201526084015b60405180910390fd5b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a1505082516001600160a01b0390811660e08190526020808601518316610100526040808701518416610160526060870151600f556080870151601080546001600160a01b03191691909516179093558251631cfa655d60e11b8152925191926339f4caba92600480830193928290030181865afa158015620002f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200031c919062000f8c565b6001600160a01b0316610120816001600160a01b0316815250506080516001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000377573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039d919062000fb1565b610140818152505060e0516001600160a01b03166329421d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200040c919062000f8c565b6001600160a01b03908116610180526101005161014051604051631f29a8cd60e31b8152600481019190915291169063f94d466890602401600060405180830381865afa15801562000462573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200048c919081019062000fcb565b50508051620004a390601190602084019062000ad5565b50505050508315156101c0811515815250506080516001600160a01b03166382687a566040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200051c919062000fb1565b6101a05250620010fd92505050565b6007546001600160a01b03163314620005875760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c7944657600000000000000000000000060448201526064016200022e565b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b6007546001600160a01b03163314620006245760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c7944657600000000000000000000000060448201526064016200022e565b612710600b54826200063791906200109a565b11156200064357600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b03163314620006e05760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c7944657600000000000000000000000060448201526064016200022e565b612710600c5482620006f391906200109a565b1115620006ff57600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b6006546001600160a01b031633146200078b5760405162461bcd60e51b815260206004820181905260248201526000805160206200673583398151915260448201526064016200022e565b600854604080516001600160a01b03928316815291831660208301527fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146200083f5760405162461bcd60e51b815260206004820181905260248201526000805160206200673583398151915260448201526064016200022e565b600754604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314620008f35760405162461bcd60e51b815260206004820181905260248201526000805160206200673583398151915260448201526064016200022e565b600a5460ff16156200090457600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a1565b6006546001600160a01b03163314620009945760405162461bcd60e51b815260206004820181905260248201526000805160206200673583398151915260448201526064016200022e565b6001600160a01b038116620009fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200022e565b6006546040516001600160a01b038084169216906000805160206200675583398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b82805462000a5490620010c1565b90600052602060002090601f01602090048101928262000a78576000855562000ac3565b82601f1062000a9357805160ff191683800117855562000ac3565b8280016001018555821562000ac3579182015b8281111562000ac357825182559160200191906001019062000aa6565b5062000ad192915062000b2d565b5090565b82805482825590600052602060002090810192821562000ac3579160200282015b8281111562000ac357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000af6565b5b8082111562000ad1576000815560010162000b2e565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171562000b805762000b8062000b44565b60405290565b60405160a081016001600160401b038111828210171562000b805762000b8062000b44565b604051601f8201601f191681016001600160401b038111828210171562000bd65762000bd662000b44565b604052919050565b80516001600160a01b038116811462000bf657600080fd5b919050565b60006001600160401b0382111562000c175762000c1762000b44565b5060051b60200190565b600082601f83011262000c3357600080fd5b8151602062000c4c62000c468362000bfb565b62000bab565b82815260059290921b8401810191818101908684111562000c6c57600080fd5b8286015b8481101562000c925762000c848162000bde565b835291830191830162000c70565b509695505050505050565b60006060828403121562000cb057600080fd5b604051606081016001600160401b03808211838310171562000cd65762000cd662000b44565b8160405282935062000ce88562000bde565b8352602085015191508082111562000cff57600080fd5b5062000d0e8582860162000c21565b60208301525062000d226040840162000bde565b60408201525092915050565b600082601f83011262000d4057600080fd5b81516001600160401b0381111562000d5c5762000d5c62000b44565b602062000d72601f8301601f1916820162000bab565b828152858284870101111562000d8757600080fd5b60005b8381101562000da757858101830151828201840152820162000d8a565b8381111562000db95760008385840101525b5095945050505050565b6000610120828403121562000dd757600080fd5b62000de162000b5a565b82519091506001600160401b0381111562000dfb57600080fd5b62000e098482850162000d2e565b82525062000e1a6020830162000bde565b602082015262000e2d6040830162000bde565b604082015262000e406060830162000bde565b606082015262000e536080830162000bde565b608082015262000e6660a0830162000bde565b60a082015260c082015160c082015260e082015160e082015261010080830151818301525092915050565b60008060008084860361010081121562000eaa57600080fd5b8551801515811462000ebb57600080fd5b945060a0601f198201121562000ed057600080fd5b5062000edb62000b86565b62000ee96020870162000bde565b815262000ef96040870162000bde565b602082015262000f0c6060870162000bde565b60408201526080860151606082015262000f2960a0870162000bde565b608082015260c08601519093506001600160401b038082111562000f4c57600080fd5b62000f5a8883890162000c9d565b935060e087015191508082111562000f7157600080fd5b5062000f808782880162000dc3565b91505092959194509250565b60006020828403121562000f9f57600080fd5b62000faa8262000bde565b9392505050565b60006020828403121562000fc457600080fd5b5051919050565b60008060006060848603121562000fe157600080fd5b83516001600160401b038082111562000ff957600080fd5b620010078783880162000c21565b94506020915081860151818111156200101f57600080fd5b86019050601f810187136200103357600080fd5b80516200104462000c468262000bfb565b81815260059190911b820183019083810190898311156200106457600080fd5b928401925b82841015620010845783518252928401929084019062001069565b8096505050505050604084015190509250925092565b60008219821115620010bc57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620010d657607f821691505b602082108103620010f757634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c05161540d62001328600039600081816107e5015281816145bb01526146c4015260006146ec015260008181612e01015281816142fd015261439501526000818161060101528181613e6201528181613f020152818161464601528181614714015261485401526000818161053801526149750152600081816105c7015281816133c1015281816138ca0152818161419d015261426701526000818161043c0152818161488301526149480152600081816108d2015281816112550152818161269401528181612a0c01528181612aa601528181612b4a01528181612c7f01528181612d36015281816133960152818161343c015281816134f9015281816135a101528181613612015281816136a00152818161377b015281816138a20152818161396d01528181613a1801528181613fb901528181614085015281816140ef01528181614175015261423f015260008181611baa01528181613bc201528181613bf10152613c6601526000818161091f01528181611b0d01528181611c1201528181611d510152818161302b0152818161309301528181613b0e01528181613c9001528181613d4c01528181613daf01528181613e8c0152613eda0152600081816107be01528181610b8101528181610c5401528181610deb01528181610e80015281816128ae01528181612ad501528181613fe801526149e8015261540d6000f3fe608060405234801561001057600080fd5b50600436106103d05760003560e01c806395d89b41116101ff578063c89039c51161011a578063e75ab045116100ad578063f2fde38b1161007c578063f2fde38b146108f4578063f6314d0714610907578063f7c618c11461091a578063fdb5a03e1461094157600080fd5b8063e75ab0451461089f578063eab89a5a146108b2578063ed24911d146108c5578063ee99205c146108cd57600080fd5b8063d563ee03116100e9578063d563ee031461082d578063da09c72c14610840578063dd62ed3e14610853578063dd8ce4d61461088c57600080fd5b8063c89039c5146107b9578063ccabd864146107e0578063d2c35ce814610807578063d505accf1461081a57600080fd5b8063b52a321f11610192578063c2d8f26f11610161578063c2d8f26f14610778578063c415b95c1461078b578063c4b24a461461079e578063c851cc32146107a657600080fd5b8063b52a321f14610747578063b6b55f2514610754578063b9e57b8014610767578063bd079f551461076f57600080fd5b8063a4d5e67c116101ce578063a4d5e67c14610706578063a8ae2b7c14610719578063a9059cbb1461072c578063ac67e1af1461073f57600080fd5b806395d89b41146106b157806399729ec1146106b95780639c9b2e21146106cc5780639e4e7318146106df57600080fd5b80635e4c57a4116102ef5780637ae26773116102825780638980f11f116102515780638980f11f146106715780638aff733d146106845780638da5cb5b1461068d5780639291d5631461069e57600080fd5b80637ae26773146106235780637d882097146106365780637ecebe001461063e578063818372301461065e57600080fd5b8063715018a6116102be578063715018a6146105ba57806373f43d6d146105c25780637897e7f6146105e95780637a7cfdbb146105fc57600080fd5b80635e4c57a41461056d5780635ea682ea14610575578063666d25b91461057e57806370a082311461059157600080fd5b8063258250da11610367578063313ce56711610336578063313ce567146105105780633a06a5611461052a5780633e0dc34e146105335780634a970be71461055a57600080fd5b8063258250da146104b95780632e1a7d4d146104c15780632f4f21e2146104d657806330adf81f146104e957600080fd5b806318160ddd116103a357806318160ddd1461047657806320606b701461047f57806323b872dd146104a6578063247d284b1461041657600080fd5b806306fdde03146103d5578063095ea7b3146103f35780631105603514610416578063158274a514610437575b600080fd5b6103dd610949565b6040516103ea9190614c35565b60405180910390f35b610406610401366004614c5d565b6109d7565b60405190151581526020016103ea565b610429610424366004614c89565b6109ed565b6040519081526020016103ea565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103ea565b61042960025481565b6104297f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104066104b4366004614ca2565b6109fe565b600d54610429565b6104d46104cf366004614c89565b610ac7565b005b6104d46104e4366004614c5d565b610bed565b6104297f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610518601281565b60405160ff90911681526020016103ea565b610429600f5481565b6104297f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610568366004614cf9565b610bfb565b6104d4610cc9565b610429600c5481565b6104d461058c366004614c89565b610d79565b61042961059f366004614d40565b6001600160a01b031660009081526004602052604090205490565b6104d4610ffa565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d46105f7366004614c89565b61109e565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610631366004614d5d565b611170565b61042961123d565b61042961064c366004614d40565b60056020526000908152604090205481565b6104d461066c366004614c89565b6112cd565b6104d461067f366004614c5d565b61135f565b610429600b5481565b6006546001600160a01b031661045e565b6104d46106ac366004614d40565b611421565b6103dd6114e4565b6104d46106c7366004614c89565b6114f1565b6104d46106da366004614d40565b61159f565b6104297fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104d4610714366004614d40565b61173a565b6104d4610727366004614c89565b61193d565b61040661073a366004614c5d565b6119eb565b6104d46119f8565b600a546104069060ff1681565b6104d4610762366004614c89565b611a93565b610429611aa0565b61042960095481565b60105461045e906001600160a01b031681565b60085461045e906001600160a01b031681565b610429611adf565b6104d46107b4366004614d40565b611e34565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104067f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610815366004614d40565b611eee565b6104d4610828366004614d96565b611fb1565b6104d461083b366004614c5d565b6120c4565b60075461045e906001600160a01b031681565b610429610861366004614d5d565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61042961089a366004614c89565b612143565b61045e6108ad366004614c89565b612189565b6104296108c0366004614c89565b6121b3565b6104296121e9565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610902366004614d40565b612289565b600e5461045e906001600160a01b031681565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d46123bb565b6000805461095690614e04565b80601f016020809104026020016040519081016040528092919081815260200182805461098290614e04565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b505050505081565b60006109e4338484612416565b50600192915050565b60006109f882612524565b92915050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610a3857506000198114155b15610aae576000610a498583614e54565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610ab986868661253e565b6001925050505b9392505050565b6000610ad2826121b3565b905060008111610b4f5760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a3a576974686472617720616d6f756e7420746f60448201527f6f206c6f7700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000610b5a82612662565b90506000610b6783612524565b9050610ba833610b778385614e54565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906126fe565b610bb2338561277e565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610bf78282612812565b5050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b50505050610cc23386612812565b5050505050565b6006546001600160a01b03163314610d235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600a5460ff1615610d3357600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a1565b6006546001600160a01b03163314610dd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5e9190614e6b565b9050610e68612a0a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190614e6b565b905082610f008383614e54565b1015610f9a5760405162461bcd60e51b815260206004820152604260248201527f4261736553747261746567793a3a456d657267656e637920776974686472617760448201527f206d696e696d756d2072657475726e20616d6f756e74206e6f7420726561636860648201527f6564000000000000000000000000000000000000000000000000000000000000608482015260a401610b46565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234610fc361123d565b6002546040805192835260208301919091520160405180910390a1600a5460ff161515600103610ff557610ff56119f8565b505050565b6006546001600160a01b031633146110545760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146110f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6000811161110557600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611132573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a150565b6007546001600160a01b031633146111c15760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190614e84565b610bf757600080fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190614e6b565b905090565b6007546001600160a01b0316331461131e5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b6006546001600160a01b031633146113b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600081116113c657600080fd5b6113da6001600160a01b03831633836126fe565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b0316331461147b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600754604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6001805461095690614e04565b6007546001600160a01b031633146115425760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b612710600b54826115539190614ea6565b111561155e57600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b031633146115f05760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b6000805b600d5481101561164757600d818154811061161157611611614ebe565b6000918252602090912001546001600160a01b039081169084160361163557600191505b8061163f81614ed4565b9150506115f4565b5080156116bc5760405162461bcd60e51b815260206004820152602860248201527f4261736553747261746567793a3a52657761726420616c726561647920636f6e60448201527f66696775726564210000000000000000000000000000000000000000000000006064820152608401610b46565b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384169081179091556040519081527f1714865bf5baa84e3439536a013c87cfe030b4cd69f344a5f2a4877de3d517ce90602001611415565b6007546001600160a01b0316331461178b5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b6000805b600d5481101561185b57600d81815481106117ac576117ac614ebe565b6000918252602090912001546001600160a01b039081169084160361184957600d8054600193506117de908490614e54565b815481106117ee576117ee614ebe565b600091825260209091200154600d80546001600160a01b03909216918390811061181a5761181a614ebe565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8061185381614ed4565b91505061178f565b50806118ce5760405162461bcd60e51b8152602060048201526024808201527f4261736553747261746567793a3a526577617264206e6f7420636f6e6669677560448201527f72656421000000000000000000000000000000000000000000000000000000006064820152608401610b46565b600d8054806118df576118df614eed565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03841681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc9101611415565b6007546001600160a01b0316331461198e5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b612710600c548261199f9190614ea6565b11156119aa57600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b60006109e433848461253e565b6007546001600160a01b03163314611a495760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b600a5460ff16611a5857600080fd5b600a805460ff19169055604051600081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590602001610d6f565b611a9d3382612812565b50565b600080611aab611adf565b90506009548110611ad757612710600b5482611ac79190614f03565b611ad19190614f22565b91505090565b600091505090565b600080611aea612b44565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b789190614e6b565b905060005b8251811015611e2d576000838281518110611b9a57611b9a614ebe565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611c105747848381518110611bf457611bf4614ebe565b6020026020010151602001818151611c0c9190614ea6565b9052505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611c7957838281518110611c5b57611c5b614ebe565b60200260200101516020015183611c729190614ea6565b9250611e1a565b6001600160a01b03811615611e1a576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf39190614e6b565b90506000858481518110611d0957611d09614ebe565b60200260200101516020015182611d209190614ea6565b90508015611e1757600e546040516377ccc49d60e11b8152600481018390526001600160a01b0385811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015611da2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dca919081019061504c565b9050600181600001515111611de0576000611e09565b80518051611df090600190614e54565b81518110611e0057611e00614ebe565b60200260200101515b611e139087614ea6565b9550505b50505b5080611e2581614ed4565b915050611b7d565b5092915050565b6007546001600160a01b03163314611e855760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b600e54604080516001600160a01b03928316815291831660208301527f2c6fb4d5ff9fad6ecf2e09cd64cbc9aad92a8b9d2cc0e5c3ddef9b529b0b5ffd910160405180910390a1600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314611f485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600854604080516001600160a01b03928316815291831660208301527fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b428410156120015760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610b46565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661204e83614ed4565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506120af8882868686612e68565b6120ba888888612416565b5050505050505050565b6007546001600160a01b031633146121155760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b601080546001600160a01b0319166001600160a01b03841617905561213c81612710612fc8565b600f555050565b60008061214e61123d565b60025490915080158061215f575081155b1561216c57509192915050565b816121778286614f03565b6121819190614f22565b949350505050565b600d818154811061219957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806121be61123d565b6002549091508015806121cf575081155b156121de575060009392505050565b806121778386614f03565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161221e9190615161565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146122e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6001600160a01b03811661235f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b46565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b32331461240a5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610b46565b6124146000612fdf565b565b6001600160a01b03831661246c5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610b46565b6001600160a01b0382166124c25760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610b46565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000806127106125348285614f03565b610ac09190614f22565b6001600160a01b0382166125ba5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610b46565b6001600160a01b0383166000908152600460205260409020546125de908290614e54565b6001600160a01b03808516600090815260046020526040808220939093559084168152205461260e908290614ea6565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906125179085815260200190565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156126e057600080fd5b505af11580156126f4573d6000803e3d6000fd5b5093949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ff5908490613144565b6001600160a01b0382166000908152600460205260409020546127a2908290614e54565b6001600160a01b0383166000908152600460205260409020556002546127c9908290614e54565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600a5460ff1615156001146128695760405162461bcd60e51b815260206004820152601f60248201527f4261736553747261746567793a3a4465706f736974732064697361626c6564006044820152606401610b46565b6128736001612fdf565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156128ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129239190614e84565b6129955760405162461bcd60e51b815260206004820152602b60248201527f4261736553747261746567793a3a4465706f73697420746f6b656e207472616e60448201527f73666572206661696c65640000000000000000000000000000000000000000006064820152608401610b46565b60006129a082612524565b90506129b8836129b361089a8486614e54565b613229565b6129c282826132ff565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516129fd91815260200190565b60405180910390a2505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d612a4161123d565b6040518263ffffffff1660e01b8152600401612a5f91815260200190565b600060405180830381600087803b158015612a7957600080fd5b505af1158015612a8d573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f000000000000000000000000000000000000000000000000000000000000000016925063095ea7b391506044016020604051808303816000875af1158015612b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d9190614e84565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663963c94b96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bca9190614e6b565b612bd5906001614ea6565b67ffffffffffffffff811115612bed57612bed614f44565b604051908082528060200260200182016040528015612c3257816020015b6040805180820190915260008082526020820152815260200190600190039081612c0b5790505b50905060005b60018251612c469190614e54565b811015612df3576040517f54c49fe9000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354c49fe990602401602060405180830381865afa158015612cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf291906151fc565b6040517f33fd6f740000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0380831660248301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906333fd6f7490604401602060405180830381865afa158015612d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da19190614e6b565b90506040518060400160405280836001600160a01b0316815260200182815250848481518110612dd357612dd3614ebe565b602002602001018190525050508080612deb90614ed4565b915050612c38565b5060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001612e3661337f565b8152508160018351612e489190614e54565b81518110612e5857612e58614ebe565b6020908102919091010152919050565b6000612e726121e9565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612f18573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612f4e5750866001600160a01b0316816001600160a01b0316145b612fbf5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610b46565b50505050505050565b600081831115612fd85781610ac0565b5090919050565b6000612fe9613aec565b9050600954811115610bf7576000612710600c54836130089190614f03565b6130129190614f22565b9050801561305457600854613054906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836126fe565b60008361307b57612710600b548461306c9190614f03565b6130769190614f22565b61307e565b60005b905080156130ba576130ba6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836126fe565b60006130d9826130ca8587614e54565b6130d49190614e54565b613e5e565b90508015610cc25760006130ec82612524565b90506130f882826132ff565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461312161123d565b6002546040805192835260208301919091520160405180910390a1505050505050565b6000613199826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f939092919063ffffffff16565b805190915015610ff557808060200190518101906131b79190614e84565b610ff55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b46565b600081116132795760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610b46565b806002546132879190614ea6565b6002556001600160a01b0382166000908152600460205260409020546132ae908290614ea6565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906128069085815260200190565b600082116133755760405162461bcd60e51b815260206004820152602260248201527f4261736553747261746567793a3a5374616b6520616d6f756e7420746f6f206c60448201527f6f770000000000000000000000000000000000000000000000000000000000006064820152608401610b46565b610bf78282613fa2565b6040516303638f4960e51b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636c71e92090602401602060405180830381865afa15801561340a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342e9190614e84565b6134385750600090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ef78d4fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134bc9190614e6b565b6040517f7598108c000000000000000000000000000000000000000000000000000000008152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637598108c90602401602060405180830381865afa158015613540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135649190614e6b565b6040517ffec8ee0c000000000000000000000000000000000000000000000000000000008152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fec8ee0c90602401602060405180830381865afa1580156135e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360c9190614e6b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317e280896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561366e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136929190614e6b565b9050824211801561372257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639c868ac06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137209190614e84565b155b1561386c5782600061375862093a8061373b8482614ea6565b6137459190614f22565b6137529062093a80614f03565b42612fc8565b90505b60006137678383614e54565b9050831561383f5783816001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fadd59ab6137ad62093a8088614f22565b6040518263ffffffff1660e01b81526004016137cb91815260200190565b602060405180830381865afa1580156137e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380c9190614e6b565b61381e90678ac7230489e80000614f03565b6138289190614f03565b6138329190614f22565b61383c9086614ea6565b94505b42820361384c5750613869565b8192506138618262093a806137529190614ea6565b91505061375b565b50505b6040517f8b752bb00000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f00000000000000000000000000000000000000000000000000000000000000001690638b752bb090604401602060405180830381865afa158015613911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139359190614e6b565b6040517fde263bfa000000000000000000000000000000000000000000000000000000008152306004820152678ac7230489e80000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de263bfa90602401602060405180830381865afa1580156139bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e09190614e6b565b6139ea9085614e54565b6040517f13ecb1ca0000000000000000000000000000000000000000000000000000000081523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906313ecb1ca90602401602060405180830381865afa158015613a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8b9190614e6b565b613a959190614f03565b613a9f9190614f22565b613aa99190614e54565b6010549095506001600160a01b031615613ae557612710600f5486613ace9190614f03565b613ad89190614f22565b613ae29086614e54565b94505b5050505090565b6000613af66140ed565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b819190614e6b565b600d5490915060005b81811015613e56576000600d8281548110613ba757613ba7614ebe565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613cd257478015613c64577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613c4a57600080fd5b505af1158015613c5e573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613cd057613cc78186614ea6565b94505050613e44565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d3d9190614e6b565b9050600081118015613d8157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15613e4157600e546040516377ccc49d60e11b8152600481018390526001600160a01b0384811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613e00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e28919081019061504c565b9050613e33816143be565b613e3d9087614ea6565b9550505b50505b80613e4e81614ed4565b915050613b8a565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613f8a57600e546040516377ccc49d60e11b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613f53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f7b919081019061504c565b9050613f86816143be565b9250505b6109f88261456b565b60606121818484600085614a68565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140559190614e84565b506040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156140d157600080fd5b505af11580156140e5573d6000803e3d6000fd5b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561414857600080fd5b505af115801561415c573d6000803e3d6000fd5b50506040516303638f4960e51b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000169250636c71e9209150602401602060405180830381865afa1580156141e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061420a9190614e84565b15612414576040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a62784290602401600060405180830381600087803b1580156142ab57600080fd5b505af11580156142bf573d6000803e3d6000fd5b50506010546001600160a01b0316159150612414905057600f546040516370a0823160e01b8152306004820152600091612710916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015614344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143689190614e6b565b6143729190614f03565b61437c9190614f22565b90508015611a9d57601054611a9d906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836126fe565b805151600090158015906143fb575081518051600091906143e190600190614e54565b815181106143f1576143f1614ebe565b6020026020010151115b1561456357816040015160008151811061441757614417614ebe565b60200260200101516001600160a01b031663095ea7b3600e60009054906101000a90046001600160a01b0316846000015160008151811061445a5761445a614ebe565b60200260200101516040518363ffffffff1660e01b81526004016144939291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156144b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144d69190614e84565b50600e546040517f5b2466160000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635b2466169061452090859060040161528d565b6020604051808303816000875af115801561453f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190614e6b565b506000919050565b601154600090819067ffffffffffffffff81111561458b5761458b614f44565b6040519080825280602002602001820160405280156145b4578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006145e55781516145f3565b600182516145f39190614e54565b67ffffffffffffffff81111561460b5761460b614f44565b604051908082528060200260200182016040528015614634578160200160208202803683370190505b5090506000805b83518110156147af577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166011828154811061468157614681614ebe565b6000918252602090912001546001600160a01b0316146146a25760006146a4565b855b8482815181106146b6576146b6614ebe565b6020026020010181815250507f0000000000000000000000000000000000000000000000000000000000000000801561470e57507f000000000000000000000000000000000000000000000000000000000000000081145b61479d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166011828154811061474f5761474f614ebe565b6000918252602090912001546001600160a01b031614614770576000614772565b855b83838151811061478457614784614ebe565b60209081029190910101528161479981614ed4565b9250505b806147a781614ed4565b91505061463b565b50600060018360006040516020016147c9939291906152fc565b60408051601f198184030181526011805460a060208202860181019094526080850181815292955060009493849392919084018282801561483357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614815575b505050505081526020018681526020018381526020016000151581525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b81526004016148d49291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156148f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149179190614e84565b506040517fb95cac280000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b95cac28906149a3907f000000000000000000000000000000000000000000000000000000000000000090309081908790600401615328565b600060405180830381600087803b1580156149bd57600080fd5b505af11580156149d1573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa158015614a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a5d9190614e6b565b979650505050505050565b606082471015614ae05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b46565b6001600160a01b0385163b614b375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b46565b600080866001600160a01b03168587604051614b5391906153bb565b60006040518083038185875af1925050503d8060008114614b90576040519150601f19603f3d011682016040523d82523d6000602084013e614b95565b606091505b5091509150614a5d82828660608315614baf575081610ac0565b825115614bbf5782518084602001fd5b8160405162461bcd60e51b8152600401610b469190614c35565b60005b83811015614bf4578181015183820152602001614bdc565b83811115614c03576000848401525b50505050565b60008151808452614c21816020860160208601614bd9565b601f01601f19169290920160200192915050565b602081526000610ac06020830184614c09565b6001600160a01b0381168114611a9d57600080fd5b60008060408385031215614c7057600080fd5b8235614c7b81614c48565b946020939093013593505050565b600060208284031215614c9b57600080fd5b5035919050565b600080600060608486031215614cb757600080fd5b8335614cc281614c48565b92506020840135614cd281614c48565b929592945050506040919091013590565b803560ff81168114614cf457600080fd5b919050565b600080600080600060a08688031215614d1157600080fd5b8535945060208601359350614d2860408701614ce3565b94979396509394606081013594506080013592915050565b600060208284031215614d5257600080fd5b8135610ac081614c48565b60008060408385031215614d7057600080fd5b8235614d7b81614c48565b91506020830135614d8b81614c48565b809150509250929050565b600080600080600080600060e0888a031215614db157600080fd5b8735614dbc81614c48565b96506020880135614dcc81614c48565b95506040880135945060608801359350614de860808901614ce3565b925060a0880135915060c0880135905092959891949750929550565b600181811c90821680614e1857607f821691505b602082108103614e3857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614e6657614e66614e3e565b500390565b600060208284031215614e7d57600080fd5b5051919050565b600060208284031215614e9657600080fd5b81518015158114610ac057600080fd5b60008219821115614eb957614eb9614e3e565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201614ee657614ee6614e3e565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615614f1d57614f1d614e3e565b500290565b600082614f3f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715614f7d57614f7d614f44565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614fac57614fac614f44565b604052919050565b600067ffffffffffffffff821115614fce57614fce614f44565b5060051b60200190565b600082601f830112614fe957600080fd5b81516020614ffe614ff983614fb4565b614f83565b82815260059290921b8401810191818101908684111561501d57600080fd5b8286015b8481101561504157805161503481614c48565b8352918301918301615021565b509695505050505050565b6000602080838503121561505f57600080fd5b825167ffffffffffffffff8082111561507757600080fd5b908401906080828703121561508b57600080fd5b615093614f5a565b8251828111156150a257600080fd5b8301601f810188136150b357600080fd5b80516150c1614ff982614fb4565b81815260059190911b8201860190868101908a8311156150e057600080fd5b928701925b828410156150fe578351825292870192908701906150e5565b8452505050828401518281111561511457600080fd5b61512088828601614fd8565b8583015250604083015193508184111561513957600080fd5b61514587858501614fd8565b6040820152606083015160608201528094505050505092915050565b600080835481600182811c91508083168061517d57607f831692505b6020808410820361519c57634e487b7160e01b86526022600452602486fd5b8180156151b057600181146151c1576151ee565b60ff198616895284890196506151ee565b60008a81526020902060005b868110156151e65781548b8201529085019083016151cd565b505084890196505b509498975050505050505050565b60006020828403121561520e57600080fd5b8151610ac081614c48565b600081518084526020808501945080840160005b838110156152495781518752958201959082019060010161522d565b509495945050505050565b600081518084526020808501945080840160005b838110156152495781516001600160a01b031687529582019590820190600101615268565b6020815260008251608060208401526152a960a0840182615219565b90506020840151601f19808584030160408601526152c78383615254565b92506040860151915080858403016060860152506152e58282615254565b915050606084015160808401528091505092915050565b8381526060602082015260006153156060830185615219565b905060ff83166040830152949350505050565b84815260006001600160a01b038086166020840152808516604084015250608060608301528251608080840152615363610100840182615254565b90506020840151607f19808584030160a08601526153818383615219565b925060408601519150808584030160c08601525061539f8282614c09565b9150506060840151151560e08401528091505095945050505050565b600082516153cd818460208701614bd9565b919091019291505056fea26469706673582212207affb3a9ab18eb9f473aac335790c40101f17be5bc9f4556f1cc422c5a9b083864736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103d05760003560e01c806395d89b41116101ff578063c89039c51161011a578063e75ab045116100ad578063f2fde38b1161007c578063f2fde38b146108f4578063f6314d0714610907578063f7c618c11461091a578063fdb5a03e1461094157600080fd5b8063e75ab0451461089f578063eab89a5a146108b2578063ed24911d146108c5578063ee99205c146108cd57600080fd5b8063d563ee03116100e9578063d563ee031461082d578063da09c72c14610840578063dd62ed3e14610853578063dd8ce4d61461088c57600080fd5b8063c89039c5146107b9578063ccabd864146107e0578063d2c35ce814610807578063d505accf1461081a57600080fd5b8063b52a321f11610192578063c2d8f26f11610161578063c2d8f26f14610778578063c415b95c1461078b578063c4b24a461461079e578063c851cc32146107a657600080fd5b8063b52a321f14610747578063b6b55f2514610754578063b9e57b8014610767578063bd079f551461076f57600080fd5b8063a4d5e67c116101ce578063a4d5e67c14610706578063a8ae2b7c14610719578063a9059cbb1461072c578063ac67e1af1461073f57600080fd5b806395d89b41146106b157806399729ec1146106b95780639c9b2e21146106cc5780639e4e7318146106df57600080fd5b80635e4c57a4116102ef5780637ae26773116102825780638980f11f116102515780638980f11f146106715780638aff733d146106845780638da5cb5b1461068d5780639291d5631461069e57600080fd5b80637ae26773146106235780637d882097146106365780637ecebe001461063e578063818372301461065e57600080fd5b8063715018a6116102be578063715018a6146105ba57806373f43d6d146105c25780637897e7f6146105e95780637a7cfdbb146105fc57600080fd5b80635e4c57a41461056d5780635ea682ea14610575578063666d25b91461057e57806370a082311461059157600080fd5b8063258250da11610367578063313ce56711610336578063313ce567146105105780633a06a5611461052a5780633e0dc34e146105335780634a970be71461055a57600080fd5b8063258250da146104b95780632e1a7d4d146104c15780632f4f21e2146104d657806330adf81f146104e957600080fd5b806318160ddd116103a357806318160ddd1461047657806320606b701461047f57806323b872dd146104a6578063247d284b1461041657600080fd5b806306fdde03146103d5578063095ea7b3146103f35780631105603514610416578063158274a514610437575b600080fd5b6103dd610949565b6040516103ea9190614c35565b60405180910390f35b610406610401366004614c5d565b6109d7565b60405190151581526020016103ea565b610429610424366004614c89565b6109ed565b6040519081526020016103ea565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103ea565b61042960025481565b6104297f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104066104b4366004614ca2565b6109fe565b600d54610429565b6104d46104cf366004614c89565b610ac7565b005b6104d46104e4366004614c5d565b610bed565b6104297f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610518601281565b60405160ff90911681526020016103ea565b610429600f5481565b6104297f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610568366004614cf9565b610bfb565b6104d4610cc9565b610429600c5481565b6104d461058c366004614c89565b610d79565b61042961059f366004614d40565b6001600160a01b031660009081526004602052604090205490565b6104d4610ffa565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d46105f7366004614c89565b61109e565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610631366004614d5d565b611170565b61042961123d565b61042961064c366004614d40565b60056020526000908152604090205481565b6104d461066c366004614c89565b6112cd565b6104d461067f366004614c5d565b61135f565b610429600b5481565b6006546001600160a01b031661045e565b6104d46106ac366004614d40565b611421565b6103dd6114e4565b6104d46106c7366004614c89565b6114f1565b6104d46106da366004614d40565b61159f565b6104297fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104d4610714366004614d40565b61173a565b6104d4610727366004614c89565b61193d565b61040661073a366004614c5d565b6119eb565b6104d46119f8565b600a546104069060ff1681565b6104d4610762366004614c89565b611a93565b610429611aa0565b61042960095481565b60105461045e906001600160a01b031681565b60085461045e906001600160a01b031681565b610429611adf565b6104d46107b4366004614d40565b611e34565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104067f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610815366004614d40565b611eee565b6104d4610828366004614d96565b611fb1565b6104d461083b366004614c5d565b6120c4565b60075461045e906001600160a01b031681565b610429610861366004614d5d565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61042961089a366004614c89565b612143565b61045e6108ad366004614c89565b612189565b6104296108c0366004614c89565b6121b3565b6104296121e9565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d4610902366004614d40565b612289565b600e5461045e906001600160a01b031681565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d46123bb565b6000805461095690614e04565b80601f016020809104026020016040519081016040528092919081815260200182805461098290614e04565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b505050505081565b60006109e4338484612416565b50600192915050565b60006109f882612524565b92915050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610a3857506000198114155b15610aae576000610a498583614e54565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610ab986868661253e565b6001925050505b9392505050565b6000610ad2826121b3565b905060008111610b4f5760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a3a576974686472617720616d6f756e7420746f60448201527f6f206c6f7700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000610b5a82612662565b90506000610b6783612524565b9050610ba833610b778385614e54565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906126fe565b610bb2338561277e565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610bf78282612812565b5050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b50505050610cc23386612812565b5050505050565b6006546001600160a01b03163314610d235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600a5460ff1615610d3357600080fd5b600a805460ff191660019081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a1565b6006546001600160a01b03163314610dd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5e9190614e6b565b9050610e68612a0a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190614e6b565b905082610f008383614e54565b1015610f9a5760405162461bcd60e51b815260206004820152604260248201527f4261736553747261746567793a3a456d657267656e637920776974686472617760448201527f206d696e696d756d2072657475726e20616d6f756e74206e6f7420726561636860648201527f6564000000000000000000000000000000000000000000000000000000000000608482015260a401610b46565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234610fc361123d565b6002546040805192835260208301919091520160405180910390a1600a5460ff161515600103610ff557610ff56119f8565b505050565b6006546001600160a01b031633146110545760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146110f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6000811161110557600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611132573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a150565b6007546001600160a01b031633146111c15760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190614e84565b610bf757600080fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190614e6b565b905090565b6007546001600160a01b0316331461131e5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b60095460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600955565b6006546001600160a01b031633146113b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600081116113c657600080fd5b6113da6001600160a01b03831633836126fe565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b0316331461147b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600754604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6001805461095690614e04565b6007546001600160a01b031633146115425760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b612710600b54826115539190614ea6565b111561155e57600080fd5b600c5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600c55565b6007546001600160a01b031633146115f05760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b6000805b600d5481101561164757600d818154811061161157611611614ebe565b6000918252602090912001546001600160a01b039081169084160361163557600191505b8061163f81614ed4565b9150506115f4565b5080156116bc5760405162461bcd60e51b815260206004820152602860248201527f4261736553747261746567793a3a52657761726420616c726561647920636f6e60448201527f66696775726564210000000000000000000000000000000000000000000000006064820152608401610b46565b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384169081179091556040519081527f1714865bf5baa84e3439536a013c87cfe030b4cd69f344a5f2a4877de3d517ce90602001611415565b6007546001600160a01b0316331461178b5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b6000805b600d5481101561185b57600d81815481106117ac576117ac614ebe565b6000918252602090912001546001600160a01b039081169084160361184957600d8054600193506117de908490614e54565b815481106117ee576117ee614ebe565b600091825260209091200154600d80546001600160a01b03909216918390811061181a5761181a614ebe565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8061185381614ed4565b91505061178f565b50806118ce5760405162461bcd60e51b8152602060048201526024808201527f4261736553747261746567793a3a526577617264206e6f7420636f6e6669677560448201527f72656421000000000000000000000000000000000000000000000000000000006064820152608401610b46565b600d8054806118df576118df614eed565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03841681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc9101611415565b6007546001600160a01b0316331461198e5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b612710600c548261199f9190614ea6565b11156119aa57600080fd5b600b5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600b55565b60006109e433848461253e565b6007546001600160a01b03163314611a495760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b600a5460ff16611a5857600080fd5b600a805460ff19169055604051600081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590602001610d6f565b611a9d3382612812565b50565b600080611aab611adf565b90506009548110611ad757612710600b5482611ac79190614f03565b611ad19190614f22565b91505090565b600091505090565b600080611aea612b44565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b789190614e6b565b905060005b8251811015611e2d576000838281518110611b9a57611b9a614ebe565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611c105747848381518110611bf457611bf4614ebe565b6020026020010151602001818151611c0c9190614ea6565b9052505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611c7957838281518110611c5b57611c5b614ebe565b60200260200101516020015183611c729190614ea6565b9250611e1a565b6001600160a01b03811615611e1a576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf39190614e6b565b90506000858481518110611d0957611d09614ebe565b60200260200101516020015182611d209190614ea6565b90508015611e1757600e546040516377ccc49d60e11b8152600481018390526001600160a01b0385811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015611da2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dca919081019061504c565b9050600181600001515111611de0576000611e09565b80518051611df090600190614e54565b81518110611e0057611e00614ebe565b60200260200101515b611e139087614ea6565b9550505b50505b5080611e2581614ed4565b915050611b7d565b5092915050565b6007546001600160a01b03163314611e855760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b600e54604080516001600160a01b03928316815291831660208301527f2c6fb4d5ff9fad6ecf2e09cd64cbc9aad92a8b9d2cc0e5c3ddef9b529b0b5ffd910160405180910390a1600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314611f485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b600854604080516001600160a01b03928316815291831660208301527fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab741063910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b428410156120015760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610b46565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661204e83614ed4565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506120af8882868686612e68565b6120ba888888612416565b5050505050505050565b6007546001600160a01b031633146121155760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b46565b601080546001600160a01b0319166001600160a01b03841617905561213c81612710612fc8565b600f555050565b60008061214e61123d565b60025490915080158061215f575081155b1561216c57509192915050565b816121778286614f03565b6121819190614f22565b949350505050565b600d818154811061219957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806121be61123d565b6002549091508015806121cf575081155b156121de575060009392505050565b806121778386614f03565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161221e9190615161565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146122e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b6001600160a01b03811661235f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b46565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b32331461240a5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610b46565b6124146000612fdf565b565b6001600160a01b03831661246c5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610b46565b6001600160a01b0382166124c25760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610b46565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000806127106125348285614f03565b610ac09190614f22565b6001600160a01b0382166125ba5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610b46565b6001600160a01b0383166000908152600460205260409020546125de908290614e54565b6001600160a01b03808516600090815260046020526040808220939093559084168152205461260e908290614ea6565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906125179085815260200190565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156126e057600080fd5b505af11580156126f4573d6000803e3d6000fd5b5093949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ff5908490613144565b6001600160a01b0382166000908152600460205260409020546127a2908290614e54565b6001600160a01b0383166000908152600460205260409020556002546127c9908290614e54565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600a5460ff1615156001146128695760405162461bcd60e51b815260206004820152601f60248201527f4261736553747261746567793a3a4465706f736974732064697361626c6564006044820152606401610b46565b6128736001612fdf565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156128ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129239190614e84565b6129955760405162461bcd60e51b815260206004820152602b60248201527f4261736553747261746567793a3a4465706f73697420746f6b656e207472616e60448201527f73666572206661696c65640000000000000000000000000000000000000000006064820152608401610b46565b60006129a082612524565b90506129b8836129b361089a8486614e54565b613229565b6129c282826132ff565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516129fd91815260200190565b60405180910390a2505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d612a4161123d565b6040518263ffffffff1660e01b8152600401612a5f91815260200190565b600060405180830381600087803b158015612a7957600080fd5b505af1158015612a8d573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f000000000000000000000000000000000000000000000000000000000000000016925063095ea7b391506044016020604051808303816000875af1158015612b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d9190614e84565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663963c94b96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bca9190614e6b565b612bd5906001614ea6565b67ffffffffffffffff811115612bed57612bed614f44565b604051908082528060200260200182016040528015612c3257816020015b6040805180820190915260008082526020820152815260200190600190039081612c0b5790505b50905060005b60018251612c469190614e54565b811015612df3576040517f54c49fe9000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354c49fe990602401602060405180830381865afa158015612cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf291906151fc565b6040517f33fd6f740000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0380831660248301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906333fd6f7490604401602060405180830381865afa158015612d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da19190614e6b565b90506040518060400160405280836001600160a01b0316815260200182815250848481518110612dd357612dd3614ebe565b602002602001018190525050508080612deb90614ed4565b915050612c38565b5060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001612e3661337f565b8152508160018351612e489190614e54565b81518110612e5857612e58614ebe565b6020908102919091010152919050565b6000612e726121e9565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612f18573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612f4e5750866001600160a01b0316816001600160a01b0316145b612fbf5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610b46565b50505050505050565b600081831115612fd85781610ac0565b5090919050565b6000612fe9613aec565b9050600954811115610bf7576000612710600c54836130089190614f03565b6130129190614f22565b9050801561305457600854613054906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836126fe565b60008361307b57612710600b548461306c9190614f03565b6130769190614f22565b61307e565b60005b905080156130ba576130ba6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836126fe565b60006130d9826130ca8587614e54565b6130d49190614e54565b613e5e565b90508015610cc25760006130ec82612524565b90506130f882826132ff565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461312161123d565b6002546040805192835260208301919091520160405180910390a1505050505050565b6000613199826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f939092919063ffffffff16565b805190915015610ff557808060200190518101906131b79190614e84565b610ff55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b46565b600081116132795760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610b46565b806002546132879190614ea6565b6002556001600160a01b0382166000908152600460205260409020546132ae908290614ea6565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906128069085815260200190565b600082116133755760405162461bcd60e51b815260206004820152602260248201527f4261736553747261746567793a3a5374616b6520616d6f756e7420746f6f206c60448201527f6f770000000000000000000000000000000000000000000000000000000000006064820152608401610b46565b610bf78282613fa2565b6040516303638f4960e51b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636c71e92090602401602060405180830381865afa15801561340a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342e9190614e84565b6134385750600090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ef78d4fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134bc9190614e6b565b6040517f7598108c000000000000000000000000000000000000000000000000000000008152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637598108c90602401602060405180830381865afa158015613540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135649190614e6b565b6040517ffec8ee0c000000000000000000000000000000000000000000000000000000008152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fec8ee0c90602401602060405180830381865afa1580156135e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360c9190614e6b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317e280896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561366e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136929190614e6b565b9050824211801561372257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639c868ac06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137209190614e84565b155b1561386c5782600061375862093a8061373b8482614ea6565b6137459190614f22565b6137529062093a80614f03565b42612fc8565b90505b60006137678383614e54565b9050831561383f5783816001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fadd59ab6137ad62093a8088614f22565b6040518263ffffffff1660e01b81526004016137cb91815260200190565b602060405180830381865afa1580156137e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380c9190614e6b565b61381e90678ac7230489e80000614f03565b6138289190614f03565b6138329190614f22565b61383c9086614ea6565b94505b42820361384c5750613869565b8192506138618262093a806137529190614ea6565b91505061375b565b50505b6040517f8b752bb00000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f00000000000000000000000000000000000000000000000000000000000000001690638b752bb090604401602060405180830381865afa158015613911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139359190614e6b565b6040517fde263bfa000000000000000000000000000000000000000000000000000000008152306004820152678ac7230489e80000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de263bfa90602401602060405180830381865afa1580156139bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e09190614e6b565b6139ea9085614e54565b6040517f13ecb1ca0000000000000000000000000000000000000000000000000000000081523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906313ecb1ca90602401602060405180830381865afa158015613a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8b9190614e6b565b613a959190614f03565b613a9f9190614f22565b613aa99190614e54565b6010549095506001600160a01b031615613ae557612710600f5486613ace9190614f03565b613ad89190614f22565b613ae29086614e54565b94505b5050505090565b6000613af66140ed565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b819190614e6b565b600d5490915060005b81811015613e56576000600d8281548110613ba757613ba7614ebe565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613cd257478015613c64577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613c4a57600080fd5b505af1158015613c5e573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613cd057613cc78186614ea6565b94505050613e44565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d3d9190614e6b565b9050600081118015613d8157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15613e4157600e546040516377ccc49d60e11b8152600481018390526001600160a01b0384811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613e00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e28919081019061504c565b9050613e33816143be565b613e3d9087614ea6565b9550505b50505b80613e4e81614ed4565b915050613b8a565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613f8a57600e546040516377ccc49d60e11b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152600092169063ef99893a90606401600060405180830381865afa158015613f53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f7b919081019061504c565b9050613f86816143be565b9250505b6109f88261456b565b60606121818484600085614a68565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140559190614e84565b506040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156140d157600080fd5b505af11580156140e5573d6000803e3d6000fd5b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561414857600080fd5b505af115801561415c573d6000803e3d6000fd5b50506040516303638f4960e51b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000169250636c71e9209150602401602060405180830381865afa1580156141e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061420a9190614e84565b15612414576040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a62784290602401600060405180830381600087803b1580156142ab57600080fd5b505af11580156142bf573d6000803e3d6000fd5b50506010546001600160a01b0316159150612414905057600f546040516370a0823160e01b8152306004820152600091612710916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015614344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143689190614e6b565b6143729190614f03565b61437c9190614f22565b90508015611a9d57601054611a9d906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836126fe565b805151600090158015906143fb575081518051600091906143e190600190614e54565b815181106143f1576143f1614ebe565b6020026020010151115b1561456357816040015160008151811061441757614417614ebe565b60200260200101516001600160a01b031663095ea7b3600e60009054906101000a90046001600160a01b0316846000015160008151811061445a5761445a614ebe565b60200260200101516040518363ffffffff1660e01b81526004016144939291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156144b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144d69190614e84565b50600e546040517f5b2466160000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635b2466169061452090859060040161528d565b6020604051808303816000875af115801561453f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190614e6b565b506000919050565b601154600090819067ffffffffffffffff81111561458b5761458b614f44565b6040519080825280602002602001820160405280156145b4578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006145e55781516145f3565b600182516145f39190614e54565b67ffffffffffffffff81111561460b5761460b614f44565b604051908082528060200260200182016040528015614634578160200160208202803683370190505b5090506000805b83518110156147af577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166011828154811061468157614681614ebe565b6000918252602090912001546001600160a01b0316146146a25760006146a4565b855b8482815181106146b6576146b6614ebe565b6020026020010181815250507f0000000000000000000000000000000000000000000000000000000000000000801561470e57507f000000000000000000000000000000000000000000000000000000000000000081145b61479d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166011828154811061474f5761474f614ebe565b6000918252602090912001546001600160a01b031614614770576000614772565b855b83838151811061478457614784614ebe565b60209081029190910101528161479981614ed4565b9250505b806147a781614ed4565b91505061463b565b50600060018360006040516020016147c9939291906152fc565b60408051601f198184030181526011805460a060208202860181019094526080850181815292955060009493849392919084018282801561483357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614815575b505050505081526020018681526020018381526020016000151581525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b81526004016148d49291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156148f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149179190614e84565b506040517fb95cac280000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b95cac28906149a3907f000000000000000000000000000000000000000000000000000000000000000090309081908790600401615328565b600060405180830381600087803b1580156149bd57600080fd5b505af11580156149d1573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa158015614a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a5d9190614e6b565b979650505050505050565b606082471015614ae05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b46565b6001600160a01b0385163b614b375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b46565b600080866001600160a01b03168587604051614b5391906153bb565b60006040518083038185875af1925050503d8060008114614b90576040519150601f19603f3d011682016040523d82523d6000602084013e614b95565b606091505b5091509150614a5d82828660608315614baf575081610ac0565b825115614bbf5782518084602001fd5b8160405162461bcd60e51b8152600401610b469190614c35565b60005b83811015614bf4578181015183820152602001614bdc565b83811115614c03576000848401525b50505050565b60008151808452614c21816020860160208601614bd9565b601f01601f19169290920160200192915050565b602081526000610ac06020830184614c09565b6001600160a01b0381168114611a9d57600080fd5b60008060408385031215614c7057600080fd5b8235614c7b81614c48565b946020939093013593505050565b600060208284031215614c9b57600080fd5b5035919050565b600080600060608486031215614cb757600080fd5b8335614cc281614c48565b92506020840135614cd281614c48565b929592945050506040919091013590565b803560ff81168114614cf457600080fd5b919050565b600080600080600060a08688031215614d1157600080fd5b8535945060208601359350614d2860408701614ce3565b94979396509394606081013594506080013592915050565b600060208284031215614d5257600080fd5b8135610ac081614c48565b60008060408385031215614d7057600080fd5b8235614d7b81614c48565b91506020830135614d8b81614c48565b809150509250929050565b600080600080600080600060e0888a031215614db157600080fd5b8735614dbc81614c48565b96506020880135614dcc81614c48565b95506040880135945060608801359350614de860808901614ce3565b925060a0880135915060c0880135905092959891949750929550565b600181811c90821680614e1857607f821691505b602082108103614e3857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614e6657614e66614e3e565b500390565b600060208284031215614e7d57600080fd5b5051919050565b600060208284031215614e9657600080fd5b81518015158114610ac057600080fd5b60008219821115614eb957614eb9614e3e565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201614ee657614ee6614e3e565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615614f1d57614f1d614e3e565b500290565b600082614f3f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715614f7d57614f7d614f44565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614fac57614fac614f44565b604052919050565b600067ffffffffffffffff821115614fce57614fce614f44565b5060051b60200190565b600082601f830112614fe957600080fd5b81516020614ffe614ff983614fb4565b614f83565b82815260059290921b8401810191818101908684111561501d57600080fd5b8286015b8481101561504157805161503481614c48565b8352918301918301615021565b509695505050505050565b6000602080838503121561505f57600080fd5b825167ffffffffffffffff8082111561507757600080fd5b908401906080828703121561508b57600080fd5b615093614f5a565b8251828111156150a257600080fd5b8301601f810188136150b357600080fd5b80516150c1614ff982614fb4565b81815260059190911b8201860190868101908a8311156150e057600080fd5b928701925b828410156150fe578351825292870192908701906150e5565b8452505050828401518281111561511457600080fd5b61512088828601614fd8565b8583015250604083015193508184111561513957600080fd5b61514587858501614fd8565b6040820152606083015160608201528094505050505092915050565b600080835481600182811c91508083168061517d57607f831692505b6020808410820361519c57634e487b7160e01b86526022600452602486fd5b8180156151b057600181146151c1576151ee565b60ff198616895284890196506151ee565b60008a81526020902060005b868110156151e65781548b8201529085019083016151cd565b505084890196505b509498975050505050505050565b60006020828403121561520e57600080fd5b8151610ac081614c48565b600081518084526020808501945080840160005b838110156152495781518752958201959082019060010161522d565b509495945050505050565b600081518084526020808501945080840160005b838110156152495781516001600160a01b031687529582019590820190600101615268565b6020815260008251608060208401526152a960a0840182615219565b90506020840151601f19808584030160408601526152c78383615254565b92506040860151915080858403016060860152506152e58282615254565b915050606084015160808401528091505092915050565b8381526060602082015260006153156060830185615219565b905060ff83166040830152949350505050565b84815260006001600160a01b038086166020840152808516604084015250608060608301528251608080840152615363610100840182615254565b90506020840151607f19808584030160a08601526153818383615219565b925060408601519150808584030160c08601525061539f8282614c09565b9150506060840151151560e08401528091505095945050505050565b600082516153cd818460208701614bd9565b919091019291505056fea26469706673582212207affb3a9ab18eb9f473aac335790c40101f17be5bc9f4556f1cc422c5a9b083864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "recoverGas(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens available to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "disableDeposits()": {
        "notice": "Disable deposits"
      },
      "enableDeposits()": {
        "notice": "Enable deposits"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "recoverGas(uint256)": {
        "notice": "Recover GAS from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateFeeCollector(address)": {
        "notice": "Update feeCollector"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 560,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 566,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 586,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8964,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2566,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "devAddr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2568,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2570,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2572,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2574,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2576,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10563,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10566,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "simpleRouter",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISimpleRouter)6372"
      },
      {
        "astId": 63601,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "boostFeeBips",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 63603,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "boostFeeReceiver",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 63608,
        "contract": "contracts/strategies/crosschain/balancer/BalancerDirectJoinStrategy.sol:BalancerDirectJoinStrategy",
        "label": "poolTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISimpleRouter)6372": {
        "encoding": "inplace",
        "label": "contract ISimpleRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}