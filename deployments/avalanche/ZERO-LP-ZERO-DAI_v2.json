{
  "address": "0xfE0521F000d20f0bb9bB2cBa51dC9066468671f9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvestBeforeDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "UpdateRequireReinvestBeforeDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUIRE_REINVEST_BEFORE_DEPOSIT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IStakingRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensToApprove",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "approvalAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        }
      ],
      "name": "tokenAllow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvestBeforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRequireReinvestBeforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07957e9b3408cf817b404dc691ab024d4ce1fdcbe6d2425a792bf02ecd808b67",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xfE0521F000d20f0bb9bB2cBa51dC9066468671f9",
    "transactionIndex": 0,
    "gasUsed": "5003920",
    "logsBloom": "0x
    "blockHash": "0x9a28a0cec0a0b7b344a80e70f7a88ab180f78662bfe63969fbfca7613a27f142",
    "transactionHash": "0x07957e9b3408cf817b404dc691ab024d4ce1fdcbe6d2425a792bf02ecd808b67",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 733992,
        "transactionHash": "0x07957e9b3408cf817b404dc691ab024d4ce1fdcbe6d2425a792bf02ecd808b67",
        "address": "0xfE0521F000d20f0bb9bB2cBa51dC9066468671f9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9a28a0cec0a0b7b344a80e70f7a88ab180f78662bfe63969fbfca7613a27f142"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 733992,
        "transactionHash": "0x07957e9b3408cf817b404dc691ab024d4ce1fdcbe6d2425a792bf02ecd808b67",
        "address": "0xfE0521F000d20f0bb9bB2cBa51dC9066468671f9",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x9a28a0cec0a0b7b344a80e70f7a88ab180f78662bfe63969fbfca7613a27f142"
      }
    ],
    "blockNumber": 733992,
    "cumulativeGasUsed": "5003920",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0088997D32CED9bf97bD1C7cA0A2a8d92D0aB5cd",
    "0x008E26068B3EB40B443d3Ea88c1fF99B789c10F7",
    "0xAfE2d3154bd3eC5601b610145923cb0ECA1937De",
    "0x85995d5f8ee9645cA855e92de16FA62D26398060"
  ],
  "solcInputHash": "0461c23b17ee718c19b3620d4788efcb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvestBeforeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"UpdateRequireReinvestBeforeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUIRE_REINVEST_BEFORE_DEPOSIT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToApprove\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"approvalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"name\":\"tokenAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvestBeforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRequireReinvestBeforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"Unclaimed rewards from staking contract\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"emergencyWithdraw()\":{\"details\":\"Reward tokens are not automatically collectedNew deposits will be effectively disabled\"},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"Estimated rewards tokens earned for calling `reinvest()`\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"reinvest()\":{\"details\":\"This external function requires minimum tokens to be met\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenAllow(address[],uint256[],address[])\":{\"params\":{\"approvalAmounts\":\"approval amounts\",\"spenders\":\"address allowed to spend tokens\",\"tokensToApprove\":\"tokens to approve\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateMinTokensToReinvestBeforeDeposit(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateReinvestReward(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of receipt tokens to redeem\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_TYPEHASH()\":{\"notice\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Unclaimed rewards from staking contract\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"emergencyWithdraw()\":{\"notice\":\"Allows exit from Staking Contract without additional logic\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward for caller\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest rewards from staking contract to deposit tokens\"},\"tokenAllow(address[],uint256[],address[])\":{\"notice\":\"Set approvals for tokens\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest minimum threshold for external callers\"},\"updateMinTokensToReinvestBeforeDeposit(uint256)\":{\"notice\":\"Update reinvest minimum threshold before a deposit\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"updateRequireReinvestBeforeDeposit()\":{\"notice\":\"Toggle requirement to reinvest before deposit\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw LP tokens by redeeming receipt tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DexStrategyV2.sol\":\"DexStrategyV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DexStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SnowballERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\ncontract DexStrategyV2 is SnowballERC20, Ownable {\\n  using SafeMath for uint;\\n\\n  uint public totalDeposits;\\n\\n  IRouter public router;\\n  IPair public depositToken;\\n  IERC20 private token0;\\n  IERC20 private token1;\\n  IERC20 public rewardToken;\\n  IStakingRewards public stakingContract;\\n\\n  uint public MIN_TOKENS_TO_REINVEST = 20000;\\n  uint public REINVEST_REWARD_BIPS = 500;\\n  uint public ADMIN_FEE_BIPS = 500;\\n  uint constant private BIPS_DIVISOR = 10000;\\n  bool public REQUIRE_REINVEST_BEFORE_DEPOSIT;\\n  uint public MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT = 20;\\n\\n  event Deposit(address indexed account, uint amount);\\n  event Withdraw(address indexed account, uint amount);\\n  event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n  event Recovered(address token, uint amount);\\n  event UpdateAdminFee(uint oldValue, uint newValue);\\n  event UpdateReinvestReward(uint oldValue, uint newValue);\\n  event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n  event UpdateRequireReinvestBeforeDeposit(bool newValue);\\n  event UpdateMinTokensToReinvestBeforeDeposit(uint oldValue, uint newValue);\\n\\n  constructor(\\n    address _depositToken,\\n    address _rewardToken, \\n    address _stakingContract, \\n    address _router\\n  ) {\\n    depositToken = IPair(_depositToken);\\n    rewardToken = IERC20(_rewardToken);\\n    stakingContract = IStakingRewards(_stakingContract);\\n    router = IRouter(_router);\\n\\n    address _token0 = IPair(depositToken).token0();\\n    address _token1 = IPair(depositToken).token1();\\n    token0 = IERC20(_token0);\\n    token1 = IERC20(_token1);\\n\\n    name = string(\\n      abi.encodePacked(\\n        \\\"Snowball: \\\",\\n        depositToken.symbol(), \\\" \\\",\\n        IERC20(_token0).symbol(), \\\"-\\\",\\n        IERC20(_token1).symbol()\\n      )\\n    );\\n\\n    emit Reinvest(0, 0);\\n  }\\n\\n  /**\\n    * @dev Throws if called by smart contract\\n    */\\n  modifier onlyEOA() {\\n      require(tx.origin == msg.sender, \\\"onlyEOA\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @notice Set approvals for tokens\\n   * @param tokensToApprove tokens to approve\\n   * @param approvalAmounts approval amounts\\n   * @param spenders address allowed to spend tokens\\n   */\\n  function tokenAllow(\\n      address[] memory tokensToApprove, \\n      uint256[] memory approvalAmounts, \\n      address[] memory spenders\\n  ) external onlyOwner {\\n    require(\\n      tokensToApprove.length == approvalAmounts.length\\n      && tokensToApprove.length == spenders.length\\n    , \\\"not same length\\\");\\n    for(uint i = 0; i < tokensToApprove.length; i++) {\\n      IERC20 token = IERC20(tokensToApprove[i]);\\n      uint allowance = token.allowance(address(this), spenders[i]);\\n      if (\\n        allowance != approvalAmounts[i] &&\\n        (allowance != uint256(-1) || approvalAmounts[i] == 0)\\n      ) {\\n        require(token.approve(spenders[i], approvalAmounts[i]), \\\"approve failed\\\");\\n      }\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Deposit tokens to receive receipt tokens\\n   * @param amount Amount of tokens to deposit\\n   */\\n  function deposit(uint amount) external {\\n    _deposit(amount);\\n  }\\n\\n  /**\\n   * @notice Deposit using Permit\\n   * @param amount Amount of tokens to deposit\\n   * @param deadline The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    _deposit(amount);\\n  }\\n\\n  function _deposit(uint amount) internal {\\n    require(totalDeposits >= totalSupply, \\\"deposit failed\\\");\\n    if (REQUIRE_REINVEST_BEFORE_DEPOSIT) {\\n      uint unclaimedRewards = checkReward();\\n      if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT) {\\n        _reinvest(unclaimedRewards);\\n      }\\n    }\\n    require(depositToken.transferFrom(msg.sender, address(this), amount), \\\"transferFrom failed\\\");\\n    _stakeDepositTokens(amount);\\n    _mint(msg.sender, getSharesForDepositTokens(amount));\\n    totalDeposits = totalDeposits.add(amount);\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw LP tokens by redeeming receipt tokens\\n   * @param amount Amount of receipt tokens to redeem\\n   */\\n  function withdraw(uint amount) external {\\n    uint depositTokenAmount = getDepositTokensForShares(amount);\\n    if (depositTokenAmount > 0) {\\n      _withdrawDepositTokens(depositTokenAmount);\\n      require(depositToken.transfer(msg.sender, depositTokenAmount), \\\"transfer failed\\\");\\n      _burn(msg.sender, amount);\\n      totalDeposits = totalDeposits.sub(depositTokenAmount);\\n      emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate receipt tokens for a given amount of deposit tokens\\n   * @dev If contract is empty, use 1:1 ratio\\n   * @dev Could return zero shares for very low amounts of deposit tokens\\n   * @param amount deposit tokens\\n   * @return receipt tokens\\n   */\\n  function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return amount;\\n    }\\n    return amount.mul(totalSupply).div(totalDeposits);\\n  }\\n\\n  /**\\n   * @notice Calculate deposit tokens for a given amount of receipt tokens\\n   * @param amount receipt tokens\\n   * @return deposit tokens\\n   */\\n  function getDepositTokensForShares(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return 0;\\n    }\\n    return amount.mul(totalDeposits).div(totalSupply);\\n  }\\n\\n  /**\\n   * @notice Unclaimed rewards from staking contract\\n   * @return Unclaimed rewards from staking contract\\n   */\\n  function checkReward() public view returns (uint) {\\n    return stakingContract.earned(address(this));\\n  }\\n\\n  /**\\n   * @notice Estimate reinvest reward for caller\\n   * @return Estimated rewards tokens earned for calling `reinvest()`\\n   */\\n  function estimateReinvestReward() external view returns (uint) {\\n    uint unclaimedRewards = checkReward();\\n    if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n      return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to deposit tokens\\n   * @dev This external function requires minimum tokens to be met\\n   */\\n  function reinvest() external onlyEOA {\\n    uint unclaimedRewards = checkReward();\\n    require(unclaimedRewards >= MIN_TOKENS_TO_REINVEST, \\\"MIN_TOKENS_TO_REINVEST\\\");\\n    _reinvest(unclaimedRewards);\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to deposit tokens\\n   * @dev This internal function does not require mininmum tokens to be met\\n   */\\n  function _reinvest(uint amount) internal {\\n    stakingContract.getReward();\\n\\n    uint adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n    if (adminFee > 0) {\\n      require(rewardToken.transfer(owner(), adminFee), \\\"admin fee transfer failed\\\");\\n    }\\n\\n    uint reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    if (reinvestFee > 0) {\\n      require(rewardToken.transfer(msg.sender, reinvestFee), \\\"reinvest fee transfer failed\\\");\\n    }\\n\\n    uint lpTokenAmount = _convertRewardTokensToDepositTokens(amount.sub(adminFee).sub(reinvestFee));\\n    _stakeDepositTokens(lpTokenAmount);\\n    totalDeposits = totalDeposits.add(lpTokenAmount);\\n\\n    emit Reinvest(totalDeposits, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Converts entire reward token balance to deposit tokens\\n   * @dev Always converts through router; there are no price checks enabled\\n   * @return deposit tokens received\\n   */\\n  function _convertRewardTokensToDepositTokens(uint amount) internal returns (uint) {\\n    uint amountIn = amount.div(2);\\n    require(amountIn > 0, \\\"amount too low\\\");\\n\\n    // swap to token0\\n    address[] memory path0 = new address[](2);\\n    path0[0] = address(rewardToken);\\n    path0[1] = address(token0);\\n\\n    uint amountOutToken0 = amountIn;\\n    if (path0[0] != path0[1]) {\\n      uint[] memory amountsOutToken0 = router.getAmountsOut(amountIn, path0);\\n      amountOutToken0 = amountsOutToken0[amountsOutToken0.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken0, path0, address(this), block.timestamp);\\n    }\\n\\n    // swap to token1\\n    address[] memory path1 = new address[](2);\\n    path1[0] = path0[0];\\n    path1[1] = address(token1);\\n\\n    uint amountOutToken1 = amountIn;\\n    if (path1[0] != path1[1]) {\\n      uint[] memory amountsOutToken1 = router.getAmountsOut(amountIn, path1);\\n      amountOutToken1 = amountsOutToken1[amountsOutToken1.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken1, path1, address(this), block.timestamp);\\n    }\\n\\n    (,,uint liquidity) = router.addLiquidity(\\n      path0[1], path1[1],\\n      amountOutToken0, amountOutToken1,\\n      0, 0,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    return liquidity;\\n  }\\n\\n  /**\\n   * @notice Stakes deposit tokens in Staking Contract\\n   * @param amount deposit tokens to stake\\n   */\\n  function _stakeDepositTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.stake(amount);\\n  }\\n\\n  /**\\n   * @notice Withdraws deposit tokens from Staking Contract\\n   * @dev Reward tokens are automatically collected\\n   * @dev Reward tokens are not automatically reinvested\\n   * @param amount deposit tokens to remove\\n   */\\n  function _withdrawDepositTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.withdraw(amount);\\n  }\\n\\n  /**\\n   * @notice Allows exit from Staking Contract without additional logic\\n   * @dev Reward tokens are not automatically collected\\n   * @dev New deposits will be effectively disabled\\n   */\\n  function emergencyWithdraw() external onlyOwner {\\n    stakingContract.exit();\\n    totalDeposits = 0;\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold for external callers\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvest(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n    MIN_TOKENS_TO_REINVEST = newValue;\\n  }\\n\\n  /**\\n   * @notice Update admin fee\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateAdminFee(uint newValue) external onlyOwner {\\n    require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR, \\\"admin fee too high\\\");\\n    emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n    ADMIN_FEE_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Update reinvest reward\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateReinvestReward(uint newValue) external onlyOwner {\\n    require(newValue.add(ADMIN_FEE_BIPS) <= BIPS_DIVISOR, \\\"reinvest reward too high\\\");\\n    emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n    REINVEST_REWARD_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Toggle requirement to reinvest before deposit\\n   */\\n  function updateRequireReinvestBeforeDeposit() external onlyOwner {\\n    REQUIRE_REINVEST_BEFORE_DEPOSIT = !REQUIRE_REINVEST_BEFORE_DEPOSIT;\\n    emit UpdateRequireReinvestBeforeDeposit(REQUIRE_REINVEST_BEFORE_DEPOSIT);\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold before a deposit\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvestBeforeDeposit(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvestBeforeDeposit(MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT, newValue);\\n    MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT = newValue;\\n  }\\n\\n  /**\\n   * @notice Recover ERC20 from contract\\n   * @param tokenAddress token address\\n   * @param tokenAmount amount to recover\\n   */\\n  function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n    require(tokenAmount > 0, 'amount too low');\\n    IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  /**\\n   * @notice Recover AVAX from contract\\n   * @param amount amount\\n   */\\n  function recoverAVAX(uint amount) external onlyOwner {\\n    require(amount > 0, 'amount too low');\\n    msg.sender.transfer(amount);\\n    emit Recovered(address(0), amount);\\n  }\\n}\",\"keccak256\":\"0x5989487193a5cc94d4dde19a93e95fd5ca90571a8f5f2592666e2858cef9ac73\",\"license\":\"MIT\"},\"contracts/SnowballERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract SnowballERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Snowball\\\";\\n    string public symbol = \\\"SNOW\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0xc92512a1a0c127ad2b5d0e98d207c47483caa84a7e6df6141eb5d0f2b19eff44\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x95d20e03691f0c743661793bf9bcba6bbf47932bd37077ebd1341188da931c14\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(address token, uint amountTokenDesired, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountAVAX);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb1bf34011dee59a85fed0223e0d71993445c7b3dd02145ff0f06a883339ae904\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IStakingRewards {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function getRewardForDuration() external view returns (uint256);\\n    function stake(uint256 amount) external;\\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function withdraw(uint256 amount) external;\\n    function getReward() external;\\n    function exit() external;\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n}\",\"keccak256\":\"0x9676b12193d43245e7d016ce33557b15fd0acae70d91067e9d5cc83877397cff\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600881526020017f536e6f7762616c6c0000000000000000000000000000000000000000000000008152506000908051906020019062000051929190620006b3565b506040518060400160405280600481526020017f534e4f5700000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620006b3565b50614e20600e556101f4600f556101f46010556014601255348015620000c457600080fd5b5060405162005f1938038062005f198339818101604052810190620000ea9190620007f8565b6000620000fc620006ab60201b60201c565b905080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200030a57600080fd5b505afa1580156200031f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003459190620007cc565b90506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015620003b257600080fd5b505afa158015620003c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ed9190620007cc565b905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620004da57600080fd5b505afa158015620004ef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200051a919062000864565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200056157600080fd5b505afa15801562000576573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620005a1919062000864565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620005e857600080fd5b505afa158015620005fd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000628919062000864565b6040516020016200063c93929190620009b7565b6040516020818303038152906040526000908051906020019062000662929190620006b3565b507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346000806040516200069792919062000a15565b60405180910390a150505050505062000b63565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006f657805160ff191683800117855562000727565b8280016001018555821562000727579182015b828111156200072657825182559160200191906001019062000709565b5b5090506200073691906200073a565b5090565b5b80821115620007555760008160009055506001016200073b565b5090565b6000815190506200076a8162000b49565b92915050565b600082601f8301126200078257600080fd5b815162000799620007938262000a76565b62000a42565b91508082526020830160208301858383011115620007b657600080fd5b620007c383828462000b11565b50505092915050565b600060208284031215620007df57600080fd5b6000620007ef8482850162000759565b91505092915050565b600080600080608085870312156200080f57600080fd5b60006200081f8782880162000759565b9450506020620008328782880162000759565b9350506040620008458782880162000759565b9250506060620008588782880162000759565b91505092959194509250565b6000602082840312156200087757600080fd5b600082015167ffffffffffffffff8111156200089257600080fd5b620008a08482850162000770565b91505092915050565b620008b48162000afd565b82525050565b6000620008c78262000aa9565b620008d3818562000ab4565b9350620008e581856020860162000b11565b80840191505092915050565b60006200090060018362000ab4565b91507f20000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b60006200094260018362000ab4565b91507f2d000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b600062000984600a8362000ab4565b91507f536e6f7762616c6c3a20000000000000000000000000000000000000000000006000830152600a82019050919050565b6000620009c48262000975565b9150620009d28286620008ba565b9150620009df82620008f1565b9150620009ed8285620008ba565b9150620009fa8262000933565b915062000a088284620008ba565b9150819050949350505050565b600060408201905062000a2c6000830185620008a9565b62000a3b6020830184620008a9565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171562000a6c5762000a6b62000b47565b5b8060405250919050565b600067ffffffffffffffff82111562000a945762000a9362000b47565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600062000acc8262000ad3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000b0a8262000af3565b9050919050565b60005b8381101562000b3157808201518184015260208101905062000b14565b8381111562000b41576000848401525b50505050565bfe5b62000b548162000abf565b811462000b6057600080fd5b50565b6153a68062000b736000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80638da5cb5b1161015c578063d505accf116100ce578063ed24911d11610087578063ed24911d14610754578063ee99205c14610772578063f2fde38b14610790578063f7c618c1146107ac578063f887ea40146107ca578063fdb5a03e146107e85761027f565b8063d505accf14610682578063db2e21bc1461069e578063dd62ed3e146106a8578063dd8ce4d6146106d8578063e41e091314610708578063eab89a5a146107245761027f565b8063b6b55f2511610120578063b6b55f25146105d2578063b9e57b80146105ee578063bd079f551461060c578063c4b24a461461062a578063c89039c514610648578063cff1b6ef146106665761027f565b80638da5cb5b1461052c57806395d89b411461054a5780639e4e731814610568578063a8ae2b7c14610586578063a9059cbb146105a25761027f565b806330adf81f116101f5578063715018a6116101b9578063715018a61461047e5780637d882097146104885780637ecebe00146104a657806381837230146104d65780638980f11f146104f25780638aff733d1461050e5761027f565b806330adf81f146103da578063313ce567146103f85780634a970be7146104165780634ebb79161461043257806370a082311461044e5761027f565b80631331731411610247578063133173141461032a57806318160ddd1461034857806320606b7014610366578063236aecd51461038457806323b872dd1461038e5780632e1a7d4d146103be5761027f565b806303f7d9071461028457806306fdde03146102a057806307677111146102be578063095ea7b3146102dc578063114518041461030c575b600080fd5b61029e60048036038101906102999190613f3c565b6107f2565b005b6102a86108b3565b6040516102b59190614c17565b60405180910390f35b6102c6610951565b6040516102d39190614ed9565b60405180910390f35b6102f660048036038101906102f19190613dff565b610957565b6040516103039190614a7c565b60405180910390f35b61031461096e565b6040516103219190614ed9565b60405180910390f35b610332610974565b60405161033f9190614a7c565b60405180910390f35b610350610987565b60405161035d9190614ed9565b60405180910390f35b61036e61098d565b60405161037b9190614a97565b60405180910390f35b61038c6109b4565b005b6103a860048036038101906103a39190613d12565b610aa2565b6040516103b59190614a7c565b60405180910390f35b6103d860048036038101906103d39190613f3c565b610cbb565b005b6103e2610e40565b6040516103ef9190614a97565b60405180910390f35b610400610e67565b60405161040d9190614fa7565b60405180910390f35b610430600480360381019061042b9190613fdd565b610e6c565b005b61044c60048036038101906104479190613f3c565b610f15565b005b61046860048036038101906104639190613cad565b611058565b6040516104759190614ed9565b60405180910390f35b6104866110a1565b005b6104906111de565b60405161049d9190614ed9565b60405180910390f35b6104c060048036038101906104bb9190613cad565b6111e4565b6040516104cd9190614ed9565b60405180910390f35b6104f060048036038101906104eb9190613f3c565b6111fc565b005b61050c60048036038101906105079190613dff565b6112bd565b005b610516611447565b6040516105239190614ed9565b60405180910390f35b61053461144d565b60405161054191906148c2565b60405180910390f35b610552611477565b60405161055f9190614c17565b60405180910390f35b610570611515565b60405161057d9190614a97565b60405180910390f35b6105a0600480360381019061059b9190613f3c565b61153c565b005b6105bc60048036038101906105b79190613dff565b611656565b6040516105c99190614a7c565b60405180910390f35b6105ec60048036038101906105e79190613f3c565b61166d565b005b6105f6611679565b6040516106039190614ed9565b60405180910390f35b6106146116c9565b6040516106219190614ed9565b60405180910390f35b6106326116cf565b60405161063f9190614ed9565b60405180910390f35b610650611780565b60405161065d9190614bc6565b60405180910390f35b610680600480360381019061067b9190613f3c565b6117a6565b005b61069c60048036038101906106979190613d61565b6118c0565b005b6106a66119ca565b005b6106c260048036038101906106bd9190613cd6565b611ad2565b6040516106cf9190614ed9565b60405180910390f35b6106f260048036038101906106ed9190613f3c565b611b59565b6040516106ff9190614ed9565b60405180910390f35b610722600480360381019061071d9190613e3b565b611bb2565b005b61073e60048036038101906107399190613f3c565b611eb3565b60405161074b9190614ed9565b60405180910390f35b61075c611f0d565b6040516107699190614a97565b60405180910390f35b61077a611fa6565b6040516107879190614bfc565b60405180910390f35b6107aa60048036038101906107a59190613cad565b611fcc565b005b6107b4612178565b6040516107c19190614bab565b60405180910390f35b6107d261219e565b6040516107df9190614be1565b60405180910390f35b6107f06121c4565b005b6107fa61228f565b73ffffffffffffffffffffffffffffffffffffffff1661081861144d565b73ffffffffffffffffffffffffffffffffffffffff161461086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590614d99565b60405180910390fd5b7fd0f7c999974ac5e720302e1a81f85f0e86835bd50d1cdd4086c839df9c123aab601254826040516108a1929190614f24565b60405180910390a18060128190555050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109495780601f1061091e57610100808354040283529160200191610949565b820191906000526020600020905b81548152906001019060200180831161092c57829003601f168201915b505050505081565b60105481565b6000610964338484612297565b6001905092915050565b60125481565b601160009054906101000a900460ff1681565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6109bc61228f565b73ffffffffffffffffffffffffffffffffffffffff166109da61144d565b73ffffffffffffffffffffffffffffffffffffffff1614610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2790614d99565b60405180910390fd5b601160009054906101000a900460ff1615601160006101000a81548160ff0219169083151502179055507fd46852adf64681b12b81a308b01efd0a546667f68ab41ae5855c2bae7756380f601160009054906101000a900460ff16604051610a989190614a7c565b60405180910390a1565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610b8557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610ca3576000610bb9856040518060600160405280602f81526020016152ed602f9139846124629092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610c999190614ed9565b60405180910390a3505b610cae8686866124bd565b6001925050509392505050565b6000610cc682611eb3565b90506000811115610e3c57610cda816126db565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d37929190614983565b602060405180830381600087803b158015610d5157600080fd5b505af1158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190613f13565b610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf90614e79565b60405180910390fd5b610dd233836127ae565b610de7816007546128fc90919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610e339190614ed9565b60405180910390a25b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610ed39796959493929190614914565b600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050610f0e85612946565b5050505050565b610f1d61228f565b73ffffffffffffffffffffffffffffffffffffffff16610f3b61144d565b73ffffffffffffffffffffffffffffffffffffffff1614610f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8890614d99565b60405180910390fd5b60008111610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb90614cb9565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561101a573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2860008260405161104d929190614983565b60405180910390a150565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110a961228f565b73ffffffffffffffffffffffffffffffffffffffff166110c761144d565b73ffffffffffffffffffffffffffffffffffffffff161461111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111490614d99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60075481565b60056020528060005260406000206000915090505481565b61120461228f565b73ffffffffffffffffffffffffffffffffffffffff1661122261144d565b73ffffffffffffffffffffffffffffffffffffffff1614611278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126f90614d99565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600e54826040516112ab929190614f24565b60405180910390a180600e8190555050565b6112c561228f565b73ffffffffffffffffffffffffffffffffffffffff166112e361144d565b73ffffffffffffffffffffffffffffffffffffffff1614611339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133090614d99565b60405180910390fd5b6000811161137c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137390614cb9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016113b7929190614983565b602060405180830381600087803b1580156113d157600080fd5b505af11580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190613f13565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161143b929190614a53565b60405180910390a15050565b600f5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561150d5780601f106114e25761010080835404028352916020019161150d565b820191906000526020600020905b8154815290600101906020018083116114f057829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b61154461228f565b73ffffffffffffffffffffffffffffffffffffffff1661156261144d565b73ffffffffffffffffffffffffffffffffffffffff16146115b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115af90614d99565b60405180910390fd5b6127106115d060105483612b3a90919063ffffffff16565b1115611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890614eb9565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f5482604051611644929190614f24565b60405180910390a180600f8190555050565b60006116633384846124bd565b6001905092915050565b61167681612946565b50565b6000806116846116cf565b9050600e5481106116c0576116b86127106116aa600f5484612b8f90919063ffffffff16565b612bff90919063ffffffff16565b9150506116c6565b60009150505b90565b600e5481565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b815260040161172b91906148c2565b60206040518083038186803b15801561174357600080fd5b505afa158015611757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177b9190613f65565b905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117ae61228f565b73ffffffffffffffffffffffffffffffffffffffff166117cc61144d565b73ffffffffffffffffffffffffffffffffffffffff1614611822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181990614d99565b60405180910390fd5b61271061183a600f5483612b3a90919063ffffffff16565b111561187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290614e19565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601054826040516118ae929190614f24565b60405180910390a18060108190555050565b42841015611903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fa90614cf9565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558960405160200161199096959493929190614ab2565b6040516020818303038152906040528051906020012090506119b58882868686612c49565b6119c0888888612297565b5050505050505050565b6119d261228f565b73ffffffffffffffffffffffffffffffffffffffff166119f061144d565b73ffffffffffffffffffffffffffffffffffffffff1614611a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3d90614d99565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9fad8ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ab057600080fd5b505af1158015611ac4573d6000803e3d6000fd5b505050506000600781905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080611b73600754600254612b8f90919063ffffffff16565b1415611b8157819050611bad565b611baa600754611b9c60025485612b8f90919063ffffffff16565b612bff90919063ffffffff16565b90505b919050565b611bba61228f565b73ffffffffffffffffffffffffffffffffffffffff16611bd861144d565b73ffffffffffffffffffffffffffffffffffffffff1614611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2590614d99565b60405180910390fd5b81518351148015611c40575080518351145b611c7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7690614c79565b60405180910390fd5b60005b8351811015611ead576000848281518110611c9957fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30868681518110611cce57fe5b60200260200101516040518363ffffffff1660e01b8152600401611cf39291906149ac565b60206040518083038186803b158015611d0b57600080fd5b505afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d439190613f65565b9050848381518110611d5157fe5b60200260200101518114158015611da657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81141580611da557506000858481518110611d9b57fe5b6020026020010151145b5b15611e9e578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3858581518110611dd357fe5b6020026020010151878681518110611de757fe5b60200260200101516040518363ffffffff1660e01b8152600401611e0c929190614a53565b602060405180830381600087803b158015611e2657600080fd5b505af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190613f13565b611e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9490614d19565b60405180910390fd5b5b50508080600101915050611c82565b50505050565b600080611ecd600754600254612b8f90919063ffffffff16565b1415611edc5760009050611f08565b611f05600254611ef760075485612b8f90919063ffffffff16565b612bff90919063ffffffff16565b90505b919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611f429190614874565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b611f76612d80565b30604051602001611f8b959493929190614b13565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611fd461228f565b73ffffffffffffffffffffffffffffffffffffffff16611ff261144d565b73ffffffffffffffffffffffffffffffffffffffff1614612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90614d99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120af90614c39565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614612232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222990614e39565b60405180910390fd5b600061223c6116cf565b9050600e54811015612283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227a90614d39565b60405180910390fd5b61228c81612d8d565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fe90614db9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236e90614e99565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516124559190614ed9565b60405180910390a3505050565b60008383111582906124aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a19190614c17565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490614dd9565b60405180910390fd5b612599816040518060600160405280602e8152602001615343602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124629092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061262e81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b3a90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516126ce9190614ed9565b60405180910390a3505050565b6000811161271e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271590614cb9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016127799190614ed9565b600060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b5050505050565b61281a8160405180606001604052806027815260200161531c60279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124629092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061288c816040518060600160405280602781526020016152c6602791396002546124629092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516128f09190614ed9565b60405180910390a35050565b600061293e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612462565b905092915050565b600254600754101561298d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298490614e59565b60405180910390fd5b601160009054906101000a900460ff16156129c35760006129ac6116cf565b905060125481106129c1576129c081612d8d565b5b505b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612a22939291906148dd565b602060405180830381600087803b158015612a3c57600080fd5b505af1158015612a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a749190613f13565b612ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aaa90614df9565b60405180910390fd5b612abc816130f8565b612ace33612ac983611b59565b6131cb565b612ae381600754612b3a90919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612b2f9190614ed9565b60405180910390a250565b600080828401905083811015612b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7c90614c59565b60405180910390fd5b8091505092915050565b600080831415612ba25760009050612bf9565b6000828402905082848281612bb357fe5b0414612bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612beb90614d79565b60405180910390fd5b809150505b92915050565b6000612c4183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506132e5565b905092915050565b6000612c53611f0d565b85604051602001612c6592919061488b565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051612ca29493929190614b66565b6020604051602081039080840390855afa158015612cc4573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612d3857508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6e90614c99565b60405180910390fd5b50505050505050565b6000804690508091505090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612df757600080fd5b505af1158015612e0b573d6000803e3d6000fd5b505050506000612e3a612710612e2c60105485612b8f90919063ffffffff16565b612bff90919063ffffffff16565b90506000811115612f3b57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612e8b61144d565b836040518363ffffffff1660e01b8152600401612ea9929190614a53565b602060405180830381600087803b158015612ec357600080fd5b505af1158015612ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efb9190613f13565b612f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3190614d59565b60405180910390fd5b5b6000612f66612710612f58600f5486612b8f90919063ffffffff16565b612bff90919063ffffffff16565b9050600081111561306057600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612fce929190614983565b602060405180830381600087803b158015612fe857600080fd5b505af1158015612ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130209190613f13565b61305f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305690614cd9565b60405180910390fd5b5b600061308f61308a8361307c86886128fc90919063ffffffff16565b6128fc90919063ffffffff16565b613346565b905061309a816130f8565b6130af81600754612b3a90919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346007546002546040516130ea929190614f24565b60405180910390a150505050565b6000811161313b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161313290614cb9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a694fc3a826040518263ffffffff1660e01b81526004016131969190614ed9565b600060405180830381600087803b1580156131b057600080fd5b505af11580156131c4573d6000803e3d6000fd5b5050505050565b6131e081600254612b3a90919063ffffffff16565b60028190555061323881600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b3a90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516132d99190614ed9565b60405180910390a35050565b6000808311829061332c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133239190614c17565b60405180910390fd5b50600083858161333857fe5b049050809150509392505050565b60008061335d600284612bff90919063ffffffff16565b9050600081116133a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161339990614cb9565b60405180910390fd5b6060600267ffffffffffffffff811180156133bc57600080fd5b506040519080825280602002602001820160405280156133eb5781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061341e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160018151811061348857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000829050816001815181106134d457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16826000815181106134ff57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146136af576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b8152600401613581929190614ef4565b60006040518083038186803b15801561359957600080fd5b505afa1580156135ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906135d69190613ed2565b9050806001825103815181106135e857fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b8152600401613655959493929190614f4d565b600060405180830381600087803b15801561366f57600080fd5b505af1158015613683573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906136ac9190613ed2565b50505b6060600267ffffffffffffffff811180156136c957600080fd5b506040519080825280602002602001820160405280156136f85781602001602082028036833780820191505090505b5090508260008151811061370857fe5b60200260200101518160008151811061371d57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160018151811061378757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000849050816001815181106137d357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16826000815181106137fe57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146139ae576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b8152600401613880929190614ef4565b60006040518083038186803b15801561389857600080fd5b505afa1580156138ac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906138d59190613ed2565b9050806001825103815181106138e757fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b8152600401613954959493929190614f4d565b600060405180830381600087803b15801561396e57600080fd5b505af1158015613982573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906139ab9190613ed2565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e33700866001815181106139fb57fe5b602002602001015185600181518110613a1057fe5b6020026020010151878660008030426040518963ffffffff1660e01b8152600401613a429897969594939291906149d5565b606060405180830381600087803b158015613a5c57600080fd5b505af1158015613a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a949190613f8e565b92505050809650505050505050919050565b600081359050613ab581615252565b92915050565b600082601f830112613acc57600080fd5b8135613adf613ada82614ff3565b614fc2565b91508181835260208401935060208101905083856020840282011115613b0457600080fd5b60005b83811015613b345781613b1a8882613aa6565b845260208401935060208301925050600181019050613b07565b5050505092915050565b600082601f830112613b4f57600080fd5b8135613b62613b5d8261501f565b614fc2565b91508181835260208401935060208101905083856020840282011115613b8757600080fd5b60005b83811015613bb75781613b9d8882613c6e565b845260208401935060208301925050600181019050613b8a565b5050505092915050565b600082601f830112613bd257600080fd5b8151613be5613be08261501f565b614fc2565b91508181835260208401935060208101905083856020840282011115613c0a57600080fd5b60005b83811015613c3a5781613c208882613c83565b845260208401935060208301925050600181019050613c0d565b5050505092915050565b600081519050613c5381615269565b92915050565b600081359050613c6881615280565b92915050565b600081359050613c7d81615297565b92915050565b600081519050613c9281615297565b92915050565b600081359050613ca7816152ae565b92915050565b600060208284031215613cbf57600080fd5b6000613ccd84828501613aa6565b91505092915050565b60008060408385031215613ce957600080fd5b6000613cf785828601613aa6565b9250506020613d0885828601613aa6565b9150509250929050565b600080600060608486031215613d2757600080fd5b6000613d3586828701613aa6565b9350506020613d4686828701613aa6565b9250506040613d5786828701613c6e565b9150509250925092565b600080600080600080600060e0888a031215613d7c57600080fd5b6000613d8a8a828b01613aa6565b9750506020613d9b8a828b01613aa6565b9650506040613dac8a828b01613c6e565b9550506060613dbd8a828b01613c6e565b9450506080613dce8a828b01613c98565b93505060a0613ddf8a828b01613c59565b92505060c0613df08a828b01613c59565b91505092959891949750929550565b60008060408385031215613e1257600080fd5b6000613e2085828601613aa6565b9250506020613e3185828601613c6e565b9150509250929050565b600080600060608486031215613e5057600080fd5b600084013567ffffffffffffffff811115613e6a57600080fd5b613e7686828701613abb565b935050602084013567ffffffffffffffff811115613e9357600080fd5b613e9f86828701613b3e565b925050604084013567ffffffffffffffff811115613ebc57600080fd5b613ec886828701613abb565b9150509250925092565b600060208284031215613ee457600080fd5b600082015167ffffffffffffffff811115613efe57600080fd5b613f0a84828501613bc1565b91505092915050565b600060208284031215613f2557600080fd5b6000613f3384828501613c44565b91505092915050565b600060208284031215613f4e57600080fd5b6000613f5c84828501613c6e565b91505092915050565b600060208284031215613f7757600080fd5b6000613f8584828501613c83565b91505092915050565b600080600060608486031215613fa357600080fd5b6000613fb186828701613c83565b9350506020613fc286828701613c83565b9250506040613fd386828701613c83565b9150509250925092565b600080600080600060a08688031215613ff557600080fd5b600061400388828901613c6e565b955050602061401488828901613c6e565b945050604061402588828901613c98565b935050606061403688828901613c59565b925050608061404788828901613c59565b9150509295509295909350565b6000614060838361407b565b60208301905092915050565b6140758161512a565b82525050565b614084816150cb565b82525050565b614093816150cb565b82525050565b60006140a482615070565b6140ae8185615093565b93506140b98361504b565b8060005b838110156140ea5781516140d18882614054565b97506140dc83615086565b9250506001810190506140bd565b5085935050505092915050565b614100816150dd565b82525050565b61410f816150e9565b82525050565b614126614121826150e9565b615235565b82525050565b600081546001811660008114614149576001811461416e576141b2565b607f600283041661415a81876150a4565b955060ff19831686528086019350506141b2565b6002820461417c81876150a4565b95506141878561505b565b60005b828110156141a95781548189015260018201915060208101905061418a565b82880195505050505b505092915050565b6141c38161513c565b82525050565b6141d281615160565b82525050565b6141e181615184565b82525050565b6141f0816151a8565b82525050565b6141ff816151cc565b82525050565b60006142108261507b565b61421a81856150af565b935061422a818560208601615202565b61423381615241565b840191505092915050565b600061424b6026836150af565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006142b16002836150c0565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006142f1601b836150af565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000614331600f836150af565b91507f6e6f742073616d65206c656e67746800000000000000000000000000000000006000830152602082019050919050565b60006143716024836150af565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143d7600e836150af565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b6000614417601c836150af565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b6000614457600f836150af565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b6000614497600e836150af565b91507f617070726f7665206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006144d76016836150af565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b60006145176019836150af565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b60006145576021836150af565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006145bd6020836150af565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006145fd601c836150af565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b600061463d6034836150af565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b60006146a36013836150af565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b60006146e36012836150af565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b60006147236007836150af565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614763600e836150af565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006147a3600f836150af565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b60006147e3601e836150af565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b60006148236018836150af565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b61485f81615113565b82525050565b61486e8161511d565b82525050565b6000614880828461412c565b915081905092915050565b6000614896826142a4565b91506148a28285614115565b6020820191506148b28284614115565b6020820191508190509392505050565b60006020820190506148d7600083018461408a565b92915050565b60006060820190506148f2600083018661406c565b6148ff602083018561408a565b61490c6040830184614856565b949350505050565b600060e082019050614929600083018a61406c565b614936602083018961408a565b6149436040830188614856565b6149506060830187614856565b61495d6080830186614865565b61496a60a0830185614106565b61497760c0830184614106565b98975050505050505050565b6000604082019050614998600083018561406c565b6149a56020830184614856565b9392505050565b60006040820190506149c1600083018561408a565b6149ce602083018461408a565b9392505050565b6000610100820190506149eb600083018b61408a565b6149f8602083018a61408a565b614a056040830189614856565b614a126060830188614856565b614a1f60808301876141f6565b614a2c60a08301866141f6565b614a3960c083018561408a565b614a4660e0830184614856565b9998505050505050505050565b6000604082019050614a68600083018561408a565b614a756020830184614856565b9392505050565b6000602082019050614a9160008301846140f7565b92915050565b6000602082019050614aac6000830184614106565b92915050565b600060c082019050614ac76000830189614106565b614ad4602083018861408a565b614ae1604083018761408a565b614aee6060830186614856565b614afb6080830185614856565b614b0860a0830184614856565b979650505050505050565b600060a082019050614b286000830188614106565b614b356020830187614106565b614b426040830186614106565b614b4f6060830185614856565b614b5c608083018461408a565b9695505050505050565b6000608082019050614b7b6000830187614106565b614b886020830186614865565b614b956040830185614106565b614ba26060830184614106565b95945050505050565b6000602082019050614bc060008301846141ba565b92915050565b6000602082019050614bdb60008301846141c9565b92915050565b6000602082019050614bf660008301846141d8565b92915050565b6000602082019050614c1160008301846141e7565b92915050565b60006020820190508181036000830152614c318184614205565b905092915050565b60006020820190508181036000830152614c528161423e565b9050919050565b60006020820190508181036000830152614c72816142e4565b9050919050565b60006020820190508181036000830152614c9281614324565b9050919050565b60006020820190508181036000830152614cb281614364565b9050919050565b60006020820190508181036000830152614cd2816143ca565b9050919050565b60006020820190508181036000830152614cf28161440a565b9050919050565b60006020820190508181036000830152614d128161444a565b9050919050565b60006020820190508181036000830152614d328161448a565b9050919050565b60006020820190508181036000830152614d52816144ca565b9050919050565b60006020820190508181036000830152614d728161450a565b9050919050565b60006020820190508181036000830152614d928161454a565b9050919050565b60006020820190508181036000830152614db2816145b0565b9050919050565b60006020820190508181036000830152614dd2816145f0565b9050919050565b60006020820190508181036000830152614df281614630565b9050919050565b60006020820190508181036000830152614e1281614696565b9050919050565b60006020820190508181036000830152614e32816146d6565b9050919050565b60006020820190508181036000830152614e5281614716565b9050919050565b60006020820190508181036000830152614e7281614756565b9050919050565b60006020820190508181036000830152614e9281614796565b9050919050565b60006020820190508181036000830152614eb2816147d6565b9050919050565b60006020820190508181036000830152614ed281614816565b9050919050565b6000602082019050614eee6000830184614856565b92915050565b6000604082019050614f096000830185614856565b8181036020830152614f1b8184614099565b90509392505050565b6000604082019050614f396000830185614856565b614f466020830184614856565b9392505050565b600060a082019050614f626000830188614856565b614f6f6020830187614856565b8181036040830152614f818186614099565b9050614f90606083018561408a565b614f9d6080830184614856565b9695505050505050565b6000602082019050614fbc6000830184614865565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614fe957614fe861523f565b5b8060405250919050565b600067ffffffffffffffff82111561500e5761500d61523f565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561503a5761503961523f565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006150d6826150f3565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615135826151de565b9050919050565b60006151478261514e565b9050919050565b6000615159826150f3565b9050919050565b600061516b82615172565b9050919050565b600061517d826150f3565b9050919050565b600061518f82615196565b9050919050565b60006151a1826150f3565b9050919050565b60006151b3826151ba565b9050919050565b60006151c5826150f3565b9050919050565b60006151d782615113565b9050919050565b60006151e9826151f0565b9050919050565b60006151fb826150f3565b9050919050565b60005b83811015615220578082015181840152602081019050615205565b8381111561522f576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b61525b816150cb565b811461526657600080fd5b50565b615272816150dd565b811461527d57600080fd5b50565b615289816150e9565b811461529457600080fd5b50565b6152a081615113565b81146152ab57600080fd5b50565b6152b78161511d565b81146152c257600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212203ae50593c2c87dbf52a42d246572589782e1c6549d3242f93c65b507f2ecadf464736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c80638da5cb5b1161015c578063d505accf116100ce578063ed24911d11610087578063ed24911d14610754578063ee99205c14610772578063f2fde38b14610790578063f7c618c1146107ac578063f887ea40146107ca578063fdb5a03e146107e85761027f565b8063d505accf14610682578063db2e21bc1461069e578063dd62ed3e146106a8578063dd8ce4d6146106d8578063e41e091314610708578063eab89a5a146107245761027f565b8063b6b55f2511610120578063b6b55f25146105d2578063b9e57b80146105ee578063bd079f551461060c578063c4b24a461461062a578063c89039c514610648578063cff1b6ef146106665761027f565b80638da5cb5b1461052c57806395d89b411461054a5780639e4e731814610568578063a8ae2b7c14610586578063a9059cbb146105a25761027f565b806330adf81f116101f5578063715018a6116101b9578063715018a61461047e5780637d882097146104885780637ecebe00146104a657806381837230146104d65780638980f11f146104f25780638aff733d1461050e5761027f565b806330adf81f146103da578063313ce567146103f85780634a970be7146104165780634ebb79161461043257806370a082311461044e5761027f565b80631331731411610247578063133173141461032a57806318160ddd1461034857806320606b7014610366578063236aecd51461038457806323b872dd1461038e5780632e1a7d4d146103be5761027f565b806303f7d9071461028457806306fdde03146102a057806307677111146102be578063095ea7b3146102dc578063114518041461030c575b600080fd5b61029e60048036038101906102999190613f3c565b6107f2565b005b6102a86108b3565b6040516102b59190614c17565b60405180910390f35b6102c6610951565b6040516102d39190614ed9565b60405180910390f35b6102f660048036038101906102f19190613dff565b610957565b6040516103039190614a7c565b60405180910390f35b61031461096e565b6040516103219190614ed9565b60405180910390f35b610332610974565b60405161033f9190614a7c565b60405180910390f35b610350610987565b60405161035d9190614ed9565b60405180910390f35b61036e61098d565b60405161037b9190614a97565b60405180910390f35b61038c6109b4565b005b6103a860048036038101906103a39190613d12565b610aa2565b6040516103b59190614a7c565b60405180910390f35b6103d860048036038101906103d39190613f3c565b610cbb565b005b6103e2610e40565b6040516103ef9190614a97565b60405180910390f35b610400610e67565b60405161040d9190614fa7565b60405180910390f35b610430600480360381019061042b9190613fdd565b610e6c565b005b61044c60048036038101906104479190613f3c565b610f15565b005b61046860048036038101906104639190613cad565b611058565b6040516104759190614ed9565b60405180910390f35b6104866110a1565b005b6104906111de565b60405161049d9190614ed9565b60405180910390f35b6104c060048036038101906104bb9190613cad565b6111e4565b6040516104cd9190614ed9565b60405180910390f35b6104f060048036038101906104eb9190613f3c565b6111fc565b005b61050c60048036038101906105079190613dff565b6112bd565b005b610516611447565b6040516105239190614ed9565b60405180910390f35b61053461144d565b60405161054191906148c2565b60405180910390f35b610552611477565b60405161055f9190614c17565b60405180910390f35b610570611515565b60405161057d9190614a97565b60405180910390f35b6105a0600480360381019061059b9190613f3c565b61153c565b005b6105bc60048036038101906105b79190613dff565b611656565b6040516105c99190614a7c565b60405180910390f35b6105ec60048036038101906105e79190613f3c565b61166d565b005b6105f6611679565b6040516106039190614ed9565b60405180910390f35b6106146116c9565b6040516106219190614ed9565b60405180910390f35b6106326116cf565b60405161063f9190614ed9565b60405180910390f35b610650611780565b60405161065d9190614bc6565b60405180910390f35b610680600480360381019061067b9190613f3c565b6117a6565b005b61069c60048036038101906106979190613d61565b6118c0565b005b6106a66119ca565b005b6106c260048036038101906106bd9190613cd6565b611ad2565b6040516106cf9190614ed9565b60405180910390f35b6106f260048036038101906106ed9190613f3c565b611b59565b6040516106ff9190614ed9565b60405180910390f35b610722600480360381019061071d9190613e3b565b611bb2565b005b61073e60048036038101906107399190613f3c565b611eb3565b60405161074b9190614ed9565b60405180910390f35b61075c611f0d565b6040516107699190614a97565b60405180910390f35b61077a611fa6565b6040516107879190614bfc565b60405180910390f35b6107aa60048036038101906107a59190613cad565b611fcc565b005b6107b4612178565b6040516107c19190614bab565b60405180910390f35b6107d261219e565b6040516107df9190614be1565b60405180910390f35b6107f06121c4565b005b6107fa61228f565b73ffffffffffffffffffffffffffffffffffffffff1661081861144d565b73ffffffffffffffffffffffffffffffffffffffff161461086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590614d99565b60405180910390fd5b7fd0f7c999974ac5e720302e1a81f85f0e86835bd50d1cdd4086c839df9c123aab601254826040516108a1929190614f24565b60405180910390a18060128190555050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109495780601f1061091e57610100808354040283529160200191610949565b820191906000526020600020905b81548152906001019060200180831161092c57829003601f168201915b505050505081565b60105481565b6000610964338484612297565b6001905092915050565b60125481565b601160009054906101000a900460ff1681565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6109bc61228f565b73ffffffffffffffffffffffffffffffffffffffff166109da61144d565b73ffffffffffffffffffffffffffffffffffffffff1614610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2790614d99565b60405180910390fd5b601160009054906101000a900460ff1615601160006101000a81548160ff0219169083151502179055507fd46852adf64681b12b81a308b01efd0a546667f68ab41ae5855c2bae7756380f601160009054906101000a900460ff16604051610a989190614a7c565b60405180910390a1565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610b8557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610ca3576000610bb9856040518060600160405280602f81526020016152ed602f9139846124629092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610c999190614ed9565b60405180910390a3505b610cae8686866124bd565b6001925050509392505050565b6000610cc682611eb3565b90506000811115610e3c57610cda816126db565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d37929190614983565b602060405180830381600087803b158015610d5157600080fd5b505af1158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190613f13565b610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf90614e79565b60405180910390fd5b610dd233836127ae565b610de7816007546128fc90919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610e339190614ed9565b60405180910390a25b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610ed39796959493929190614914565b600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050610f0e85612946565b5050505050565b610f1d61228f565b73ffffffffffffffffffffffffffffffffffffffff16610f3b61144d565b73ffffffffffffffffffffffffffffffffffffffff1614610f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8890614d99565b60405180910390fd5b60008111610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb90614cb9565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561101a573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2860008260405161104d929190614983565b60405180910390a150565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110a961228f565b73ffffffffffffffffffffffffffffffffffffffff166110c761144d565b73ffffffffffffffffffffffffffffffffffffffff161461111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111490614d99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60075481565b60056020528060005260406000206000915090505481565b61120461228f565b73ffffffffffffffffffffffffffffffffffffffff1661122261144d565b73ffffffffffffffffffffffffffffffffffffffff1614611278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126f90614d99565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600e54826040516112ab929190614f24565b60405180910390a180600e8190555050565b6112c561228f565b73ffffffffffffffffffffffffffffffffffffffff166112e361144d565b73ffffffffffffffffffffffffffffffffffffffff1614611339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133090614d99565b60405180910390fd5b6000811161137c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137390614cb9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016113b7929190614983565b602060405180830381600087803b1580156113d157600080fd5b505af11580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190613f13565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161143b929190614a53565b60405180910390a15050565b600f5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561150d5780601f106114e25761010080835404028352916020019161150d565b820191906000526020600020905b8154815290600101906020018083116114f057829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b61154461228f565b73ffffffffffffffffffffffffffffffffffffffff1661156261144d565b73ffffffffffffffffffffffffffffffffffffffff16146115b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115af90614d99565b60405180910390fd5b6127106115d060105483612b3a90919063ffffffff16565b1115611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890614eb9565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f5482604051611644929190614f24565b60405180910390a180600f8190555050565b60006116633384846124bd565b6001905092915050565b61167681612946565b50565b6000806116846116cf565b9050600e5481106116c0576116b86127106116aa600f5484612b8f90919063ffffffff16565b612bff90919063ffffffff16565b9150506116c6565b60009150505b90565b600e5481565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b815260040161172b91906148c2565b60206040518083038186803b15801561174357600080fd5b505afa158015611757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177b9190613f65565b905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117ae61228f565b73ffffffffffffffffffffffffffffffffffffffff166117cc61144d565b73ffffffffffffffffffffffffffffffffffffffff1614611822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181990614d99565b60405180910390fd5b61271061183a600f5483612b3a90919063ffffffff16565b111561187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290614e19565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601054826040516118ae929190614f24565b60405180910390a18060108190555050565b42841015611903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fa90614cf9565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558960405160200161199096959493929190614ab2565b6040516020818303038152906040528051906020012090506119b58882868686612c49565b6119c0888888612297565b5050505050505050565b6119d261228f565b73ffffffffffffffffffffffffffffffffffffffff166119f061144d565b73ffffffffffffffffffffffffffffffffffffffff1614611a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3d90614d99565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9fad8ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ab057600080fd5b505af1158015611ac4573d6000803e3d6000fd5b505050506000600781905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080611b73600754600254612b8f90919063ffffffff16565b1415611b8157819050611bad565b611baa600754611b9c60025485612b8f90919063ffffffff16565b612bff90919063ffffffff16565b90505b919050565b611bba61228f565b73ffffffffffffffffffffffffffffffffffffffff16611bd861144d565b73ffffffffffffffffffffffffffffffffffffffff1614611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2590614d99565b60405180910390fd5b81518351148015611c40575080518351145b611c7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7690614c79565b60405180910390fd5b60005b8351811015611ead576000848281518110611c9957fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30868681518110611cce57fe5b60200260200101516040518363ffffffff1660e01b8152600401611cf39291906149ac565b60206040518083038186803b158015611d0b57600080fd5b505afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d439190613f65565b9050848381518110611d5157fe5b60200260200101518114158015611da657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81141580611da557506000858481518110611d9b57fe5b6020026020010151145b5b15611e9e578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3858581518110611dd357fe5b6020026020010151878681518110611de757fe5b60200260200101516040518363ffffffff1660e01b8152600401611e0c929190614a53565b602060405180830381600087803b158015611e2657600080fd5b505af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190613f13565b611e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9490614d19565b60405180910390fd5b5b50508080600101915050611c82565b50505050565b600080611ecd600754600254612b8f90919063ffffffff16565b1415611edc5760009050611f08565b611f05600254611ef760075485612b8f90919063ffffffff16565b612bff90919063ffffffff16565b90505b919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611f429190614874565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b611f76612d80565b30604051602001611f8b959493929190614b13565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611fd461228f565b73ffffffffffffffffffffffffffffffffffffffff16611ff261144d565b73ffffffffffffffffffffffffffffffffffffffff1614612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90614d99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120af90614c39565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614612232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222990614e39565b60405180910390fd5b600061223c6116cf565b9050600e54811015612283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227a90614d39565b60405180910390fd5b61228c81612d8d565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fe90614db9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236e90614e99565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516124559190614ed9565b60405180910390a3505050565b60008383111582906124aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a19190614c17565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490614dd9565b60405180910390fd5b612599816040518060600160405280602e8152602001615343602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124629092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061262e81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b3a90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516126ce9190614ed9565b60405180910390a3505050565b6000811161271e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271590614cb9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016127799190614ed9565b600060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b5050505050565b61281a8160405180606001604052806027815260200161531c60279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124629092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061288c816040518060600160405280602781526020016152c6602791396002546124629092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516128f09190614ed9565b60405180910390a35050565b600061293e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612462565b905092915050565b600254600754101561298d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298490614e59565b60405180910390fd5b601160009054906101000a900460ff16156129c35760006129ac6116cf565b905060125481106129c1576129c081612d8d565b5b505b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612a22939291906148dd565b602060405180830381600087803b158015612a3c57600080fd5b505af1158015612a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a749190613f13565b612ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aaa90614df9565b60405180910390fd5b612abc816130f8565b612ace33612ac983611b59565b6131cb565b612ae381600754612b3a90919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612b2f9190614ed9565b60405180910390a250565b600080828401905083811015612b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7c90614c59565b60405180910390fd5b8091505092915050565b600080831415612ba25760009050612bf9565b6000828402905082848281612bb357fe5b0414612bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612beb90614d79565b60405180910390fd5b809150505b92915050565b6000612c4183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506132e5565b905092915050565b6000612c53611f0d565b85604051602001612c6592919061488b565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051612ca29493929190614b66565b6020604051602081039080840390855afa158015612cc4573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612d3857508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6e90614c99565b60405180910390fd5b50505050505050565b6000804690508091505090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612df757600080fd5b505af1158015612e0b573d6000803e3d6000fd5b505050506000612e3a612710612e2c60105485612b8f90919063ffffffff16565b612bff90919063ffffffff16565b90506000811115612f3b57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612e8b61144d565b836040518363ffffffff1660e01b8152600401612ea9929190614a53565b602060405180830381600087803b158015612ec357600080fd5b505af1158015612ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efb9190613f13565b612f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3190614d59565b60405180910390fd5b5b6000612f66612710612f58600f5486612b8f90919063ffffffff16565b612bff90919063ffffffff16565b9050600081111561306057600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612fce929190614983565b602060405180830381600087803b158015612fe857600080fd5b505af1158015612ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130209190613f13565b61305f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305690614cd9565b60405180910390fd5b5b600061308f61308a8361307c86886128fc90919063ffffffff16565b6128fc90919063ffffffff16565b613346565b905061309a816130f8565b6130af81600754612b3a90919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346007546002546040516130ea929190614f24565b60405180910390a150505050565b6000811161313b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161313290614cb9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a694fc3a826040518263ffffffff1660e01b81526004016131969190614ed9565b600060405180830381600087803b1580156131b057600080fd5b505af11580156131c4573d6000803e3d6000fd5b5050505050565b6131e081600254612b3a90919063ffffffff16565b60028190555061323881600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b3a90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516132d99190614ed9565b60405180910390a35050565b6000808311829061332c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133239190614c17565b60405180910390fd5b50600083858161333857fe5b049050809150509392505050565b60008061335d600284612bff90919063ffffffff16565b9050600081116133a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161339990614cb9565b60405180910390fd5b6060600267ffffffffffffffff811180156133bc57600080fd5b506040519080825280602002602001820160405280156133eb5781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061341e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160018151811061348857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000829050816001815181106134d457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16826000815181106134ff57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146136af576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b8152600401613581929190614ef4565b60006040518083038186803b15801561359957600080fd5b505afa1580156135ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906135d69190613ed2565b9050806001825103815181106135e857fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b8152600401613655959493929190614f4d565b600060405180830381600087803b15801561366f57600080fd5b505af1158015613683573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906136ac9190613ed2565b50505b6060600267ffffffffffffffff811180156136c957600080fd5b506040519080825280602002602001820160405280156136f85781602001602082028036833780820191505090505b5090508260008151811061370857fe5b60200260200101518160008151811061371d57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160018151811061378757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000849050816001815181106137d357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16826000815181106137fe57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146139ae576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b8152600401613880929190614ef4565b60006040518083038186803b15801561389857600080fd5b505afa1580156138ac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906138d59190613ed2565b9050806001825103815181106138e757fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b8152600401613954959493929190614f4d565b600060405180830381600087803b15801561396e57600080fd5b505af1158015613982573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906139ab9190613ed2565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e33700866001815181106139fb57fe5b602002602001015185600181518110613a1057fe5b6020026020010151878660008030426040518963ffffffff1660e01b8152600401613a429897969594939291906149d5565b606060405180830381600087803b158015613a5c57600080fd5b505af1158015613a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a949190613f8e565b92505050809650505050505050919050565b600081359050613ab581615252565b92915050565b600082601f830112613acc57600080fd5b8135613adf613ada82614ff3565b614fc2565b91508181835260208401935060208101905083856020840282011115613b0457600080fd5b60005b83811015613b345781613b1a8882613aa6565b845260208401935060208301925050600181019050613b07565b5050505092915050565b600082601f830112613b4f57600080fd5b8135613b62613b5d8261501f565b614fc2565b91508181835260208401935060208101905083856020840282011115613b8757600080fd5b60005b83811015613bb75781613b9d8882613c6e565b845260208401935060208301925050600181019050613b8a565b5050505092915050565b600082601f830112613bd257600080fd5b8151613be5613be08261501f565b614fc2565b91508181835260208401935060208101905083856020840282011115613c0a57600080fd5b60005b83811015613c3a5781613c208882613c83565b845260208401935060208301925050600181019050613c0d565b5050505092915050565b600081519050613c5381615269565b92915050565b600081359050613c6881615280565b92915050565b600081359050613c7d81615297565b92915050565b600081519050613c9281615297565b92915050565b600081359050613ca7816152ae565b92915050565b600060208284031215613cbf57600080fd5b6000613ccd84828501613aa6565b91505092915050565b60008060408385031215613ce957600080fd5b6000613cf785828601613aa6565b9250506020613d0885828601613aa6565b9150509250929050565b600080600060608486031215613d2757600080fd5b6000613d3586828701613aa6565b9350506020613d4686828701613aa6565b9250506040613d5786828701613c6e565b9150509250925092565b600080600080600080600060e0888a031215613d7c57600080fd5b6000613d8a8a828b01613aa6565b9750506020613d9b8a828b01613aa6565b9650506040613dac8a828b01613c6e565b9550506060613dbd8a828b01613c6e565b9450506080613dce8a828b01613c98565b93505060a0613ddf8a828b01613c59565b92505060c0613df08a828b01613c59565b91505092959891949750929550565b60008060408385031215613e1257600080fd5b6000613e2085828601613aa6565b9250506020613e3185828601613c6e565b9150509250929050565b600080600060608486031215613e5057600080fd5b600084013567ffffffffffffffff811115613e6a57600080fd5b613e7686828701613abb565b935050602084013567ffffffffffffffff811115613e9357600080fd5b613e9f86828701613b3e565b925050604084013567ffffffffffffffff811115613ebc57600080fd5b613ec886828701613abb565b9150509250925092565b600060208284031215613ee457600080fd5b600082015167ffffffffffffffff811115613efe57600080fd5b613f0a84828501613bc1565b91505092915050565b600060208284031215613f2557600080fd5b6000613f3384828501613c44565b91505092915050565b600060208284031215613f4e57600080fd5b6000613f5c84828501613c6e565b91505092915050565b600060208284031215613f7757600080fd5b6000613f8584828501613c83565b91505092915050565b600080600060608486031215613fa357600080fd5b6000613fb186828701613c83565b9350506020613fc286828701613c83565b9250506040613fd386828701613c83565b9150509250925092565b600080600080600060a08688031215613ff557600080fd5b600061400388828901613c6e565b955050602061401488828901613c6e565b945050604061402588828901613c98565b935050606061403688828901613c59565b925050608061404788828901613c59565b9150509295509295909350565b6000614060838361407b565b60208301905092915050565b6140758161512a565b82525050565b614084816150cb565b82525050565b614093816150cb565b82525050565b60006140a482615070565b6140ae8185615093565b93506140b98361504b565b8060005b838110156140ea5781516140d18882614054565b97506140dc83615086565b9250506001810190506140bd565b5085935050505092915050565b614100816150dd565b82525050565b61410f816150e9565b82525050565b614126614121826150e9565b615235565b82525050565b600081546001811660008114614149576001811461416e576141b2565b607f600283041661415a81876150a4565b955060ff19831686528086019350506141b2565b6002820461417c81876150a4565b95506141878561505b565b60005b828110156141a95781548189015260018201915060208101905061418a565b82880195505050505b505092915050565b6141c38161513c565b82525050565b6141d281615160565b82525050565b6141e181615184565b82525050565b6141f0816151a8565b82525050565b6141ff816151cc565b82525050565b60006142108261507b565b61421a81856150af565b935061422a818560208601615202565b61423381615241565b840191505092915050565b600061424b6026836150af565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006142b16002836150c0565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006142f1601b836150af565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000614331600f836150af565b91507f6e6f742073616d65206c656e67746800000000000000000000000000000000006000830152602082019050919050565b60006143716024836150af565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143d7600e836150af565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b6000614417601c836150af565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b6000614457600f836150af565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b6000614497600e836150af565b91507f617070726f7665206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006144d76016836150af565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b60006145176019836150af565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b60006145576021836150af565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006145bd6020836150af565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006145fd601c836150af565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b600061463d6034836150af565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b60006146a36013836150af565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b60006146e36012836150af565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b60006147236007836150af565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614763600e836150af565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006147a3600f836150af565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b60006147e3601e836150af565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b60006148236018836150af565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b61485f81615113565b82525050565b61486e8161511d565b82525050565b6000614880828461412c565b915081905092915050565b6000614896826142a4565b91506148a28285614115565b6020820191506148b28284614115565b6020820191508190509392505050565b60006020820190506148d7600083018461408a565b92915050565b60006060820190506148f2600083018661406c565b6148ff602083018561408a565b61490c6040830184614856565b949350505050565b600060e082019050614929600083018a61406c565b614936602083018961408a565b6149436040830188614856565b6149506060830187614856565b61495d6080830186614865565b61496a60a0830185614106565b61497760c0830184614106565b98975050505050505050565b6000604082019050614998600083018561406c565b6149a56020830184614856565b9392505050565b60006040820190506149c1600083018561408a565b6149ce602083018461408a565b9392505050565b6000610100820190506149eb600083018b61408a565b6149f8602083018a61408a565b614a056040830189614856565b614a126060830188614856565b614a1f60808301876141f6565b614a2c60a08301866141f6565b614a3960c083018561408a565b614a4660e0830184614856565b9998505050505050505050565b6000604082019050614a68600083018561408a565b614a756020830184614856565b9392505050565b6000602082019050614a9160008301846140f7565b92915050565b6000602082019050614aac6000830184614106565b92915050565b600060c082019050614ac76000830189614106565b614ad4602083018861408a565b614ae1604083018761408a565b614aee6060830186614856565b614afb6080830185614856565b614b0860a0830184614856565b979650505050505050565b600060a082019050614b286000830188614106565b614b356020830187614106565b614b426040830186614106565b614b4f6060830185614856565b614b5c608083018461408a565b9695505050505050565b6000608082019050614b7b6000830187614106565b614b886020830186614865565b614b956040830185614106565b614ba26060830184614106565b95945050505050565b6000602082019050614bc060008301846141ba565b92915050565b6000602082019050614bdb60008301846141c9565b92915050565b6000602082019050614bf660008301846141d8565b92915050565b6000602082019050614c1160008301846141e7565b92915050565b60006020820190508181036000830152614c318184614205565b905092915050565b60006020820190508181036000830152614c528161423e565b9050919050565b60006020820190508181036000830152614c72816142e4565b9050919050565b60006020820190508181036000830152614c9281614324565b9050919050565b60006020820190508181036000830152614cb281614364565b9050919050565b60006020820190508181036000830152614cd2816143ca565b9050919050565b60006020820190508181036000830152614cf28161440a565b9050919050565b60006020820190508181036000830152614d128161444a565b9050919050565b60006020820190508181036000830152614d328161448a565b9050919050565b60006020820190508181036000830152614d52816144ca565b9050919050565b60006020820190508181036000830152614d728161450a565b9050919050565b60006020820190508181036000830152614d928161454a565b9050919050565b60006020820190508181036000830152614db2816145b0565b9050919050565b60006020820190508181036000830152614dd2816145f0565b9050919050565b60006020820190508181036000830152614df281614630565b9050919050565b60006020820190508181036000830152614e1281614696565b9050919050565b60006020820190508181036000830152614e32816146d6565b9050919050565b60006020820190508181036000830152614e5281614716565b9050919050565b60006020820190508181036000830152614e7281614756565b9050919050565b60006020820190508181036000830152614e9281614796565b9050919050565b60006020820190508181036000830152614eb2816147d6565b9050919050565b60006020820190508181036000830152614ed281614816565b9050919050565b6000602082019050614eee6000830184614856565b92915050565b6000604082019050614f096000830185614856565b8181036020830152614f1b8184614099565b90509392505050565b6000604082019050614f396000830185614856565b614f466020830184614856565b9392505050565b600060a082019050614f626000830188614856565b614f6f6020830187614856565b8181036040830152614f818186614099565b9050614f90606083018561408a565b614f9d6080830184614856565b9695505050505050565b6000602082019050614fbc6000830184614865565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614fe957614fe861523f565b5b8060405250919050565b600067ffffffffffffffff82111561500e5761500d61523f565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561503a5761503961523f565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006150d6826150f3565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615135826151de565b9050919050565b60006151478261514e565b9050919050565b6000615159826150f3565b9050919050565b600061516b82615172565b9050919050565b600061517d826150f3565b9050919050565b600061518f82615196565b9050919050565b60006151a1826150f3565b9050919050565b60006151b3826151ba565b9050919050565b60006151c5826150f3565b9050919050565b60006151d782615113565b9050919050565b60006151e9826151f0565b9050919050565b60006151fb826150f3565b9050919050565b60005b83811015615220578082015181840152602081019050615205565b8381111561522f576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b61525b816150cb565b811461526657600080fd5b50565b615272816150dd565b811461527d57600080fd5b50565b615289816150e9565b811461529457600080fd5b50565b6152a081615113565b81146152ab57600080fd5b50565b6152b78161511d565b81146152c257600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212203ae50593c2c87dbf52a42d246572589782e1c6549d3242f93c65b507f2ecadf464736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "Unclaimed rewards from staking contract"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "emergencyWithdraw()": {
        "details": "Reward tokens are not automatically collectedNew deposits will be effectively disabled"
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "Estimated rewards tokens earned for calling `reinvest()`"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "reinvest()": {
        "details": "This external function requires minimum tokens to be met"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenAllow(address[],uint256[],address[])": {
        "params": {
          "approvalAmounts": "approval amounts",
          "spenders": "address allowed to spend tokens",
          "tokensToApprove": "tokens to approve"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateMinTokensToReinvestBeforeDeposit(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateReinvestReward(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of receipt tokens to redeem"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_TYPEHASH()": {
        "notice": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "VERSION_HASH()": {
        "notice": "keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Unclaimed rewards from staking contract"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "emergencyWithdraw()": {
        "notice": "Allows exit from Staking Contract without additional logic"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward for caller"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest rewards from staking contract to deposit tokens"
      },
      "tokenAllow(address[],uint256[],address[])": {
        "notice": "Set approvals for tokens"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest minimum threshold for external callers"
      },
      "updateMinTokensToReinvestBeforeDeposit(uint256)": {
        "notice": "Update reinvest minimum threshold before a deposit"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "updateRequireReinvestBeforeDeposit()": {
        "notice": "Toggle requirement to reinvest before deposit"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw LP tokens by redeeming receipt tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1120,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1123,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1128,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1134,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1138,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1154,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2255,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRouter)2126"
      },
      {
        "astId": 22,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPair)1746"
      },
      {
        "astId": 24,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "token0",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)1730"
      },
      {
        "astId": 26,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "token1",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1730"
      },
      {
        "astId": 28,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "rewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1730"
      },
      {
        "astId": 30,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "stakingContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IStakingRewards)2224"
      },
      {
        "astId": 33,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 36,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 39,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 44,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "REQUIRE_REINVEST_BEFORE_DEPOSIT",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 47,
        "contract": "contracts/DexStrategyV2.sol:DexStrategyV2",
        "label": "MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1730": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)1746": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)2126": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingRewards)2224": {
        "encoding": "inplace",
        "label": "contract IStakingRewards",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}