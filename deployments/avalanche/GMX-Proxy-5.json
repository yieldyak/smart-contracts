{
  "address": "0x8f1A22d7E0aA16e0154696eD6843541e97B18742",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gmxDepositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouterV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_simpleRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxWavaxSwapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minFeeDifference",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyAndStakeGlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardTracker",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glpMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxDepositor",
      "outputs": [
        {
          "internalType": "contract IGmxDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxRewardRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWavaxSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFeeDifference",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeESGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedESGMX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxWavaxSwapAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMaxWavaxSwapAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minFeeDifference",
          "type": "uint256"
        }
      ],
      "name": "updateMinFeeDifference",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc46fbf79695ef5b2d7d1c9753a4ec41c4c1c8a65d2b7efb68b834953ce3fedc1",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x8f1A22d7E0aA16e0154696eD6843541e97B18742",
    "transactionIndex": 6,
    "gasUsed": "2540208",
    "logsBloom": "0x
    "blockHash": "0xacc3287a41d074ffb89b5e66c7c38b0f48d29f8435de24300cc02ddac4598fbb",
    "transactionHash": "0xc46fbf79695ef5b2d7d1c9753a4ec41c4c1c8a65d2b7efb68b834953ce3fedc1",
    "logs": [],
    "blockNumber": 44435007,
    "cumulativeGasUsed": "2907745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x565d72A63d3dc4a2F3Dd7609Fd85c4FD394523B2",
    "0xa192D0681E2b9484d1fA48083D36B8A2D0Da1809",
    "0xB70B91CE0771d3f4c81D87660f71Da31d48eB3B3",
    "0x959a0af5A46F76AA37317BC417D48B445658B188",
    "100000000000000000000",
    "15",
    "0xea3e895b0696e161c68486ee2f85e6cc6ef962d0"
  ],
  "solcInputHash": "553f9358bec1cf1bd161f78bea0bc131",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gmxDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouterV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_simpleRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxWavaxSwapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFeeDifference\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardTracker\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxDepositor\",\"outputs\":[{\"internalType\":\"contract IGmxDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxRewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWavaxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFeeDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeESGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedESGMX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWavaxSwapAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxWavaxSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minFeeDifference\",\"type\":\"uint256\"}],\"name\":\"updateMinFeeDifference\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/gmx/GmxProxy.sol\":\"GmxProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/ISimpleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../router/interfaces/IYakRouter.sol\\\";\\n\\ninterface ISimpleRouter {\\n    error UnsupportedSwap(address _tokenIn, address _tokenOut);\\n    error InvalidConfiguration();\\n\\n    struct SwapConfig {\\n        bool useYakSwapRouter;\\n        uint8 yakSwapMaxSteps;\\n        Path path;\\n    }\\n\\n    struct Path {\\n        address[] adapters;\\n        address[] tokens;\\n    }\\n\\n    function query(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (FormattedOffer memory trade);\\n\\n    function swap(FormattedOffer memory _trade) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xf736215916cbe2075222e996c43468d1bd2c42fd460f4869e2c53b7b74d0f383\",\"license\":\"MIT\"},\"contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IYakStrategy {\\n    function depositToken() external view returns (address);\\n\\n    function depositFor(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf708acb7d65bf39a9d7ed9a14cd296f7b1a9152050c688475c8cc968e07e6e70\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity 0.8.13;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc346884413e71a1422efe5e44741b2692cbabf006f562dbdf38186790f49b1c5\",\"license\":\"MIT\"},\"contracts/router/interfaces/IYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct Query {\\n    address adapter;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n}\\n\\nstruct Offer {\\n    bytes amounts;\\n    bytes adapters;\\n    bytes path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct FormattedOffer {\\n    uint256[] amounts;\\n    address[] adapters;\\n    address[] path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct Trade {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address[] adapters;\\n}\\n\\ninterface IYakRouter {\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    // admin\\n    function setTrustedTokens(address[] memory _trustedTokens) external;\\n    function setAdapters(address[] memory _adapters) external;\\n    function setFeeClaimer(address _claimer) external;\\n    function setMinFee(uint256 _fee) external;\\n\\n    // misc\\n    function trustedTokensCount() external view returns (uint256);\\n    function adaptersCount() external view returns (uint256);\\n\\n    // query\\n\\n    function queryAdapter(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8 _index)\\n        external\\n        returns (uint256);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8[] calldata _options)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n\\n    // swap\\n\\n    function swapNoSplit(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitFromAVAX(Trade calldata _trade, address _to, uint256 _fee) external payable;\\n\\n    function swapNoSplitToAVAX(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2706c56d892343a14619a2414572292ef9f106a98ae53b4740f155358ec22f7e\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/GmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../interfaces/IYakStrategy.sol\\\";\\nimport \\\"../../../lib/SafeERC20.sol\\\";\\nimport \\\"../../../lib/SafeMath.sol\\\";\\nimport \\\"./../../../interfaces/ISimpleRouter.sol\\\";\\n\\nimport \\\"./interfaces/IGmxDepositor.sol\\\";\\nimport \\\"./interfaces/IGmxRewardRouter.sol\\\";\\nimport \\\"./interfaces/IGmxRewardTracker.sol\\\";\\nimport \\\"./interfaces/IGmxProxy.sol\\\";\\nimport \\\"./interfaces/IGlpManager.sol\\\";\\nimport \\\"./interfaces/IGmxVault.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(IGmxDepositor gmxDepositor, address target, uint256 value, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returnValue) = gmxDepositor.execute(target, value, data);\\n        if (!success) revert(\\\"GmxProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\ncontract GmxProxy is IGmxProxy {\\n    using SafeMath for uint256;\\n    using SafeProxy for IGmxDepositor;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant USDG_PRICE_PRECISION = 1e30;\\n\\n    address internal constant GMX = 0x62edc0692BD897D2295872a9FFCac5425011c661;\\n    address internal constant fsGLP = 0x5643F4b25E36478eE1E90418d5343cb6591BcB9d;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address internal constant esGMX = 0xFf1489227BbAAC61a9209A08929E4c2a526DdD17;\\n\\n    address public devAddr;\\n    mapping(address => address) public approvedStrategies;\\n\\n    IGmxDepositor public immutable override gmxDepositor;\\n    address public immutable override gmxRewardRouter;\\n    address public immutable glpMinter;\\n\\n    address internal immutable gmxRewardTracker;\\n    address internal immutable glpManager;\\n    address internal immutable vault;\\n    address internal immutable vaultUtils;\\n    address internal immutable usdg;\\n\\n    ISimpleRouter internal immutable simpleRouter;\\n    uint256 public maxWavaxSwapAmount;\\n    uint256 public minFeeDifference;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"GmxProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(\\n            approvedStrategies[fsGLP] == msg.sender || approvedStrategies[GMX] == msg.sender, \\\"GmxProxy:onlyGLPStrategy\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGLPStrategy() {\\n        require(approvedStrategies[fsGLP] == msg.sender, \\\"GmxProxy:onlyGLPStrategy\\\");\\n        _;\\n    }\\n\\n    modifier onlyGMXStrategy() {\\n        require(approvedStrategies[GMX] == msg.sender, \\\"GmxProxy::onlyGMXStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _gmxDepositor,\\n        address _gmxRewardRouter,\\n        address _gmxRewardRouterV2,\\n        address _simpleRouter,\\n        uint256 _maxWavaxSwapAmount,\\n        uint256 _minFeeDifference,\\n        address _devAddr\\n    ) {\\n        require(_gmxDepositor > address(0), \\\"GmxProxy::Invalid depositor address provided\\\");\\n        require(_gmxRewardRouter > address(0), \\\"GmxProxy::Invalid reward router address provided\\\");\\n        require(_devAddr > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = _devAddr;\\n        gmxDepositor = IGmxDepositor(_gmxDepositor);\\n        gmxRewardRouter = _gmxRewardRouter;\\n        glpMinter = _gmxRewardRouterV2;\\n        gmxRewardTracker = IGmxRewardRouter(_gmxRewardRouter).stakedGmxTracker();\\n        glpManager = IGmxRewardRouter(_gmxRewardRouterV2).glpManager();\\n        vault = IGlpManager(glpManager).vault();\\n        usdg = IGmxVault(vault).usdg();\\n        vaultUtils = address(IGmxVault(vault).vaultUtils());\\n        simpleRouter = ISimpleRouter(_simpleRouter);\\n        maxWavaxSwapAmount = _maxWavaxSwapAmount;\\n        minFeeDifference = _minFeeDifference;\\n    }\\n\\n    function updateDevAddr(address newValue) public onlyDev {\\n        require(newValue > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = newValue;\\n    }\\n\\n    function approveStrategy(address _strategy) external onlyDev {\\n        address depositToken = IYakStrategy(_strategy).depositToken();\\n        require(approvedStrategies[depositToken] == address(0), \\\"GmxProxy::Strategy for deposit token already added\\\");\\n        approvedStrategies[depositToken] = _strategy;\\n    }\\n\\n    function updateMaxWavaxSwapAmount(uint256 _maxWavaxSwapAmount) external onlyDev {\\n        maxWavaxSwapAmount = _maxWavaxSwapAmount;\\n    }\\n\\n    function updateMinFeeDifference(uint256 _minFeeDifference) external onlyDev {\\n        minFeeDifference = _minFeeDifference;\\n    }\\n\\n    function stakeESGMX() external onlyDev {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\\"stakeEsGmx(uint256)\\\", IERC20(esGMX).balanceOf(address(gmxDepositor)))\\n        );\\n    }\\n\\n    function stakedESGMX() public view returns (uint256) {\\n        return IGmxRewardTracker(gmxRewardTracker).depositBalances(address(gmxDepositor), esGMX);\\n    }\\n\\n    function vaultHasCapacity(address _token, uint256 _amountIn) internal view returns (bool) {\\n        uint256 price = IGmxVault(vault).getMinPrice(_token);\\n        uint256 usdgAmount = (_amountIn * price) / USDG_PRICE_PRECISION;\\n        usdgAmount = IGmxVault(vault).adjustForDecimals(usdgAmount, _token, usdg);\\n        uint256 vaultUsdgAmount = IGmxVault(vault).usdgAmounts(_token);\\n        uint256 maxUsdgAmount = IGmxVault(vault).maxUsdgAmounts(_token);\\n        return maxUsdgAmount == 0 || vaultUsdgAmount + usdgAmount < maxUsdgAmount;\\n    }\\n\\n    function buyAndStakeGlp(uint256 _amount) external override onlyGLPStrategy returns (uint256) {\\n        address tokenIn = WAVAX;\\n\\n        if (_amount < maxWavaxSwapAmount) {\\n            uint256 price = IGmxVault(vault).getMinPrice(WAVAX);\\n            uint256 usdgAmount = (_amount * price) / USDG_PRICE_PRECISION;\\n            uint256 feeBasisPoints = vaultHasCapacity(WAVAX, _amount)\\n                ? IGmxVaultUtils(vaultUtils).getBuyUsdgFeeBasisPoints(WAVAX, usdgAmount)\\n                : type(uint256).max;\\n\\n            uint256 allWhiteListedTokensLength = IGmxVault(vault).allWhitelistedTokensLength();\\n            for (uint256 i = 0; i < allWhiteListedTokensLength; i++) {\\n                address whitelistedToken = IGmxVault(vault).allWhitelistedTokens(i);\\n                uint256 currentFeeBasisPoints =\\n                    IGmxVaultUtils(vaultUtils).getBuyUsdgFeeBasisPoints(whitelistedToken, usdgAmount);\\n                if (currentFeeBasisPoints + minFeeDifference < feeBasisPoints) {\\n                    feeBasisPoints = currentFeeBasisPoints;\\n                    tokenIn = whitelistedToken;\\n                }\\n            }\\n\\n            if (tokenIn != WAVAX) {\\n                FormattedOffer memory offer = simpleRouter.query(_amount, WAVAX, tokenIn);\\n                IERC20(WAVAX).approve(address(simpleRouter), _amount);\\n                _amount = simpleRouter.swap(offer);\\n            }\\n        }\\n\\n        IERC20(tokenIn).safeTransfer(address(gmxDepositor), _amount);\\n        gmxDepositor.safeExecute(tokenIn, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, _amount));\\n        bytes memory result = gmxDepositor.safeExecute(\\n            glpMinter,\\n            0,\\n            abi.encodeWithSignature(\\\"mintAndStakeGlp(address,uint256,uint256,uint256)\\\", tokenIn, _amount, 0, 0)\\n        );\\n        gmxDepositor.safeExecute(tokenIn, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, 0));\\n        return toUint256(result, 0);\\n    }\\n\\n    function withdrawGlp(uint256 _amount) external override onlyGLPStrategy {\\n        _withdrawGlp(_amount);\\n    }\\n\\n    function _withdrawGlp(uint256 _amount) private {\\n        gmxDepositor.safeExecute(fsGLP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function stakeGmx(uint256 _amount) external override onlyGMXStrategy {\\n        IERC20(GMX).safeTransfer(address(gmxDepositor), _amount);\\n        gmxDepositor.safeExecute(GMX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gmxRewardTracker, _amount));\\n        gmxDepositor.safeExecute(gmxRewardRouter, 0, abi.encodeWithSignature(\\\"stakeGmx(uint256)\\\", _amount));\\n        gmxDepositor.safeExecute(GMX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gmxRewardTracker, 0));\\n    }\\n\\n    function withdrawGmx(uint256 _amount) external override onlyGMXStrategy {\\n        _withdrawGmx(_amount);\\n    }\\n\\n    function _withdrawGmx(uint256 _amount) private {\\n        gmxDepositor.safeExecute(gmxRewardRouter, 0, abi.encodeWithSignature(\\\"unstakeGmx(uint256)\\\", _amount));\\n        gmxDepositor.safeExecute(GMX, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function pendingRewards(address _rewardTracker) external view override returns (uint256) {\\n        address feeGmxTracker = IGmxRewardRouter(gmxRewardRouter).feeGmxTracker();\\n        if (_rewardTracker == feeGmxTracker) return 0;\\n\\n        return IGmxRewardTracker(IGmxRewardRouter(gmxRewardRouter).feeGlpTracker()).claimable(address(gmxDepositor))\\n            + IGmxRewardTracker(feeGmxTracker).claimable(address(gmxDepositor));\\n    }\\n\\n    function claimReward(address rewardTracker) external override onlyStrategy {\\n        address feeGmxTracker = IGmxRewardRouter(gmxRewardRouter).feeGmxTracker();\\n        if (rewardTracker == feeGmxTracker) return;\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"handleRewards(bool,bool,bool,bool,bool,bool,bool)\\\", false, false, true, true, true, true, false\\n            )\\n        );\\n        uint256 reward = IERC20(WAVAX).balanceOf(address(gmxDepositor));\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n    }\\n\\n    function totalDeposits(address _rewardTracker) external view override returns (uint256) {\\n        address depositToken = IYakStrategy(msg.sender).depositToken();\\n        if (depositToken == GMX) {\\n            address rewardTracker = IGmxRewardRouter(gmxRewardRouter).stakedGmxTracker();\\n            return IGmxRewardTracker(rewardTracker).depositBalances(address(gmxDepositor), depositToken);\\n        }\\n        return IGmxRewardTracker(_rewardTracker).stakedAmounts(address(gmxDepositor));\\n    }\\n\\n    function emergencyWithdrawGLP(uint256 _balance) external override onlyGLPStrategy {\\n        _withdrawGlp(_balance);\\n    }\\n\\n    function emergencyWithdrawGMX(uint256 _balance) external override onlyGMXStrategy {\\n        _withdrawGmx(_balance);\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x5f04ad37155c92781861d74c3702b279807ae46feed842f496e0e0a8f56cae63\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGlpManager {\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x17adeb1ccc040af996b35d8198661cc33d1e9c0b3ce85c9eee28d9383ec97d3e\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxDepositor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function setGmxProxy(address _proxy) external;\\n}\\n\",\"keccak256\":\"0xd44c62d9eeae0bab1a485260ef6c4ccb2e8cc13a75df386dbc1391d46bebc855\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IGmxDepositor.sol\\\";\\n\\ninterface IGmxProxy {\\n    function gmxDepositor() external view returns (IGmxDepositor);\\n\\n    function gmxRewardRouter() external view returns (address);\\n\\n    function buyAndStakeGlp(uint256 _amount) external returns (uint256);\\n\\n    function withdrawGlp(uint256 _amount) external;\\n\\n    function stakeGmx(uint256 _amount) external;\\n\\n    function withdrawGmx(uint256 _amount) external;\\n\\n    function pendingRewards(address _rewardTracker) external view returns (uint256);\\n\\n    function claimReward(address _rewardTracker) external;\\n\\n    function totalDeposits(address _rewardTracker) external view returns (uint256);\\n\\n    function emergencyWithdrawGLP(uint256 _balance) external;\\n\\n    function emergencyWithdrawGMX(uint256 _balance) external;\\n}\\n\",\"keccak256\":\"0x56681634a4b46627ed0bd5a333d2ebcb409c2e6979b35f08b096a96822c64c0f\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardRouter {\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function bonusGmxTracker() external view returns (address);\\n\\n    function feeGmxTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp)\\n        external\\n        returns (uint256);\\n\\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\\n\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4343e0ba5147aadaae750c8cd33689657b5eeaf6ad29d1140b49dce6bdedf2d\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3f96481089ef8357ff0fb03797a6363666cb2d7376f4f35d117d2b1f7464ef7\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/gmx/interfaces/IGmxVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxVaultPriceFeed {\\n    function getPrice(\\n        address,\\n        bool,\\n        bool,\\n        bool\\n    ) external view returns (uint256);\\n}\\n\\ninterface IGmxVaultUtils {\\n    function getSwapFeeBasisPoints(\\n        address,\\n        address,\\n        uint256\\n    ) external view returns (uint256);\\n\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n}\\n\\ninterface IGmxVault {\\n    function swap(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function whitelistedTokens(address) external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function vaultUtils() external view returns (IGmxVaultUtils);\\n\\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function maxUsdgAmounts(address) external view returns (uint256);\\n\\n    function usdgAmounts(address) external view returns (uint256);\\n\\n    function reservedAmounts(address) external view returns (uint256);\\n\\n    function bufferAmounts(address) external view returns (uint256);\\n\\n    function poolAmounts(address) external view returns (uint256);\\n\\n    function usdg() external view returns (address);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function stableTokens(address) external view returns (bool);\\n\\n    function getFeeBasisPoints(\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool\\n    ) external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function setBufferAmount(address, uint256) external;\\n\\n    function gov() external view returns (address);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function adjustForDecimals(\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcae425bfd07be65ff63cd9631f911a15283ad042d0b6b5fe593bd4cb868cfe6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b506040516200318c3803806200318c83398101604081905262000035916200043a565b6001600160a01b038716620000a65760405162461bcd60e51b815260206004820152602c60248201527f476d7850726f78793a3a496e76616c6964206465706f7369746f72206164647260448201526b195cdcc81c1c9bdd9a59195960a21b60648201526084015b60405180910390fd5b6001600160a01b038616620001175760405162461bcd60e51b815260206004820152603060248201527f476d7850726f78793a3a496e76616c69642072657761726420726f757465722060448201526f1859191c995cdcc81c1c9bdd9a59195960821b60648201526084016200009d565b6001600160a01b0381166200017e5760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c69642064657620616464726573732070726044820152651bdd9a59195960d21b60648201526084016200009d565b600080546001600160a01b0319166001600160a01b038381169190911790915587811660805286811660a081905290861660c0526040805163067200c560e11b81529051630ce4018a916004808201926020929091908290030181865afa158015620001ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002149190620004ce565b6001600160a01b031660e0816001600160a01b031681525050846001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200026c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002929190620004ce565b6001600160a01b03166101008190526040805163fbfa77cf60e01b8152905163fbfa77cf916004808201926020929091908290030181865afa158015620002dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003039190620004ce565b6001600160a01b03166101208190526040805163f5b91b7b60e01b8152905163f5b91b7b916004808201926020929091908290030181865afa1580156200034e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003749190620004ce565b6001600160a01b0316610160816001600160a01b031681525050610120516001600160a01b0316636abbe0c86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f69190620004ce565b6001600160a01b0390811661014052939093166101805260029190915560035550620004f592505050565b6001600160a01b03811681146200043757600080fd5b50565b600080600080600080600060e0888a0312156200045657600080fd5b8751620004638162000421565b6020890151909750620004768162000421565b6040890151909650620004898162000421565b60608901519095506200049c8162000421565b809450506080880151925060a0880151915060c0880151620004be8162000421565b8091505092959891949750929550565b600060208284031215620004e157600080fd5b8151620004ee8162000421565b9392505050565b60805160a05160c05160e0516101005161012051610140516101605161018051612b236200066960003960008181611027015281816110af015261117101526000612029015260008181610d310152610f08015260008181610c3a01528181610daa01528181610e6901528181611f5901528181612054015281816120ff01526121a801526000818161123301526113a00152600081816117e701528181611be20152611cf00152600081816101da01526112f9015260008181610277015281816103ed015281816104ff0152818161062f015281816114e0015281816115bb0152818161194701528181611c390152611e2101526000818161018c015281816103c2015281816104cf015281816105ba015281816106c601528181611201015281816112a00152818161136b0152818161162d0152818161166d0152818161175d015281816117a2015281816119de01528181611a8d01528181611bb001528181611cba0152611ea20152612b236000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c8063affc0a95116100d8578063d28cd38a1161008c578063e404251211610066578063e40425121461031f578063e940325614610332578063f3daeacc1461034557600080fd5b8063d28cd38a146102fb578063d79c019614610303578063da09c72c1461030c57600080fd5b8063c10300f7116100bd578063c10300f714610230578063c613aec0146102bf578063d279c191146102e857600080fd5b8063affc0a9514610299578063bf4d14d5146102ac57600080fd5b8063566155291161013a57806367860cce1161011457806367860cce146102435780639291d5631461025f5780639d54b5241461027257600080fd5b806356615529146102305780635c72f4b514610243578063653bfa201461025657600080fd5b806328495daa1161016b57806328495daa146101d557806331d7a262146101fc5780633b8ae3971461021d57600080fd5b8063026879dc1461018757806311ff5fff146101cb575b600080fd5b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d3610358565b005b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b61020f61020a366004612574565b6104fa565b6040519081526020016101c2565b6101d361022b366004612574565b61074c565b6101d361023e366004612591565b6108cc565b6101d3610251366004612591565b61096b565b61020f60025481565b6101d361026d366004612574565b610a0a565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101d36102a7366004612591565b610b03565b61020f6102ba366004612591565b610b56565b6101ae6102cd366004612574565b6001602052600090815260409020546001600160a01b031681565b6101d36102f6366004612574565b6113f5565b61020f61178b565b61020f60035481565b6000546101ae906001600160a01b031681565b6101d361032d366004612591565b611859565b61020f610340366004612574565b6118ac565b6101d3610353366004612591565b611b00565b6000546001600160a01b031633146103ab5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526104f7907f00000000000000000000000000000000000000000000000000000000000000009060009073ff1489227bbaac61a9209a08929e4c2a526ddd17906370a0823190602401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047091906125aa565b60405160240161048291815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167fef8c5994000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611d45565b50565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166351c3e3b46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f91906125c3565b9050806001600160a01b0316836001600160a01b0316036105a35750600092915050565b60405163402914f560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015282169063402914f590602401602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d91906125aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106af91906125c3565b60405163402914f560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091169063402914f590602401602060405180830381865afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b91906125aa565b61074591906125f6565b9392505050565b6000546001600160a01b0316331461079a5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016103a2565b6000816001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe91906125c3565b6001600160a01b03808216600090815260016020526040902054919250161561088f5760405162461bcd60e51b815260206004820152603260248201527f476d7850726f78793a3a537472617465677920666f72206465706f736974207460448201527f6f6b656e20616c7265616479206164646564000000000000000000000000000060648201526084016103a2565b6001600160a01b03908116600090815260016020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633146109625760405162461bcd60e51b815260206004820152601960248201527f476d7850726f78793a3a6f6e6c79474d5853747261746567790000000000000060448201526064016103a2565b6104f781611e1c565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b03163314610a015760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c505374726174656779000000000000000060448201526064016103a2565b6104f781611f00565b6000546001600160a01b03163314610a585760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016103a2565b6001600160a01b038116610ad45760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c696420646576206164647265737320707260448201527f6f7669646564000000000000000000000000000000000000000000000000000060648201526084016103a2565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b515760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016103a2565b600355565b735643f4b25e36478ee1e90418d5343cb6591bcb9d600090815260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b03163314610bee5760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c505374726174656779000000000000000060448201526064016103a2565b60025473b31f66aa3c1e785363f0875a1b74e27b85fd66c7908310156111f2576040516340d3096b60e11b815273b31f66aa3c1e785363f0875a1b74e27b85fd66c760048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a612d690602401602060405180830381865afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad91906125aa565b905060006c0c9f2c9cd04674edea40000000610cc9838761260e565b610cd3919061262d565b90506000610cf573b31f66aa3c1e785363f0875a1b74e27b85fd66c787611f35565b610d0157600019610da4565b60405163256f6ee360e11b815273b31f66aa3c1e785363f0875a1b74e27b85fd66c76004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634adeddc690604401602060405180830381865afa158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da491906125aa565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2a91906125aa565b905060005b81811015610fa6576040517fe468baf0000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e468baf090602401602060405180830381865afa158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc91906125c3565b60405163256f6ee360e11b81526001600160a01b038083166004830152602482018890529192506000917f00000000000000000000000000000000000000000000000000000000000000001690634adeddc690604401602060405180830381865afa158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7391906125aa565b90508460035482610f8491906125f6565b1015610f91578094508197505b50508080610f9e9061264f565b915050610e2f565b506001600160a01b03851673b31f66aa3c1e785363f0875a1b74e27b85fd66c7146111ed576040517fef99893a0000000000000000000000000000000000000000000000000000000081526004810188905273b31f66aa3c1e785363f0875a1b74e27b85fd66c760248201526001600160a01b0386811660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063ef99893a90606401600060405180830381865afa158015611070573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110989190810190612770565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018a905290915073b31f66aa3c1e785363f0875a1b74e27b85fd66c79063095ea7b3906044016020604051808303816000875af115801561111c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111409190612895565b506040517f5b2466160000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635b246616906111a69084906004016128f4565b6020604051808303816000875af11580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e991906125aa565b9750505b505050505b6112266001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000085612235565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604481018490526112c89082906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611d45565b506040516001600160a01b0382166024820152604481018490526000606482018190526084820181905290611393907f000000000000000000000000000000000000000000000000000000000000000090839060a40160408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611d45565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526000604482018190529192506113df91849160640161126c565b506113eb81600061228c565b925050505b919050565b735643f4b25e36478ee1e90418d5343cb6591bcb9d60005260016020527f4c252107cf1470690ef2505b089a8ebb4870160623fd1d6a4afa8513ed4add90546001600160a01b031633148061149057507362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b031633145b6114dc5760405162461bcd60e51b815260206004820152601860248201527f476d7850726f78793a6f6e6c79474c505374726174656779000000000000000060448201526064016103a2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166351c3e3b46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156091906125c3565b9050806001600160a01b0316826001600160a01b03160361157f575050565b604051600060248201819052604482018190526001606483018190526084830181905260a4830181905260c483015260e48201819052611655917f000000000000000000000000000000000000000000000000000000000000000091906101040160408051601f198184030181529190526020810180516001600160e01b03167f30b70002000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611d45565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa1580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f591906125aa565b604051336024820152604481018290529091506117859073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611d45565b50505050565b604051637aeceb1f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273ff1489227bbaac61a9209a08929e4c2a526ddd1760248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f5d9d63e90604401602060405180830381865afa158015611830573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185491906125aa565b905090565b6000546001600160a01b031633146118a75760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016103a2565b600255565b600080336001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191191906125c3565b90507fffffffffffffffffffffffff9d123f96d427682dd6a78d5600353abdafee399f6001600160a01b03821601611a5d5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630ce4018a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c791906125c3565b604051637aeceb1f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015284811660248301529192509082169063f5d9d63e90604401602060405180830381865afa158015611a39573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113eb91906125aa565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528416906310c1c10390602401602060405180830381865afa158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074591906125aa565b7362edc0692bd897d2295872a9ffcac5425011c66160005260016020527fd9b87995a89b1c84b4bab64e3cd6e44e97280b5a5983d834af443d8e17a7f9b9546001600160a01b03163314611b965760405162461bcd60e51b815260206004820152601960248201527f476d7850726f78793a3a6f6e6c79474d5853747261746567790000000000000060448201526064016103a2565b611bd57362edc0692bd897d2295872a9ffcac5425011c6617f000000000000000000000000000000000000000000000000000000000000000083612235565b6040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260448101829052611c33907362edc0692bd897d2295872a9ffcac5425011c6619060009060640161126c565b50611ce27f0000000000000000000000000000000000000000000000000000000000000000600083604051602401611c6d91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167ff3daeacc000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611d45565b506040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152600060448201819052611d41917362edc0692bd897d2295872a9ffcac5425011c661919060640161126c565b5050565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401611d7a939291906129e6565b6000604051808303816000875af1158015611d99573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dc19190810190612a17565b9150915081611e125760405162461bcd60e51b815260206004820152601c60248201527f476d7850726f78793a3a7361666545786563757465206661696c65640000000060448201526064016103a2565b9695505050505050565b611eca7f0000000000000000000000000000000000000000000000000000000000000000600083604051602401611e5591815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167f078580d2000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611d45565b5060405133602482015260448101829052611d41907362edc0692bd897d2295872a9ffcac5425011c66190600090606401611729565b60405133602482015260448101829052611d4190735643f4b25e36478ee1e90418d5343cb6591bcb9d90600090606401611729565b6040516340d3096b60e11b81526001600160a01b03838116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906381a612d690602401602060405180830381865afa158015611fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc491906125aa565b905060006c0c9f2c9cd04674edea40000000611fe0838661260e565b611fea919061262d565b6040517f42152873000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0387811660248301527f0000000000000000000000000000000000000000000000000000000000000000811660448301529192507f000000000000000000000000000000000000000000000000000000000000000090911690634215287390606401602060405180830381865afa15801561209d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c191906125aa565b6040517f1aa4ace50000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690631aa4ace590602401602060405180830381865afa158015612146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216a91906125aa565b6040517fad1e4f8d0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063ad1e4f8d90602401602060405180830381865afa1580156121ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221391906125aa565b905080158061222a57508061222884846125f6565b105b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526122879084906122f2565b505050565b60006122998260206125f6565b835110156122e95760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e6473000000000000000000000060448201526064016103a2565b50016020015190565b6000612347826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123d79092919063ffffffff16565b80519091501561228757808060200190518101906123659190612895565b6122875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103a2565b60606123e684846000856123ee565b949350505050565b6060824710156124665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103a2565b6001600160a01b0385163b6124bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a2565b600080866001600160a01b031685876040516124d99190612abe565b60006040518083038185875af1925050503d8060008114612516576040519150601f19603f3d011682016040523d82523d6000602084013e61251b565b606091505b509150915061222a82828660608315612535575081610745565b8251156125455782518084602001fd5b8160405162461bcd60e51b81526004016103a29190612ada565b6001600160a01b03811681146104f757600080fd5b60006020828403121561258657600080fd5b81356107458161255f565b6000602082840312156125a357600080fd5b5035919050565b6000602082840312156125bc57600080fd5b5051919050565b6000602082840312156125d557600080fd5b81516107458161255f565b634e487b7160e01b600052601160045260246000fd5b60008219821115612609576126096125e0565b500190565b6000816000190483118215151615612628576126286125e0565b500290565b60008261264a57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201612661576126616125e0565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156126a1576126a1612668565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156126d0576126d0612668565b604052919050565b600067ffffffffffffffff8211156126f2576126f2612668565b5060051b60200190565b600082601f83011261270d57600080fd5b8151602061272261271d836126d8565b6126a7565b82815260059290921b8401810191818101908684111561274157600080fd5b8286015b848110156127655780516127588161255f565b8352918301918301612745565b509695505050505050565b6000602080838503121561278357600080fd5b825167ffffffffffffffff8082111561279b57600080fd5b90840190608082870312156127af57600080fd5b6127b761267e565b8251828111156127c657600080fd5b8301601f810188136127d757600080fd5b80516127e561271d826126d8565b81815260059190911b8201860190868101908a83111561280457600080fd5b928701925b8284101561282257835182529287019290870190612809565b8452505050828401518281111561283857600080fd5b612844888286016126fc565b8583015250604083015193508184111561285d57600080fd5b612869878585016126fc565b6040820152606083015160608201528094505050505092915050565b805180151581146113f057600080fd5b6000602082840312156128a757600080fd5b61074582612885565b600081518084526020808501945080840160005b838110156128e95781516001600160a01b0316875295820195908201906001016128c4565b509495945050505050565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b808310156129395783518252928401926001929092019190840190612919565b50838701519350601f1992508286820301604087015261295981856128b0565b9350505060408501518185840301606086015261297683826128b0565b92505050606084015160808401528091505092915050565b60005b838110156129a9578181015183820152602001612991565b838111156117855750506000910152565b600081518084526129d281602086016020860161298e565b601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201526000612a0e60608301846129ba565b95945050505050565b60008060408385031215612a2a57600080fd5b612a3383612885565b9150602083015167ffffffffffffffff80821115612a5057600080fd5b818501915085601f830112612a6457600080fd5b815181811115612a7657612a76612668565b612a89601f8201601f19166020016126a7565b9150808252866020828501011115612aa057600080fd5b612ab181602084016020860161298e565b5080925050509250929050565b60008251612ad081846020870161298e565b9190910192915050565b60208152600061074560208301846129ba56fea2646970667358221220d949502b00527d4a4a7602c878c3801e7c2605323b523bd751b427a37326053164736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4509,
        "contract": "contracts/strategies/avalanche/gmx/GmxProxy.sol:GmxProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4513,
        "contract": "contracts/strategies/avalanche/gmx/GmxProxy.sol:GmxProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4537,
        "contract": "contracts/strategies/avalanche/gmx/GmxProxy.sol:GmxProxy",
        "label": "maxWavaxSwapAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4539,
        "contract": "contracts/strategies/avalanche/gmx/GmxProxy.sol:GmxProxy",
        "label": "minFeeDifference",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}