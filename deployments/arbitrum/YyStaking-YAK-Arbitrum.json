{
  "address": "0xbb82b43Bf2057B804253D5Db8c18A647fC1f3403",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxDepositFeeBips",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        }
      ],
      "name": "DepositFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_REWARD_PER_SHARE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEPOSIT_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "internalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastRewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setDepositFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFeeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb63b39704e4a095e477ef144a293ef17eda82512ec4362cc697084755aacf00c",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xbb82b43Bf2057B804253D5Db8c18A647fC1f3403",
    "transactionIndex": 2,
    "gasUsed": "14628985",
    "logsBloom": "0x
    "blockHash": "0x2b0a052027299ec1e15b69a338b6c3dede02bdda03ae797e6c5334b4f8d192d2",
    "transactionHash": "0xb63b39704e4a095e477ef144a293ef17eda82512ec4362cc697084755aacf00c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 151338438,
        "transactionHash": "0xb63b39704e4a095e477ef144a293ef17eda82512ec4362cc697084755aacf00c",
        "address": "0xbb82b43Bf2057B804253D5Db8c18A647fC1f3403",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2b0a052027299ec1e15b69a338b6c3dede02bdda03ae797e6c5334b4f8d192d2"
      }
    ],
    "blockNumber": 151338438,
    "cumulativeGasUsed": "14985955",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f4dB37D7bEb31F445307782Bc3Da0F18dF13696",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0xdcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
    1000
  ],
  "solcInputHash": "56490d4cbbc2d17d0b77214945e4b5bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDepositFeeBips\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARD_PER_SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFeePercent\",\"type\":\"uint256\"}],\"name\":\"setDepositFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yield Yak\",\"kind\":\"dev\",\"methods\":{\"addRewardToken(address)\":{\"params\":{\"_rewardToken\":\"The address of the reward token\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"The amount of depositToken to deposit\"}},\"depositFor(address,uint256)\":{\"params\":{\"account\":\"Account to deposit for\",\"amount\":\"The amount of depositToken to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount of depositToken to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getUserInfo(address,address)\":{\"params\":{\"_rewardToken\":\"The address of the reward token\",\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The amount of depositToken user has deposited\",\"_1\":\"The reward debt for the chosen token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingReward(address,address)\":{\"params\":{\"_token\":\"The address of the token\",\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"`_user`'s pending reward token\"}},\"removeRewardToken(address)\":{\"params\":{\"_rewardToken\":\"The address of the reward token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardTokensLength()\":{\"returns\":{\"_0\":\"The length of the array\"}},\"setDepositFeePercent(uint256)\":{\"params\":{\"_depositFeePercent\":\"The new deposit fee percent\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFeeCollector(address)\":{\"details\":\"Restricted to existing fee collector\",\"params\":{\"_newFeeCollector\":\"The address of the new fee collector\"}},\"updateReward(address)\":{\"details\":\"Needs to be called before any deposit or withdrawal\",\"params\":{\"_token\":\"The address of the reward token\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount to withdraw\"}}},\"stateVariables\":{\"DEPOSIT_FEE_PERCENT_PRECISION\":{\"details\":\"The precision of `depositFeePercent`\"},\"internalBalance\":{\"details\":\"Internal balance of depositToken, this gets updated on user deposits / withdrawals this allows to reward users with depositToken\"},\"userInfo\":{\"details\":\"Info of each user that stakes\"}},\"title\":\"YY Staking\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimReward(address,address,uint256)\":{\"notice\":\"Emitted when a user claims reward\"},\"Deposit(address,uint256,uint256)\":{\"notice\":\"Emitted when a user deposits\"},\"DepositFeeChanged(uint256,uint256)\":{\"notice\":\"Emitted when owner changes the deposit fee percentage\"},\"EmergencyWithdraw(address,uint256)\":{\"notice\":\"Emitted when a user emergency withdraws\"},\"FeeCollectorChanged(address,address)\":{\"notice\":\"Emitted when feeCollector changes the fee collector\"},\"RewardTokenAdded(address)\":{\"notice\":\"Emitted when owner adds a token to the reward tokens list\"},\"RewardTokenRemoved(address)\":{\"notice\":\"Emitted when owner removes a token from the reward tokens list\"},\"Withdraw(address,uint256)\":{\"notice\":\"Emitted when a user withdraws\"}},\"kind\":\"user\",\"methods\":{\"ACC_REWARD_PER_SHARE_PRECISION()\":{\"notice\":\"The precision of `accRewardPerShare`\"},\"accRewardPerShare(address)\":{\"notice\":\"Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\"},\"addRewardToken(address)\":{\"notice\":\"Add a reward token\"},\"deposit(uint256)\":{\"notice\":\"Deposit for reward token allocation\"},\"depositFeePercent()\":{\"notice\":\"The deposit fee, scaled to `DEPOSIT_FEE_PERCENT_PRECISION`\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositToken()\":{\"notice\":\"Farm deposit token\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY\"},\"getUserInfo(address,address)\":{\"notice\":\"Get user info\"},\"lastRewardBalance(address)\":{\"notice\":\"Last reward balance of `token`\"},\"pendingReward(address,address)\":{\"notice\":\"View function to see pending reward token on frontend\"},\"removeRewardToken(address)\":{\"notice\":\"Remove a reward token\"},\"rewardTokens(uint256)\":{\"notice\":\"Array of tokens that users can claim\"},\"rewardTokensLength()\":{\"notice\":\"Get the number of reward tokens\"},\"setDepositFeePercent(uint256)\":{\"notice\":\"Set the deposit fee percent\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateReward(address)\":{\"notice\":\"Update reward variables\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw and harvest the rewards\"}},\"notice\":\"YyStaking is a contract that allows ERC20 deposits and receives rewards from token balances which may be transferred in without an additional function call. The contract is based on StableJoeStaking from Trader Joe. Users deposit X and receive a share of what has been sent based on their participation of the total deposits. It is similar to a MasterChef, but we allow for claiming of different reward tokens. Every time `updateReward(token)` is called, We distribute the balance of that tokens as rewards to users that are currently staking inside this contract, and they can claim it using `withdraw(0)`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farms/YyStaking.sol\":\"YyStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/farms/YyStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../lib/Ownable.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title YY Staking\\n * @author Yield Yak\\n * @notice YyStaking is a contract that allows ERC20 deposits and receives rewards from token balances which may be\\n * transferred in without an additional function call. The contract is based on StableJoeStaking from Trader Joe.\\n * Users deposit X and receive a share of what has been sent based on their participation of the total deposits.\\n * It is similar to a MasterChef, but we allow for claiming of different reward tokens.\\n * Every time `updateReward(token)` is called, We distribute the balance of that tokens as rewards to users that are\\n * currently staking inside this contract, and they can claim it using `withdraw(0)`\\n */\\ncontract YyStaking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Info of each user\\n    struct UserInfo {\\n        uint256 amount;\\n        mapping(IERC20 => uint256) rewardDebt;\\n        /**\\n         * @notice We do some fancy math here. Basically, any point in time, the amount of deposit tokens\\n         * entitled to a user but is pending to be distributed is:\\n         *\\n         *   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt[token]\\n         *\\n         * Whenever a user deposits or withdraws. Here's what happens:\\n         *   1. accRewardPerShare (and `lastRewardBalance`) gets updated\\n         *   2. User receives the pending reward sent to his/her address\\n         *   3. User's `amount` gets updated\\n         *   4. User's `rewardDebt[token]` gets updated\\n         */\\n    }\\n\\n    /// @notice Farm deposit token\\n    IERC20 public depositToken;\\n\\n    /// @dev Internal balance of depositToken, this gets updated on user deposits / withdrawals\\n    /// this allows to reward users with depositToken\\n    uint256 public internalBalance;\\n\\n    /// @notice Array of tokens that users can claim\\n    IERC20[] public rewardTokens;\\n    mapping(IERC20 => bool) public isRewardToken;\\n\\n    /// @notice Last reward balance of `token`\\n    mapping(IERC20 => uint256) public lastRewardBalance;\\n\\n    address public feeCollector;\\n\\n    /// @notice The deposit fee, scaled to `DEPOSIT_FEE_PERCENT_PRECISION`\\n    uint256 public depositFeePercent;\\n    uint256 public immutable MAX_DEPOSIT_FEE_BIPS;\\n\\n    /// @dev The precision of `depositFeePercent`\\n    uint256 internal constant DEPOSIT_FEE_PERCENT_PRECISION = 10000;\\n\\n    /// @notice Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\\n    mapping(IERC20 => uint256) public accRewardPerShare;\\n    /// @notice The precision of `accRewardPerShare`\\n    uint256 public ACC_REWARD_PER_SHARE_PRECISION;\\n\\n    /// @dev Info of each user that stakes\\n    mapping(address => UserInfo) private userInfo;\\n\\n    /// @notice Emitted when a user deposits\\n    event Deposit(address indexed user, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when feeCollector changes the fee collector\\n    event FeeCollectorChanged(address newFeeCollector, address oldFeeCollector);\\n\\n    /// @notice Emitted when owner changes the deposit fee percentage\\n    event DepositFeeChanged(uint256 newFee, uint256 oldFee);\\n\\n    /// @notice Emitted when a user withdraws\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when a user claims reward\\n    event ClaimReward(address indexed user, address indexed rewardToken, uint256 amount);\\n\\n    /// @notice Emitted when a user emergency withdraws\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when owner adds a token to the reward tokens list\\n    event RewardTokenAdded(address token);\\n\\n    /// @notice Emitted when owner removes a token from the reward tokens list\\n    event RewardTokenRemoved(address token);\\n\\n    constructor(\\n        IERC20 _depositToken,\\n        IERC20 _rewardToken,\\n        address _feeCollector,\\n        uint256 _maxDepositFeeBips\\n    ) {\\n        require(address(_depositToken) != address(0), \\\"YyStaking::depositToken can't be address(0)\\\");\\n        require(address(_rewardToken) != address(0), \\\"YyStaking::rewardToken can't be address(0)\\\");\\n        require(_feeCollector != address(0), \\\"YyStaking::feeCollector can't be address(0)\\\");\\n\\n        depositToken = _depositToken;\\n        feeCollector = _feeCollector;\\n\\n        isRewardToken[_rewardToken] = true;\\n        rewardTokens.push(_rewardToken);\\n        ACC_REWARD_PER_SHARE_PRECISION = 1e24;\\n        MAX_DEPOSIT_FEE_BIPS = _maxDepositFeeBips;\\n    }\\n\\n    /**\\n     * @notice Deposit for reward token allocation\\n     * @param amount The amount of depositToken to deposit\\n     */\\n    function deposit(uint256 amount) external {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @param account Account to deposit for\\n     * @param amount The amount of depositToken to deposit\\n     */\\n    function depositFor(address account, uint256 amount) external {\\n        _deposit(account, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param amount The amount of depositToken to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        UserInfo storage user = userInfo[_account];\\n\\n        uint256 _fee = _amount.mul(depositFeePercent).div(DEPOSIT_FEE_PERCENT_PRECISION);\\n        uint256 _amountMinusFee = _amount.sub(_fee);\\n\\n        uint256 _previousAmount = user.amount;\\n        uint256 _newAmount = user.amount.add(_amountMinusFee);\\n        user.amount = _newAmount;\\n\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            IERC20 _token = rewardTokens[i];\\n            updateReward(_token);\\n\\n            uint256 _previousRewardDebt = user.rewardDebt[_token];\\n            user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(ACC_REWARD_PER_SHARE_PRECISION);\\n\\n            if (_previousAmount != 0) {\\n                uint256 _pending = _previousAmount\\n                    .mul(accRewardPerShare[_token])\\n                    .div(ACC_REWARD_PER_SHARE_PRECISION)\\n                    .sub(_previousRewardDebt);\\n                if (_pending != 0) {\\n                    safeTokenTransfer(_token, _account, _pending);\\n                    emit ClaimReward(_account, address(_token), _pending);\\n                }\\n            }\\n        }\\n\\n        internalBalance = internalBalance.add(_amountMinusFee);\\n        depositToken.safeTransferFrom(msg.sender, feeCollector, _fee);\\n        depositToken.safeTransferFrom(msg.sender, address(this), _amountMinusFee);\\n        emit Deposit(_account, _amountMinusFee, _fee);\\n    }\\n\\n    /**\\n     * @notice Get user info\\n     * @param _user The address of the user\\n     * @param _rewardToken The address of the reward token\\n     * @return The amount of depositToken user has deposited\\n     * @return The reward debt for the chosen token\\n     */\\n    function getUserInfo(address _user, IERC20 _rewardToken) external view returns (uint256, uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        return (user.amount, user.rewardDebt[_rewardToken]);\\n    }\\n\\n    /**\\n     * @notice Get the number of reward tokens\\n     * @return The length of the array\\n     */\\n    function rewardTokensLength() external view returns (uint256) {\\n        return rewardTokens.length;\\n    }\\n\\n    /**\\n     * @notice Add a reward token\\n     * @param _rewardToken The address of the reward token\\n     */\\n    function addRewardToken(IERC20 _rewardToken) external onlyOwner {\\n        require(\\n            !isRewardToken[_rewardToken] && address(_rewardToken) != address(0),\\n            \\\"YyStaking::rewardToken can't be added\\\"\\n        );\\n        require(rewardTokens.length < 25, \\\"YyStaking::list of rewardTokens too big\\\");\\n        rewardTokens.push(_rewardToken);\\n        isRewardToken[_rewardToken] = true;\\n        updateReward(_rewardToken);\\n        emit RewardTokenAdded(address(_rewardToken));\\n    }\\n\\n    /**\\n     * @notice Remove a reward token\\n     * @param _rewardToken The address of the reward token\\n     */\\n    function removeRewardToken(IERC20 _rewardToken) external onlyOwner {\\n        require(isRewardToken[_rewardToken], \\\"YyStaking::rewardToken can't be removed\\\");\\n        updateReward(_rewardToken);\\n        isRewardToken[_rewardToken] = false;\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            if (rewardTokens[i] == _rewardToken) {\\n                rewardTokens[i] = rewardTokens[_len - 1];\\n                rewardTokens.pop();\\n                accRewardPerShare[_rewardToken] = 0;\\n                lastRewardBalance[_rewardToken] = 0;\\n                break;\\n            }\\n        }\\n        emit RewardTokenRemoved(address(_rewardToken));\\n    }\\n\\n    /**\\n     * @notice Set the deposit fee percent\\n     * @param _depositFeePercent The new deposit fee percent\\n     */\\n    function setDepositFeePercent(uint256 _depositFeePercent) external onlyOwner {\\n        require(_depositFeePercent <= MAX_DEPOSIT_FEE_BIPS, \\\"YyStaking::deposit fee too high\\\");\\n        emit DepositFeeChanged(_depositFeePercent, depositFeePercent);\\n        depositFeePercent = _depositFeePercent;\\n    }\\n\\n    /**\\n     * @notice View function to see pending reward token on frontend\\n     * @param _user The address of the user\\n     * @param _token The address of the token\\n     * @return `_user`'s pending reward token\\n     */\\n    function pendingReward(address _user, IERC20 _token) external view returns (uint256) {\\n        if (!isRewardToken[_token]) {\\n            return 0;\\n        }\\n\\n        UserInfo storage user = userInfo[_user];\\n        uint256 _totalDepositTokens = internalBalance;\\n        uint256 _accRewardTokenPerShare = accRewardPerShare[_token];\\n\\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\\n        uint256 _rewardBalance = _token == depositToken\\n            ? _currRewardBalance.sub(_totalDepositTokens)\\n            : _currRewardBalance;\\n\\n        if (_rewardBalance != lastRewardBalance[_token] && _totalDepositTokens != 0) {\\n            uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\\n            _accRewardTokenPerShare = _accRewardTokenPerShare.add(\\n                _accruedReward.mul(ACC_REWARD_PER_SHARE_PRECISION).div(_totalDepositTokens)\\n            );\\n        }\\n        return\\n            user.amount.mul(_accRewardTokenPerShare).div(ACC_REWARD_PER_SHARE_PRECISION).sub(user.rewardDebt[_token]);\\n    }\\n\\n    /**\\n     * @notice Withdraw and harvest the rewards\\n     * @param _amount The amount to withdraw\\n     */\\n    function withdraw(uint256 _amount) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _previousAmount = user.amount;\\n        require(_amount <= _previousAmount, \\\"YyStaking::withdraw amount exceeds balance\\\");\\n        uint256 _newAmount = user.amount.sub(_amount);\\n        user.amount = _newAmount;\\n\\n        uint256 _len = rewardTokens.length;\\n        if (_previousAmount != 0) {\\n            for (uint256 i; i < _len; i++) {\\n                IERC20 _token = rewardTokens[i];\\n                updateReward(_token);\\n\\n                uint256 _pending = _previousAmount\\n                    .mul(accRewardPerShare[_token])\\n                    .div(ACC_REWARD_PER_SHARE_PRECISION)\\n                    .sub(user.rewardDebt[_token]);\\n                user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(ACC_REWARD_PER_SHARE_PRECISION);\\n\\n                if (_pending != 0) {\\n                    safeTokenTransfer(_token, msg.sender, _pending);\\n                    emit ClaimReward(msg.sender, address(_token), _pending);\\n                }\\n            }\\n        }\\n\\n        internalBalance = internalBalance.sub(_amount);\\n        depositToken.safeTransfer(msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY\\n     */\\n    function emergencyWithdraw() external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            IERC20 _token = rewardTokens[i];\\n            user.rewardDebt[_token] = 0;\\n        }\\n        internalBalance = internalBalance.sub(_amount);\\n        depositToken.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Update reward variables\\n     * @param _token The address of the reward token\\n     * @dev Needs to be called before any deposit or withdrawal\\n     */\\n    function updateReward(IERC20 _token) public {\\n        require(isRewardToken[_token], \\\"YyStaking::wrong reward token\\\");\\n\\n        uint256 _totalDepositTokens = internalBalance;\\n\\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\\n        uint256 _rewardBalance = _token == depositToken\\n            ? _currRewardBalance.sub(_totalDepositTokens)\\n            : _currRewardBalance;\\n\\n        // Did YyStaking receive any token\\n        if (_rewardBalance == lastRewardBalance[_token] || _totalDepositTokens == 0) {\\n            return;\\n        }\\n\\n        uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\\n\\n        accRewardPerShare[_token] = accRewardPerShare[_token].add(\\n            _accruedReward.mul(ACC_REWARD_PER_SHARE_PRECISION).div(_totalDepositTokens)\\n        );\\n        lastRewardBalance[_token] = _rewardBalance;\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @dev Restricted to existing fee collector\\n     * @param _newFeeCollector The address of the new fee collector\\n     */\\n    function updateFeeCollector(address _newFeeCollector) external onlyOwner {\\n        emit FeeCollectorChanged(_newFeeCollector, feeCollector);\\n        feeCollector = _newFeeCollector;\\n    }\\n\\n    /**\\n     * @notice Safe token transfer function, just in case if rounding error\\n     * causes pool to not have enough reward tokens\\n     * @param _token The address of then token to transfer\\n     * @param _to The address that will receive `_amount` `rewardToken`\\n     * @param _amount The amount to send to `_to`\\n     */\\n    function safeTokenTransfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\\n        uint256 _rewardBalance = _token == depositToken ? _currRewardBalance.sub(internalBalance) : _currRewardBalance;\\n\\n        if (_amount > _rewardBalance) {\\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_rewardBalance);\\n            _token.safeTransfer(_to, _rewardBalance);\\n        } else {\\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_amount);\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65251f5453dfcb9531d82871aa305a03f4099566be75e7ade088643acdbbc765\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity 0.8.13;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc346884413e71a1422efe5e44741b2692cbabf006f562dbdf38186790f49b1c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620020993803806200209983398101604081905262000034916200026f565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038416620000e55760405162461bcd60e51b815260206004820152602b60248201527f59795374616b696e673a3a6465706f736974546f6b656e2063616e277420626560448201526a206164647265737328302960a81b60648201526084015b60405180910390fd5b6001600160a01b038316620001505760405162461bcd60e51b815260206004820152602a60248201527f59795374616b696e673a3a726577617264546f6b656e2063616e2774206265206044820152696164647265737328302960b01b6064820152608401620000dc565b6001600160a01b038216620001bc5760405162461bcd60e51b815260206004820152602b60248201527f59795374616b696e673a3a666565436f6c6c6563746f722063616e277420626560448201526a206164647265737328302960a81b6064820152608401620000dc565b600180546001600160a01b03199081166001600160a01b0396871617825560068054821694871694909417909355929093166000818152600460205260408120805460ff19168517905560038054948501815590527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9092018054909116909117905569d3c21bcecceda1000000600955608052620002c9565b6001600160a01b03811681146200026c57600080fd5b50565b600080600080608085870312156200028657600080fd5b8451620002938162000256565b6020860151909450620002a68162000256565b6040860151909350620002b98162000256565b6060959095015193969295505050565b608051611dad620002ec60003960008181610291015261069f0152611dad6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80637bb7bed1116100ee578063c415b95c11610097578063d2c35ce811610071578063d2c35ce81461039a578063db2e21bc146103ad578063f2801fe7146103b5578063f2fde38b1461040b57600080fd5b8063c415b95c1461036b578063c89039c51461037e578063cc1252ae1461039157600080fd5b8063b5fd73f8116100c8578063b5fd73f81461031d578063b6b55f2514610350578063bf199e621461036357600080fd5b80637bb7bed1146102ce5780638da5cb5b146102f95780639ced7e761461030a57600080fd5b80633d509c971161015b5780635fc0d9e0116101355780635fc0d9e01461026c5780636148622a1461028c578063632447c9146102b3578063715018a6146102c657600080fd5b80633d509c97146102265780634a970be7146102395780635dcea4d41461024c57600080fd5b80632e6245c61161018c5780632e6245c6146101ee5780632f4f21e21461020a5780633c97d5ae1461021d57600080fd5b80631c03e6cc146101b35780632052eb77146101c85780632e1a7d4d146101db575b600080fd5b6101c66101c1366004611b0c565b61041e565b005b6101c66101d6366004611b29565b610643565b6101c66101e9366004611b29565b61074f565b6101f760025481565b6040519081526020015b60405180910390f35b6101c6610218366004611b42565b610992565b6101f760095481565b6101c6610234366004611b0c565b6109a0565b6101c6610247366004611b6e565b610c1b565b6101f761025a366004611b0c565b60086020526000908152604090205481565b6101f761027a366004611b0c565b60056020526000908152604090205481565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6101c66102c1366004611b0c565b610ccd565b6101c6610e8f565b6102e16102dc366004611b29565b610f33565b6040516001600160a01b039091168152602001610201565b6000546001600160a01b03166102e1565b6101f7610318366004611bbd565b610f5d565b61034061032b366004611b0c565b60046020526000908152604090205460ff1681565b6040519015158152602001610201565b6101c661035e366004611b29565b6110fd565b6003546101f7565b6006546102e1906001600160a01b031681565b6001546102e1906001600160a01b031681565b6101f760075481565b6101c66103a8366004611b0c565b61110a565b6101c66111cd565b6103f66103c3366004611bbd565b6001600160a01b038083166000908152600a60209081526040808320805494861684526001019091529020549250929050565b60408051928352602083019190915201610201565b6101c6610419366004611b0c565b6112a0565b6000546001600160a01b0316331461047d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811660009081526004602052604090205460ff161580156104ae57506001600160a01b03811615155b6105205760405162461bcd60e51b815260206004820152602560248201527f59795374616b696e673a3a726577617264546f6b656e2063616e27742062652060448201527f61646465640000000000000000000000000000000000000000000000000000006064820152608401610474565b6003546019116105985760405162461bcd60e51b815260206004820152602760248201527f59795374616b696e673a3a6c697374206f6620726577617264546f6b656e732060448201527f746f6f20626967000000000000000000000000000000000000000000000000006064820152608401610474565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0384169081179091556000908152600460205260409020805460ff1916909117905561060481610ccd565b6040516001600160a01b03821681527ff3e4c2c64e71e6ba2eaab9a599bced62f9eb91d2cda610bf41aa8c80ff2cf8269060200160405180910390a150565b6000546001600160a01b0316331461069d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b7f000000000000000000000000000000000000000000000000000000000000000081111561070d5760405162461bcd60e51b815260206004820152601f60248201527f59795374616b696e673a3a6465706f7369742066656520746f6f2068696768006044820152606401610474565b6007546040805183815260208101929092527f6be5411ea11f30380402ca68832d060d744cbc5f62d2344495c10256ba93904a910160405180910390a1600755565b336000908152600a602052604090208054808311156107d65760405162461bcd60e51b815260206004820152602a60248201527f59795374616b696e673a3a776974686472617720616d6f756e7420657863656560448201527f64732062616c616e6365000000000000000000000000000000000000000000006064820152608401610474565b81546000906107e590856113d1565b808455600354909150821561092f5760005b8181101561092d5760006003828154811061081457610814611bf6565b6000918252602090912001546001600160a01b0316905061083481610ccd565b6001600160a01b038116600090815260018701602090815260408083205460095460089093529083205461087d9261087791610871908b906113e4565b906113f0565b906113d1565b6009546001600160a01b0384166000908152600860205260409020549192506108ab916108719088906113e4565b6001600160a01b03831660009081526001890160205260409020558015610918576108d78233836113fc565b6040518181526001600160a01b0383169033907f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e519060200160405180910390a35b5050808061092590611c22565b9150506107f7565b505b60025461093c90866113d1565b600255600154610956906001600160a01b03163387611535565b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050505050565b61099c82826115e3565b5050565b6000546001600160a01b031633146109fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b6001600160a01b03811660009081526004602052604090205460ff16610a885760405162461bcd60e51b815260206004820152602760248201527f59795374616b696e673a3a726577617264546f6b656e2063616e27742062652060448201527f72656d6f766564000000000000000000000000000000000000000000000000006064820152608401610474565b610a9181610ccd565b6001600160a01b0381166000908152600460205260408120805460ff19169055600354905b81811015610bda57826001600160a01b031660038281548110610adb57610adb611bf6565b6000918252602090912001546001600160a01b031603610bc8576003610b02600184611c3b565b81548110610b1257610b12611bf6565b600091825260209091200154600380546001600160a01b039092169183908110610b3e57610b3e611bf6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610b7d57610b7d611c52565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03851682526008815260408083208390556005909152812055610bda565b80610bd281611c22565b915050610ab6565b506040516001600160a01b03831681527f66257bcef574219c04f7c05f7a1c78d599da10491294c92a5805c48b4cdf50099060200160405180910390a15050565b6001546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b50505050610cc633866115e3565b5050505050565b6001600160a01b03811660009081526004602052604090205460ff16610d355760405162461bcd60e51b815260206004820152601d60248201527f59795374616b696e673a3a77726f6e672072657761726420746f6b656e0000006044820152606401610474565b6002546040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da39190611c68565b6001549091506000906001600160a01b03858116911614610dc45781610dce565b610dce82846113d1565b6001600160a01b038516600090815260056020526040902054909150811480610df5575082155b15610e005750505050565b6001600160a01b038416600090815260056020526040812054610e249083906113d1565b9050610e61610e4285610871600954856113e490919063ffffffff16565b6001600160a01b03871660009081526008602052604090205490611817565b6001600160a01b03909516600090815260086020908152604080832097909755600590529490942055505050565b6000546001600160a01b03163314610ee95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60038181548110610f4357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811660009081526004602052604081205460ff16610f85575060006110f7565b6001600160a01b038381166000908152600a6020908152604080832060025494871680855260089093528184205491516370a0823160e01b81523060048201529094939192906370a0823190602401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110159190611c68565b6001549091506000906001600160a01b038881169116146110365781611040565b61104082856113d1565b6001600160a01b038816600090815260056020526040902054909150811480159061106a57508315155b156110bc576001600160a01b0387166000908152600560205260408120546110939083906113d1565b90506110b86110b186610871600954856113e490919063ffffffff16565b8590611817565b9350505b6001600160a01b038716600090815260018601602052604090205460095486546110ef92916108779161087190886113e4565b955050505050505b92915050565b61110733826115e3565b50565b6000546001600160a01b031633146111645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b600654604080516001600160a01b03808516825290921660208301527f649c5e3d0ed183894196148e193af316452b0037e77d2ff0fef23b7dc722bed0910160405180910390a1600680546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600a60205260408120805482825560035491929091905b8181101561123e5760006003828154811061120757611207611bf6565b60009182526020808320909101546001600160a01b031682526001870190526040812055508061123681611c22565b9150506111ea565b5060025461124c90836113d1565b600255600154611266906001600160a01b03163384611535565b60405182815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a2505050565b6000546001600160a01b031633146112fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b6001600160a01b0381166113765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610474565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006113dd8284611c3b565b9392505050565b60006113dd8284611c81565b60006113dd8284611ca0565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190611c68565b6001549091506000906001600160a01b038681169116146114885781611496565b6002546114969083906113d1565b9050808311156114ef576001600160a01b0385166000908152600560205260409020546114c390826113d1565b6001600160a01b0386166000818152600560205260409020919091556114ea908583611535565b610cc6565b6001600160a01b03851660009081526005602052604090205461151290846113d1565b6001600160a01b038616600081815260056020526040902091909155610cc69085855b6040516001600160a01b0383166024820152604481018290526115de9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611823565b505050565b6001600160a01b0382166000908152600a6020526040812060075490919061161490612710906108719086906113e4565b9050600061162284836113d1565b835490915060006116338284611817565b80865560035490915060005b818110156117815760006003828154811061165c5761165c611bf6565b6000918252602090912001546001600160a01b0316905061167c81610ccd565b6001600160a01b038116600090815260018901602090815260408083205460095460089093529220546116b591906108719088906113e4565b6001600160a01b038316600090815260018b016020526040902055851561176c576009546001600160a01b038316600090815260086020526040812054909161170991849161087791610871908c906113e4565b9050801561176a5761171c838d836113fc565b826001600160a01b03168c6001600160a01b03167f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e518360405161176191815260200190565b60405180910390a35b505b5050808061177990611c22565b91505061163f565b5060025461178f9085611817565b6002556006546001546117b1916001600160a01b039182169133911688611908565b6001546117c9906001600160a01b0316333087611908565b60408051858152602081018790526001600160a01b038a16917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25050505050505050565b60006113dd8284611cc2565b6000611878826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661195f9092919063ffffffff16565b8051909150156115de57808060200190518101906118969190611cda565b6115de5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610474565b6040516001600160a01b03808516602483015283166044820152606481018290526119599085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161157a565b50505050565b606061196e8484600085611976565b949350505050565b6060824710156119ee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610474565b6001600160a01b0385163b611a455760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610474565b600080866001600160a01b03168587604051611a619190611d28565b60006040518083038185875af1925050503d8060008114611a9e576040519150601f19603f3d011682016040523d82523d6000602084013e611aa3565b606091505b5091509150611ab3828286611abe565b979650505050505050565b60608315611acd5750816113dd565b825115611add5782518084602001fd5b8160405162461bcd60e51b81526004016104749190611d44565b6001600160a01b038116811461110757600080fd5b600060208284031215611b1e57600080fd5b81356113dd81611af7565b600060208284031215611b3b57600080fd5b5035919050565b60008060408385031215611b5557600080fd5b8235611b6081611af7565b946020939093013593505050565b600080600080600060a08688031215611b8657600080fd5b8535945060208601359350604086013560ff81168114611ba557600080fd5b94979396509394606081013594506080013592915050565b60008060408385031215611bd057600080fd5b8235611bdb81611af7565b91506020830135611beb81611af7565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c3457611c34611c0c565b5060010190565b600082821015611c4d57611c4d611c0c565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215611c7a57600080fd5b5051919050565b6000816000190483118215151615611c9b57611c9b611c0c565b500290565b600082611cbd57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611cd557611cd5611c0c565b500190565b600060208284031215611cec57600080fd5b815180151581146113dd57600080fd5b60005b83811015611d17578181015183820152602001611cff565b838111156119595750506000910152565b60008251611d3a818460208701611cfc565b9190910192915050565b6020815260008251806020840152611d63816040850160208701611cfc565b601f01601f1916919091016040019291505056fea2646970667358221220c34984a9850bac83c60a68a382be5540af9d010c01747b9bf85fd138b8dc071864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c80637bb7bed1116100ee578063c415b95c11610097578063d2c35ce811610071578063d2c35ce81461039a578063db2e21bc146103ad578063f2801fe7146103b5578063f2fde38b1461040b57600080fd5b8063c415b95c1461036b578063c89039c51461037e578063cc1252ae1461039157600080fd5b8063b5fd73f8116100c8578063b5fd73f81461031d578063b6b55f2514610350578063bf199e621461036357600080fd5b80637bb7bed1146102ce5780638da5cb5b146102f95780639ced7e761461030a57600080fd5b80633d509c971161015b5780635fc0d9e0116101355780635fc0d9e01461026c5780636148622a1461028c578063632447c9146102b3578063715018a6146102c657600080fd5b80633d509c97146102265780634a970be7146102395780635dcea4d41461024c57600080fd5b80632e6245c61161018c5780632e6245c6146101ee5780632f4f21e21461020a5780633c97d5ae1461021d57600080fd5b80631c03e6cc146101b35780632052eb77146101c85780632e1a7d4d146101db575b600080fd5b6101c66101c1366004611b0c565b61041e565b005b6101c66101d6366004611b29565b610643565b6101c66101e9366004611b29565b61074f565b6101f760025481565b6040519081526020015b60405180910390f35b6101c6610218366004611b42565b610992565b6101f760095481565b6101c6610234366004611b0c565b6109a0565b6101c6610247366004611b6e565b610c1b565b6101f761025a366004611b0c565b60086020526000908152604090205481565b6101f761027a366004611b0c565b60056020526000908152604090205481565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6101c66102c1366004611b0c565b610ccd565b6101c6610e8f565b6102e16102dc366004611b29565b610f33565b6040516001600160a01b039091168152602001610201565b6000546001600160a01b03166102e1565b6101f7610318366004611bbd565b610f5d565b61034061032b366004611b0c565b60046020526000908152604090205460ff1681565b6040519015158152602001610201565b6101c661035e366004611b29565b6110fd565b6003546101f7565b6006546102e1906001600160a01b031681565b6001546102e1906001600160a01b031681565b6101f760075481565b6101c66103a8366004611b0c565b61110a565b6101c66111cd565b6103f66103c3366004611bbd565b6001600160a01b038083166000908152600a60209081526040808320805494861684526001019091529020549250929050565b60408051928352602083019190915201610201565b6101c6610419366004611b0c565b6112a0565b6000546001600160a01b0316331461047d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811660009081526004602052604090205460ff161580156104ae57506001600160a01b03811615155b6105205760405162461bcd60e51b815260206004820152602560248201527f59795374616b696e673a3a726577617264546f6b656e2063616e27742062652060448201527f61646465640000000000000000000000000000000000000000000000000000006064820152608401610474565b6003546019116105985760405162461bcd60e51b815260206004820152602760248201527f59795374616b696e673a3a6c697374206f6620726577617264546f6b656e732060448201527f746f6f20626967000000000000000000000000000000000000000000000000006064820152608401610474565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0384169081179091556000908152600460205260409020805460ff1916909117905561060481610ccd565b6040516001600160a01b03821681527ff3e4c2c64e71e6ba2eaab9a599bced62f9eb91d2cda610bf41aa8c80ff2cf8269060200160405180910390a150565b6000546001600160a01b0316331461069d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b7f000000000000000000000000000000000000000000000000000000000000000081111561070d5760405162461bcd60e51b815260206004820152601f60248201527f59795374616b696e673a3a6465706f7369742066656520746f6f2068696768006044820152606401610474565b6007546040805183815260208101929092527f6be5411ea11f30380402ca68832d060d744cbc5f62d2344495c10256ba93904a910160405180910390a1600755565b336000908152600a602052604090208054808311156107d65760405162461bcd60e51b815260206004820152602a60248201527f59795374616b696e673a3a776974686472617720616d6f756e7420657863656560448201527f64732062616c616e6365000000000000000000000000000000000000000000006064820152608401610474565b81546000906107e590856113d1565b808455600354909150821561092f5760005b8181101561092d5760006003828154811061081457610814611bf6565b6000918252602090912001546001600160a01b0316905061083481610ccd565b6001600160a01b038116600090815260018701602090815260408083205460095460089093529083205461087d9261087791610871908b906113e4565b906113f0565b906113d1565b6009546001600160a01b0384166000908152600860205260409020549192506108ab916108719088906113e4565b6001600160a01b03831660009081526001890160205260409020558015610918576108d78233836113fc565b6040518181526001600160a01b0383169033907f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e519060200160405180910390a35b5050808061092590611c22565b9150506107f7565b505b60025461093c90866113d1565b600255600154610956906001600160a01b03163387611535565b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050505050565b61099c82826115e3565b5050565b6000546001600160a01b031633146109fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b6001600160a01b03811660009081526004602052604090205460ff16610a885760405162461bcd60e51b815260206004820152602760248201527f59795374616b696e673a3a726577617264546f6b656e2063616e27742062652060448201527f72656d6f766564000000000000000000000000000000000000000000000000006064820152608401610474565b610a9181610ccd565b6001600160a01b0381166000908152600460205260408120805460ff19169055600354905b81811015610bda57826001600160a01b031660038281548110610adb57610adb611bf6565b6000918252602090912001546001600160a01b031603610bc8576003610b02600184611c3b565b81548110610b1257610b12611bf6565b600091825260209091200154600380546001600160a01b039092169183908110610b3e57610b3e611bf6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610b7d57610b7d611c52565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03851682526008815260408083208390556005909152812055610bda565b80610bd281611c22565b915050610ab6565b506040516001600160a01b03831681527f66257bcef574219c04f7c05f7a1c78d599da10491294c92a5805c48b4cdf50099060200160405180910390a15050565b6001546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b50505050610cc633866115e3565b5050505050565b6001600160a01b03811660009081526004602052604090205460ff16610d355760405162461bcd60e51b815260206004820152601d60248201527f59795374616b696e673a3a77726f6e672072657761726420746f6b656e0000006044820152606401610474565b6002546040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da39190611c68565b6001549091506000906001600160a01b03858116911614610dc45781610dce565b610dce82846113d1565b6001600160a01b038516600090815260056020526040902054909150811480610df5575082155b15610e005750505050565b6001600160a01b038416600090815260056020526040812054610e249083906113d1565b9050610e61610e4285610871600954856113e490919063ffffffff16565b6001600160a01b03871660009081526008602052604090205490611817565b6001600160a01b03909516600090815260086020908152604080832097909755600590529490942055505050565b6000546001600160a01b03163314610ee95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60038181548110610f4357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811660009081526004602052604081205460ff16610f85575060006110f7565b6001600160a01b038381166000908152600a6020908152604080832060025494871680855260089093528184205491516370a0823160e01b81523060048201529094939192906370a0823190602401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110159190611c68565b6001549091506000906001600160a01b038881169116146110365781611040565b61104082856113d1565b6001600160a01b038816600090815260056020526040902054909150811480159061106a57508315155b156110bc576001600160a01b0387166000908152600560205260408120546110939083906113d1565b90506110b86110b186610871600954856113e490919063ffffffff16565b8590611817565b9350505b6001600160a01b038716600090815260018601602052604090205460095486546110ef92916108779161087190886113e4565b955050505050505b92915050565b61110733826115e3565b50565b6000546001600160a01b031633146111645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b600654604080516001600160a01b03808516825290921660208301527f649c5e3d0ed183894196148e193af316452b0037e77d2ff0fef23b7dc722bed0910160405180910390a1600680546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600a60205260408120805482825560035491929091905b8181101561123e5760006003828154811061120757611207611bf6565b60009182526020808320909101546001600160a01b031682526001870190526040812055508061123681611c22565b9150506111ea565b5060025461124c90836113d1565b600255600154611266906001600160a01b03163384611535565b60405182815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a2505050565b6000546001600160a01b031633146112fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b6001600160a01b0381166113765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610474565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006113dd8284611c3b565b9392505050565b60006113dd8284611c81565b60006113dd8284611ca0565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190611c68565b6001549091506000906001600160a01b038681169116146114885781611496565b6002546114969083906113d1565b9050808311156114ef576001600160a01b0385166000908152600560205260409020546114c390826113d1565b6001600160a01b0386166000818152600560205260409020919091556114ea908583611535565b610cc6565b6001600160a01b03851660009081526005602052604090205461151290846113d1565b6001600160a01b038616600081815260056020526040902091909155610cc69085855b6040516001600160a01b0383166024820152604481018290526115de9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611823565b505050565b6001600160a01b0382166000908152600a6020526040812060075490919061161490612710906108719086906113e4565b9050600061162284836113d1565b835490915060006116338284611817565b80865560035490915060005b818110156117815760006003828154811061165c5761165c611bf6565b6000918252602090912001546001600160a01b0316905061167c81610ccd565b6001600160a01b038116600090815260018901602090815260408083205460095460089093529220546116b591906108719088906113e4565b6001600160a01b038316600090815260018b016020526040902055851561176c576009546001600160a01b038316600090815260086020526040812054909161170991849161087791610871908c906113e4565b9050801561176a5761171c838d836113fc565b826001600160a01b03168c6001600160a01b03167f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e518360405161176191815260200190565b60405180910390a35b505b5050808061177990611c22565b91505061163f565b5060025461178f9085611817565b6002556006546001546117b1916001600160a01b039182169133911688611908565b6001546117c9906001600160a01b0316333087611908565b60408051858152602081018790526001600160a01b038a16917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25050505050505050565b60006113dd8284611cc2565b6000611878826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661195f9092919063ffffffff16565b8051909150156115de57808060200190518101906118969190611cda565b6115de5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610474565b6040516001600160a01b03808516602483015283166044820152606481018290526119599085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161157a565b50505050565b606061196e8484600085611976565b949350505050565b6060824710156119ee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610474565b6001600160a01b0385163b611a455760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610474565b600080866001600160a01b03168587604051611a619190611d28565b60006040518083038185875af1925050503d8060008114611a9e576040519150601f19603f3d011682016040523d82523d6000602084013e611aa3565b606091505b5091509150611ab3828286611abe565b979650505050505050565b60608315611acd5750816113dd565b825115611add5782518084602001fd5b8160405162461bcd60e51b81526004016104749190611d44565b6001600160a01b038116811461110757600080fd5b600060208284031215611b1e57600080fd5b81356113dd81611af7565b600060208284031215611b3b57600080fd5b5035919050565b60008060408385031215611b5557600080fd5b8235611b6081611af7565b946020939093013593505050565b600080600080600060a08688031215611b8657600080fd5b8535945060208601359350604086013560ff81168114611ba557600080fd5b94979396509394606081013594506080013592915050565b60008060408385031215611bd057600080fd5b8235611bdb81611af7565b91506020830135611beb81611af7565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c3457611c34611c0c565b5060010190565b600082821015611c4d57611c4d611c0c565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215611c7a57600080fd5b5051919050565b6000816000190483118215151615611c9b57611c9b611c0c565b500290565b600082611cbd57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611cd557611cd5611c0c565b500190565b600060208284031215611cec57600080fd5b815180151581146113dd57600080fd5b60005b83811015611d17578181015183820152602001611cff565b838111156119595750506000910152565b60008251611d3a818460208701611cfc565b9190910192915050565b6020815260008251806020840152611d63816040850160208701611cfc565b601f01601f1916919091016040019291505056fea2646970667358221220c34984a9850bac83c60a68a382be5540af9d010c01747b9bf85fd138b8dc071864736f6c634300080d0033",
  "devdoc": {
    "author": "Yield Yak",
    "kind": "dev",
    "methods": {
      "addRewardToken(address)": {
        "params": {
          "_rewardToken": "The address of the reward token"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "The amount of depositToken to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "params": {
          "account": "Account to deposit for",
          "amount": "The amount of depositToken to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount of depositToken to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getUserInfo(address,address)": {
        "params": {
          "_rewardToken": "The address of the reward token",
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The amount of depositToken user has deposited",
          "_1": "The reward debt for the chosen token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingReward(address,address)": {
        "params": {
          "_token": "The address of the token",
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "`_user`'s pending reward token"
        }
      },
      "removeRewardToken(address)": {
        "params": {
          "_rewardToken": "The address of the reward token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardTokensLength()": {
        "returns": {
          "_0": "The length of the array"
        }
      },
      "setDepositFeePercent(uint256)": {
        "params": {
          "_depositFeePercent": "The new deposit fee percent"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFeeCollector(address)": {
        "details": "Restricted to existing fee collector",
        "params": {
          "_newFeeCollector": "The address of the new fee collector"
        }
      },
      "updateReward(address)": {
        "details": "Needs to be called before any deposit or withdrawal",
        "params": {
          "_token": "The address of the reward token"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount to withdraw"
        }
      }
    },
    "stateVariables": {
      "DEPOSIT_FEE_PERCENT_PRECISION": {
        "details": "The precision of `depositFeePercent`"
      },
      "internalBalance": {
        "details": "Internal balance of depositToken, this gets updated on user deposits / withdrawals this allows to reward users with depositToken"
      },
      "userInfo": {
        "details": "Info of each user that stakes"
      }
    },
    "title": "YY Staking",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimReward(address,address,uint256)": {
        "notice": "Emitted when a user claims reward"
      },
      "Deposit(address,uint256,uint256)": {
        "notice": "Emitted when a user deposits"
      },
      "DepositFeeChanged(uint256,uint256)": {
        "notice": "Emitted when owner changes the deposit fee percentage"
      },
      "EmergencyWithdraw(address,uint256)": {
        "notice": "Emitted when a user emergency withdraws"
      },
      "FeeCollectorChanged(address,address)": {
        "notice": "Emitted when feeCollector changes the fee collector"
      },
      "RewardTokenAdded(address)": {
        "notice": "Emitted when owner adds a token to the reward tokens list"
      },
      "RewardTokenRemoved(address)": {
        "notice": "Emitted when owner removes a token from the reward tokens list"
      },
      "Withdraw(address,uint256)": {
        "notice": "Emitted when a user withdraws"
      }
    },
    "kind": "user",
    "methods": {
      "ACC_REWARD_PER_SHARE_PRECISION()": {
        "notice": "The precision of `accRewardPerShare`"
      },
      "accRewardPerShare(address)": {
        "notice": "Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`"
      },
      "addRewardToken(address)": {
        "notice": "Add a reward token"
      },
      "deposit(uint256)": {
        "notice": "Deposit for reward token allocation"
      },
      "depositFeePercent()": {
        "notice": "The deposit fee, scaled to `DEPOSIT_FEE_PERCENT_PRECISION`"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositToken()": {
        "notice": "Farm deposit token"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY"
      },
      "getUserInfo(address,address)": {
        "notice": "Get user info"
      },
      "lastRewardBalance(address)": {
        "notice": "Last reward balance of `token`"
      },
      "pendingReward(address,address)": {
        "notice": "View function to see pending reward token on frontend"
      },
      "removeRewardToken(address)": {
        "notice": "Remove a reward token"
      },
      "rewardTokens(uint256)": {
        "notice": "Array of tokens that users can claim"
      },
      "rewardTokensLength()": {
        "notice": "Get the number of reward tokens"
      },
      "setDepositFeePercent(uint256)": {
        "notice": "Set the deposit fee percent"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateReward(address)": {
        "notice": "Update reward variables"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw and harvest the rewards"
      }
    },
    "notice": "YyStaking is a contract that allows ERC20 deposits and receives rewards from token balances which may be transferred in without an additional function call. The contract is based on StableJoeStaking from Trader Joe. Users deposit X and receive a share of what has been sent based on their participation of the total deposits. It is similar to a MasterChef, but we allow for claiming of different reward tokens. Every time `updateReward(token)` is called, We distribute the balance of that tokens as rewards to users that are currently staking inside this contract, and they can claim it using `withdraw(0)`",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8978,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4901,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "depositToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)6175"
      },
      {
        "astId": 4904,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "internalBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4909,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IERC20)6175)dyn_storage"
      },
      {
        "astId": 4914,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)6175,t_bool)"
      },
      {
        "astId": 4920,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "lastRewardBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_contract(IERC20)6175,t_uint256)"
      },
      {
        "astId": 4922,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "feeCollector",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4925,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "depositFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4937,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "accRewardPerShare",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_contract(IERC20)6175,t_uint256)"
      },
      {
        "astId": 4940,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "ACC_REWARD_PER_SHARE_PRECISION",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4946,
        "contract": "contracts/farms/YyStaking.sol:YyStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(UserInfo)4897_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)6175)dyn_storage": {
        "base": "t_contract(IERC20)6175",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)6175": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)4897_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YyStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4897_storage"
      },
      "t_mapping(t_contract(IERC20)6175,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6175",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)6175,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6175",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserInfo)4897_storage": {
        "encoding": "inplace",
        "label": "struct YyStaking.UserInfo",
        "members": [
          {
            "astId": 4891,
            "contract": "contracts/farms/YyStaking.sol:YyStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4896,
            "contract": "contracts/farms/YyStaking.sol:YyStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_contract(IERC20)6175,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}