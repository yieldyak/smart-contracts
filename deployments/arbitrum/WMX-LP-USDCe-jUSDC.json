{
  "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolDepositor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPairDepositToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct WombexStrategy.WombexStrategySettings",
          "name": "_wombexStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "platformToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "reward",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "swapPair",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "swapFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct VariableRewardsStrategy.RewardSwapPair[]",
              "name": "rewardSwapPairs",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "timelock",
              "type": "address"
            }
          ],
          "internalType": "struct VariableRewardsStrategy.VariableRewardsStrategySettings",
          "name": "_variableRewardsStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV2.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "booster",
      "outputs": [
        {
          "internalType": "contract IBooster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolDepositor",
      "outputs": [
        {
          "internalType": "contract IPoolDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPool",
      "outputs": [
        {
          "internalType": "contract IWombexRewardPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPairDepositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapFeeBips",
          "type": "uint256"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wombatAsset",
      "outputs": [
        {
          "internalType": "contract IWombatAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wombatPool",
      "outputs": [
        {
          "internalType": "contract IWombatPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
    "transactionIndex": 4,
    "gasUsed": "32197647",
    "logsBloom": "0x
    "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d",
    "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000174876e800",
        "logIndex": 37,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 38,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 39,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x0000000000000000000000005190f06eacefa2c552dc6bd5e763b81c73293293000000000000000000000000d1f820edc52b89fd4cc254418e396edba628f0e7",
        "logIndex": 40,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x0000000000000000000000007b5eb3940021ec0e8e463d5dbb4b7b09a89ddf960000000000000000000000000e1e13846e3320b8a471b72080b8cde86cdee3c2",
        "logIndex": 41,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 42,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 109112449,
        "transactionHash": "0x3a502b17fe1f373d727a3c76ad392cf1a05a9382f50f93a97a50beef0042afe5",
        "address": "0x93954ef4d73759d6Ba3578959306bD83238C75Ac",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 44,
        "blockHash": "0x26f4f29b1b3906cde714774e9475991aaf00a889669a3174231cf1138bd0328d"
      }
    ],
    "blockNumber": 109112449,
    "cumulativeGasUsed": "35778544",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "poolDepositor": "0xf177BA008B7CceB38B3b6876f06c6D7D942d0cED",
      "rewardPool": "0xd13CE1E6D08331cc37892B21F29927C379ff7d08",
      "swapPairDepositToken": "0x1c31fb3359357f6436565ccb3e982bc6bf4189ae",
      "swapFee": "30"
    },
    {
      "name": "Yield Yak: Wombex LP-USDC.e (jUSDC Pool)",
      "platformToken": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "rewardSwapPairs": [
        {
          "reward": "0x5190F06EaceFA2C552dc6BD5e763b81C73293293",
          "swapPair": "0xd1f820edc52b89fd4cc254418e396edba628f0e7",
          "swapFee": "30"
        },
        {
          "reward": "0x7B5EB3940021Ec0e8e463D5dBB4B7B09a89DDF96",
          "swapPair": "0x0e1e13846e3320b8a471b72080b8cde86cdee3c2",
          "swapFee": "30"
        }
      ],
      "timelock": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
    },
    {
      "depositToken": "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
      "rewardToken": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
      "minTokensToReinvest": "100000000000",
      "devFeeBips": 700,
      "reinvestRewardBips": 300
    }
  ],
  "solcInputHash": "11c27a38bf5a8020497c68eadc3d055d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPairDepositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"internalType\":\"struct WombexStrategy.WombexStrategySettings\",\"name\":\"_wombexStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"platformToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"internalType\":\"struct VariableRewardsStrategy.RewardSwapPair[]\",\"name\":\"rewardSwapPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"}],\"internalType\":\"struct VariableRewardsStrategy.VariableRewardsStrategySettings\",\"name\":\"_variableRewardsStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV2.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDepositor\",\"outputs\":[{\"internalType\":\"contract IPoolDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"contract IWombexRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPairDepositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFeeBips\",\"type\":\"uint256\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatAsset\",\"outputs\":[{\"internalType\":\"contract IWombatAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatPool\",\"outputs\":[{\"internalType\":\"contract IWombatPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Deprecated; Kept for compatibility\",\"params\":{\"newValue\":\"fee in BIPS; required to be 0\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens available to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/arbitrum/wombex/WombexStrategy.sol\":\"WombexStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from] - value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        require(value > 0, \\\"_mint::zero shares\\\");\\n        totalSupply = totalSupply + value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x893040cb129e3428494993115424a9e7549ae5935e80b3c406ee672d7199aa70\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeERC20 for IERC20;\\n\\n    struct StrategySettings {\\n        address depositToken;\\n        address rewardToken;\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public immutable depositToken;\\n    IERC20 public immutable rewardToken;\\n    address public devAddr;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    uint256 public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public ADMIN_FEE_BIPS;\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateAdminFee(uint256 oldValue, uint256 newValue);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        depositToken = IERC20(_strategySettings.depositToken);\\n        rewardToken = IERC20(_strategySettings.rewardToken);\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return (unclaimedRewards * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens available to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        if (totalSupply == 0 || totalDeposits() == 0) {\\n            return amount;\\n        }\\n        return (amount * totalSupply) / totalDeposits();\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        if (totalSupply == 0 || totalDeposits() == 0) {\\n            return 0;\\n        }\\n        return (amount * totalDeposits()) / totalSupply;\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Deprecated; Kept for compatibility\\n     * @param newValue fee in BIPS; required to be 0\\n     */\\n    function updateAdminFee(uint256 newValue) public onlyOwner {\\n        require(newValue == 0);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyOwner {\\n        require(newValue + REINVEST_REWARD_BIPS <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyOwner {\\n        require(newValue + DEV_FEE_BIPS <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x12d445990b8f4abf1619c36afec7a247f33e5a1ed708125d2769a26b4da7bc6f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9934224020ce9192433dcbefcc56ee1500985de4e9611ef42e00498fa0a99dd0\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7770575951dbb745d5ba319363b64dd1165d9a6380e685f1e8aff5cf1ca2c608\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    uint256 public constant DEFAULT_SWAP_FEE = 30;\\n    uint public constant BIPS_DIVISOR = 10000;\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        return DexLibrary.swap(amountIn, fromToken, toToken, pair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair,\\n        uint256 swapFee\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        return DexLibrary.estimateConversionThroughPair(amountIn, fromToken, toToken, swapPair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair,\\n        uint256 swapFee\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        return\\n            DexLibrary.convertRewardTokensToDepositTokens(\\n                amount,\\n                rewardToken,\\n                depositToken,\\n                swapPairToken0,\\n                DEFAULT_SWAP_FEE,\\n                swapPairToken1,\\n                DEFAULT_SWAP_FEE\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        uint256 swapFeeToken0,\\n        IPair swapPairToken1,\\n        uint256 swapFeeToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount / 2;\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0, swapFeeToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1, swapFeeToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return (amountIn * reserve1) / reserve0;\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * (BIPS_DIVISOR - swapFee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * BIPS_DIVISOR + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x00c364da9793e60b6f55fa73a532b8659d5892e0c817c710f1ea60ea6ff53093\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    uint256 public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors + 1;\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors - 1;\\n        emit RemoveDepositor(depositor);\\n    }\\n}\\n\",\"keccak256\":\"0x32e276794130901e0464470794d697dfa8dcec1d2d1377a7422303dff8753aa5\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice VariableRewardsStrategy\\n */\\nabstract contract VariableRewardsStrategy is YakStrategyV2 {\\n    using SafeERC20 for IERC20;\\n\\n    IWAVAX internal immutable WAVAX;\\n\\n    struct VariableRewardsStrategySettings {\\n        string name;\\n        address platformToken;\\n        RewardSwapPair[] rewardSwapPairs;\\n        address timelock;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct RewardSwapPair {\\n        address reward;\\n        address swapPair;\\n        uint256 swapFee;\\n    }\\n\\n    // reward -> swapPair\\n    mapping(address => RewardSwapPair) public rewardSwapPairs;\\n    address[] public supportedRewards;\\n    uint256 public rewardCount;\\n\\n    event AddReward(address rewardToken, address swapPair);\\n    event RemoveReward(address rewardToken);\\n\\n    constructor(VariableRewardsStrategySettings memory _settings, StrategySettings memory _strategySettings)\\n        YakStrategyV2(_strategySettings)\\n    {\\n        name = _settings.name;\\n        WAVAX = IWAVAX(_settings.platformToken);\\n        devAddr = 0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44;\\n\\n        for (uint256 i = 0; i < _settings.rewardSwapPairs.length; i++) {\\n            _addReward(\\n                _settings.rewardSwapPairs[i].reward,\\n                _settings.rewardSwapPairs[i].swapPair,\\n                _settings.rewardSwapPairs[i].swapFee\\n            );\\n        }\\n\\n        updateDepositsEnabled(true);\\n        transferOwnership(_settings.timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, DexLibrary.DEFAULT_SWAP_FEE);\\n    }\\n\\n    function addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, _swapFee);\\n    }\\n\\n    function _addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(IPair(_swapPair), _rewardToken, address(rewardToken)),\\n                \\\"VariableRewardsStrategy::Swap pair does not contain reward token\\\"\\n            );\\n        }\\n        rewardSwapPairs[_rewardToken] = RewardSwapPair({reward: _rewardToken, swapPair: _swapPair, swapFee: _swapFee});\\n        supportedRewards.push(_rewardToken);\\n        rewardCount = rewardCount + 1;\\n        emit AddReward(_rewardToken, _swapPair);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        delete rewardSwapPairs[_rewardToken];\\n        bool found = false;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"VariableRewardsStrategy::Reward to delete not found!\\\");\\n        supportedRewards.pop();\\n        rewardCount = rewardCount - 1;\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"VariableRewardsStrategy::Deposits disabled\\\");\\n        uint256 maxPendingRewards = MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n        if (maxPendingRewards > 0) {\\n            uint256 estimatedTotalReward = checkReward();\\n            if (estimatedTotalReward > maxPendingRewards) {\\n                _reinvest(true);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"VariableRewardsStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount - depositFee));\\n        _stakeDepositTokens(_amount, depositFee);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return (_amount * depositFeeBips) / _bip();\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"VariableRewardsStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount - withdrawFee);\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return (_amount * withdrawFeeBips) / _bip();\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertPoolRewardsToRewardToken() private returns (uint256) {\\n        uint256 rewardTokenAmount = rewardToken.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WAVAX)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WAVAX.deposit{value: balance}();\\n                }\\n                if (address(rewardToken) == address(WAVAX)) {\\n                    rewardTokenAmount += balance;\\n                    continue;\\n                }\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0) {\\n                address swapPair = rewardSwapPairs[reward].swapPair;\\n                if (swapPair > address(0)) {\\n                    rewardTokenAmount += DexLibrary.swap(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return rewardTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from the staking contract\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        _getRewards();\\n        uint256 amount = _convertPoolRewardsToRewardToken();\\n        if (!userDeposit) {\\n            require(amount >= MIN_TOKENS_TO_REINVEST, \\\"VariableRewardsStrategy::Reinvest amount too low\\\");\\n        }\\n\\n        uint256 devFee = (amount * DEV_FEE_BIPS) / BIPS_DIVISOR;\\n        if (devFee > 0) {\\n            rewardToken.safeTransfer(devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = (amount * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        if (reinvestFee > 0) {\\n            rewardToken.safeTransfer(msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount - devFee - reinvestFee);\\n\\n        uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n        _stakeDepositTokens(depositTokenAmount, depositFee);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount, uint256 _depositFee) private {\\n        require(_amount > 0, \\\"VariableRewardsStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount, _depositFee);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        if (address(rewardToken) == address(WAVAX)) {\\n            estimatedTotalReward += address(this).balance;\\n        }\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(rewardToken)) {\\n                estimatedTotalReward += rewards[i].amount;\\n            } else if (reward > address(0)) {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance + rewards[i].amount;\\n                address swapPair = rewardSwapPairs[rewards[i].reward].swapPair;\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward += DexLibrary.estimateConversionThroughPair(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[rewards[i].reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFee = _calculateWithdrawFee(depositBalance);\\n        return depositBalance - withdrawFee;\\n    }\\n\\n    function rescueDeployedFunds(\\n        uint256 _minReturnAmountAccepted,\\n        bool /*_disableDeposits*/\\n    ) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= _minReturnAmountAccepted,\\n            \\\"VariableRewardsStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0x07fa36222338499532a94010f028e57ab701765fda96743d2ca8fe59f8d240ee\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategyForSAV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./VariableRewardsStrategy.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for VariableRewardsStrategy with SA deposit.\\n */\\nabstract contract VariableRewardsStrategyForSAV2 is VariableRewardsStrategy {\\n    address public immutable swapPairDepositToken;\\n    uint256 public swapFeeBips;\\n\\n    constructor(\\n        address _swapPairDepositToken,\\n        uint256 _swapFeeBips,\\n        VariableRewardsStrategySettings memory _settings,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategy(_settings, _strategySettings) {\\n        swapPairDepositToken = _swapPairDepositToken;\\n        assignSwapPairSafely(_swapPairDepositToken);\\n        swapFeeBips = _swapFeeBips;\\n    }\\n\\n    function updateSwapFee(uint256 _swapFeeBips) external onlyDev {\\n        swapFeeBips = _swapFeeBips;\\n    }\\n\\n    function assignSwapPairSafely(address _swapPairDepositToken) internal virtual {\\n        if (address(rewardToken) != address(depositToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(\\n                    IPair(_swapPairDepositToken), address(depositToken), address(rewardToken)\\n                ),\\n                \\\"VariableRewardsStrategyForSA::swapPairDepositToken does not match deposit and reward token\\\"\\n            );\\n        }\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount)\\n        internal\\n        virtual\\n        override\\n        returns (uint256 toAmount)\\n    {\\n        if (address(rewardToken) == address(depositToken)) {\\n            return fromAmount;\\n        }\\n        return DexLibrary.swap(\\n            fromAmount, address(rewardToken), address(depositToken), IPair(swapPairDepositToken), swapFeeBips\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4d1b3962bcf9cc6573676ab3881a07d3532f93913c39ddf1538eeca1a26dbe24\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/wombex/WombexStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../VariableRewardsStrategyForSAV2.sol\\\";\\nimport \\\"./interfaces/IPoolDepositor.sol\\\";\\nimport \\\"./interfaces/IWombexRewardPool.sol\\\";\\nimport \\\"./interfaces/IWombatAsset.sol\\\";\\nimport \\\"./interfaces/IWombatPool.sol\\\";\\nimport \\\"./interfaces/IBooster.sol\\\";\\nimport \\\"./interfaces/ITokenMinter.sol\\\";\\n\\ncontract WombexStrategy is VariableRewardsStrategyForSAV2 {\\n    using SafeERC20 for IERC20;\\n\\n    address private constant WOM = 0x7B5EB3940021Ec0e8e463D5dBB4B7B09a89DDF96;\\n    address private constant WMX = 0x5190F06EaceFA2C552dc6BD5e763b81C73293293;\\n\\n    struct WombexStrategySettings {\\n        address poolDepositor;\\n        address rewardPool;\\n        address swapPairDepositToken;\\n        uint256 swapFee;\\n    }\\n\\n    IPoolDepositor public immutable poolDepositor;\\n    IWombexRewardPool public immutable rewardPool;\\n    IWombatAsset public immutable wombatAsset;\\n    IWombatPool public immutable wombatPool;\\n    IBooster public immutable booster;\\n    uint256 public immutable pid;\\n\\n    constructor(\\n        WombexStrategySettings memory _wombexStrategySettings,\\n        VariableRewardsStrategySettings memory _variableRewardsStrategySettings,\\n        StrategySettings memory _strategySettings\\n    )\\n        VariableRewardsStrategyForSAV2(\\n            _wombexStrategySettings.swapPairDepositToken,\\n            _wombexStrategySettings.swapFee,\\n            _variableRewardsStrategySettings,\\n            _strategySettings\\n        )\\n    {\\n        poolDepositor = IPoolDepositor(_wombexStrategySettings.poolDepositor);\\n        rewardPool = IWombexRewardPool(_wombexStrategySettings.rewardPool);\\n        wombatAsset = IWombatAsset(rewardPool.asset());\\n        wombatPool = IWombatPool(wombatAsset.pool());\\n        booster = IBooster(poolDepositor.booster());\\n        pid = poolDepositor.lpTokenToPid(rewardPool.asset());\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount, uint256) internal override {\\n        depositToken.approve(address(poolDepositor), _amount);\\n        poolDepositor.deposit(address(wombatAsset), _amount, 0, true);\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 _withdrawAmount) {\\n        uint256 lpBalance = rewardPool.balanceOf(address(this));\\n        uint256 liquidity = (_amount * lpBalance) / totalDeposits();\\n        liquidity = liquidity > lpBalance ? lpBalance : liquidity;\\n        rewardPool.withdrawAndUnwrap(liquidity, false);\\n        (uint256 expectedAmount,) = wombatPool.quotePotentialWithdraw(address(depositToken), liquidity);\\n        IERC20(address(wombatAsset)).approve(address(wombatPool), liquidity);\\n        _withdrawAmount =\\n            wombatPool.withdraw(address(depositToken), liquidity, expectedAmount, address(this), type(uint256).max);\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        depositToken.approve(address(poolDepositor), 0);\\n        rewardPool.withdrawAllAndUnwrap(false);\\n        uint256 assetBalance = IERC20(address(wombatAsset)).balanceOf(address(this));\\n        IERC20(address(wombatAsset)).approve(address(wombatPool), assetBalance);\\n        wombatPool.withdraw(address(depositToken), assetBalance, 0, address(this), type(uint256).max);\\n    }\\n\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        (address[] memory tokens, uint256[] memory amounts) = rewardPool.claimableRewards(address(this));\\n        Reward[] memory pendingRewards = new Reward[](tokens.length + 1);\\n        uint256 womAmount;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            pendingRewards[i] = Reward({reward: tokens[i], amount: amounts[i]});\\n            if (tokens[i] == WOM) {\\n                womAmount = amounts[i];\\n            }\\n        }\\n        if (womAmount > 0) {\\n            uint256 poolMintRatio = booster.customMintRatio(pid);\\n            if (poolMintRatio == 0) {\\n                poolMintRatio = booster.mintRatio();\\n            }\\n            if (poolMintRatio > 0) {\\n                uint256 wmxAmount = (womAmount * poolMintRatio) / BIPS_DIVISOR;\\n                address reservoirMinter = booster.reservoirMinter();\\n                ITokenMinter tokenMinter =\\n                    reservoirMinter == address(0) ? ITokenMinter(booster.cvx()) : ITokenMinter(reservoirMinter);\\n                pendingRewards[tokens.length] = Reward({reward: WMX, amount: tokenMinter.getFactAmounMint(wmxAmount)});\\n            }\\n        }\\n        return pendingRewards;\\n    }\\n\\n    function _getRewards() internal override {\\n        rewardPool.getReward();\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        uint256 liquidity = rewardPool.balanceOf(address(this));\\n        uint256 deposits = (wombatAsset.liability() * liquidity) / wombatAsset.totalSupply();\\n        return fromWad(deposits, depositToken.decimals());\\n    }\\n\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * 10 ** (d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0x43fc382bfcfae41915222f4be6eecf443d178889dd2147056a7d4483ef6b920f\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/wombex/interfaces/IBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        bool shutdown;\\n    }\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function customMintRatio(uint256 _pid) external view returns (uint256);\\n\\n    function mintRatio() external view returns (uint256);\\n\\n    function penaltyShare() external view returns (uint256);\\n\\n    function reservoirMinter() external view returns (address);\\n\\n    function cvx() external view returns (address);\\n}\\n\",\"keccak256\":\"0x89938484fa7c8bce19cba964637b2bbb00cad583a9107b2edadeef5a654dd289\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/wombex/interfaces/IPoolDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPoolDepositor {\\n    function deposit(address _lptoken, uint256 _amount, uint256 _minLiquidity, bool _stake) external;\\n    function withdraw(address _lptoken, uint256 _amount, uint256 _minOut, address _recipient) external;\\n    function getWithdrawAmountOut(address _lptoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount, uint256 fee);\\n    function getDepositAmountOut(address _lptoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 liquidity, uint256 reward);\\n    function booster() external view returns (address);\\n    function lpTokenToPid(address wombatAsset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6a61fc5e630a504c2c7b944aa8a409e2157802dbe3ea93d78e988d0215426cd\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/wombex/interfaces/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ITokenMinter {\\n    function getFactAmounMint(uint256 _amount) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x4608883277a53eb7c0f94ed83135fbb596f6eaf444a1ef378f4ca7a92b5b2892\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/wombex/interfaces/IWombatAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWombatAsset {\\n    function pool() external view returns (address);\\n    function liability() external view returns (uint120);\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb3ab6b44b0b9f4861a92d84b4d0536c40a13878f64744f14b2336d52207d22c\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/wombex/interfaces/IWombatPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWombatPool {\\n    function deposit(address to, uint256 amount, address token, uint256 deadline) external returns (uint256);\\n\\n    function withdraw(address token, uint256 liquidity, uint256 minimumAmount, address to, uint256 deadline)\\n        external\\n        returns (uint256);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xc543810dee1a73d5bff4192ed06a36982f383b192eab8b663569d2c9391405eb\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/wombex/interfaces/IWombexRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWombexRewardPool {\\n    function claimableRewards(address _account)\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n    function balanceOf(address account) external view returns (uint256);\\n    function getReward() external returns (bool);\\n    function asset() external view returns (address);\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n    function withdrawAllAndUnwrap(bool claim) external;\\n}\\n\",\"keccak256\":\"0xf1c569fa8ea7167a555e14a54c1111d67dc66a3006e498725496c14ab1a08ead\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61020060405260096101c0819052685969656c642059616b60b81b6101e09081526200002f916000919062000d44565b506040805180820190915260038082526216549560ea1b60209092019182526200005c9160019162000d44565b503480156200006a57600080fd5b5060405162006b5d38038062006b5d8339810160408190526200008d9162000fee565b604083015160608401518383818180600033600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062006b3d833981519152908290a35080516001600160a01b0390811660805260208201511660a052604081015162000105906200050f565b606081015162000115906200059f565b608081015162000125906200064a565b50815180516200013e9160009160209091019062000d44565b5060208201516001600160a01b031660c052600980546001600160a01b03191673dcedf06fd33e1d7b6eb4b309f779a0e9d3172e4417905560005b8260400151518110156200021b576200020683604001518281518110620001a457620001a46200119d565b60200260200101516000015184604001518381518110620001c957620001c96200119d565b60200260200101516020015185604001518481518110620001ee57620001ee6200119d565b602002602001015160400151620006f560201b60201c565b806200021281620011c9565b91505062000179565b50620002286001620008a1565b606082015162000238906200094b565b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a150506001600160a01b03841660e0526200028b8462000a48565b50506013555082516001600160a01b0390811661010052602080850151909116610120819052604080516338d52e0f60e01b8152905191926338d52e0f926004808401938290030181865afa158015620002e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030f9190620011e5565b6001600160a01b0316610140819052604080516316f0115b60e01b815290516316f0115b916004808201926020929091908290030181865afa1580156200035a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003809190620011e5565b6001600160a01b0316610160816001600160a01b031681525050610100516001600160a01b031663c6def0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004029190620011e5565b6001600160a01b0316610180816001600160a01b031681525050610100516001600160a01b0316630ff0bc3b610120516001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000470573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004969190620011e5565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620004db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200050191906200120a565b6101a052506200127b915050565b6006546001600160a01b031633146200055e5760405162461bcd60e51b8152602060048201819052602482015260008051602062006b1d83398151915260448201526064015b60405180910390fd5b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b03163314620005ea5760405162461bcd60e51b8152602060048201819052602482015260008051602062006b1d833981519152604482015260640162000555565b612710600e5482620005fd919062001224565b11156200060957600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6006546001600160a01b03163314620006955760405162461bcd60e51b8152602060048201819052602482015260008051602062006b1d833981519152604482015260640162000555565b612710600f5482620006a8919062001224565b1115620006b457600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b60a0516001600160a01b0316836001600160a01b031614620007a1576200072b828460a05162000b1f60201b620027db1760201c565b620007a1576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e606482015260840162000555565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6890930180549092169092179055601254620008569162001224565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6006546001600160a01b03163314620008ec5760405162461bcd60e51b8152602060048201819052602482015260008051602062006b1d833981519152604482015260640162000555565b600c5481151560ff9091161515036200090457600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a150565b6006546001600160a01b03163314620009965760405162461bcd60e51b8152602060048201819052602482015260008051602062006b1d833981519152604482015260640162000555565b6001600160a01b038116620009fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000555565b6006546040516001600160a01b0380841692169060008051602062006b3d83398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6080516001600160a01b031660a0516001600160a01b03161462000b1c5762000a828160805160a05162000b1f60201b620027db1760201c565b62000b1c5760405162461bcd60e51b815260206004820152605a60248201527f5661726961626c65526577617264735374726174656779466f7253413a3a737760448201527f6170506169724465706f736974546f6b656e20646f6573206e6f74206d61746360648201527f68206465706f73697420616e642072657761726420746f6b656e000000000000608482015260a40162000555565b50565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b60573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b869190620011e5565b6001600160a01b0316836001600160a01b0316148062000c1b5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000be0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c069190620011e5565b6001600160a01b0316836001600160a01b0316145b801562000d1d5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c62573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c889190620011e5565b6001600160a01b0316826001600160a01b0316148062000d1d5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ce2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d089190620011e5565b6001600160a01b0316826001600160a01b0316145b801562000d3c5750816001600160a01b0316836001600160a01b031614155b949350505050565b82805462000d52906200123f565b90600052602060002090601f01602090048101928262000d76576000855562000dc1565b82601f1062000d9157805160ff191683800117855562000dc1565b8280016001018555821562000dc1579182015b8281111562000dc157825182559160200191906001019062000da4565b5062000dcf92915062000dd3565b5090565b5b8082111562000dcf576000815560010162000dd4565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000e255762000e2562000dea565b60405290565b604051608081016001600160401b038111828210171562000e255762000e2562000dea565b604051601f8201601f191681016001600160401b038111828210171562000e7b5762000e7b62000dea565b604052919050565b80516001600160a01b038116811462000e9b57600080fd5b919050565b600082601f83011262000eb257600080fd5b815160206001600160401b0382111562000ed05762000ed062000dea565b62000ee0818360051b0162000e50565b8281526060928302850182019282820191908785111562000f0057600080fd5b8387015b8581101562000f5e5781818a03121562000f1e5760008081fd5b62000f2862000e00565b62000f338262000e83565b815262000f4286830162000e83565b8187015260408281015190820152845292840192810162000f04565b5090979650505050505050565b600060a0828403121562000f7e57600080fd5b60405160a081016001600160401b038111828210171562000fa35762000fa362000dea565b60405290508062000fb48362000e83565b815262000fc46020840162000e83565b60208201526040830151604082015260608301516060820152608083015160808201525092915050565b60008060008385036101408112156200100657600080fd5b60808112156200101557600080fd5b506200102062000e2b565b6200102b8562000e83565b815260206200103c81870162000e83565b818301526200104e6040870162000e83565b60408301526060868101519083015260808601519194506001600160401b03808311156200107b57600080fd5b91860191608083890312156200109057600080fd5b6200109a62000e2b565b835182811115620010aa57600080fd5b8401601f81018a13620010bc57600080fd5b805183811115620010d157620010d162000dea565b620010e5601f8201601f1916860162000e50565b8181528b86838501011115620010fa57600080fd5b60005b828110156200111a578381018701518282018801528601620010fd565b828111156200112c5760008784840101525b508352506200113f905084840162000e83565b8382015260408401519250818311156200115857600080fd5b620011668984860162000ea0565b6040820152620011796060850162000e83565b606082015280955050505050620011948560a0860162000f6b565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620011de57620011de620011b3565b5060010190565b600060208284031215620011f857600080fd5b620012038262000e83565b9392505050565b6000602082840312156200121d57600080fd5b5051919050565b600082198211156200123a576200123a620011b3565b500190565b600181811c908216806200125457607f821691505b6020821081036200127557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516156a56200147860003960008181610a560152613b0201526000818161092f01528181613b2b01528181613baa01528181613c520152613ced01526000818161047c01528181612df801528181612e7b01528181612f7801528181613759015261385601526000818161070401528181611325015281816113a801528181612ead015281816136ce0152818161378b0152614a4201526000818161069a015281816112b401528181612c5e01528181612d33015281816136530152818161390101526145090152600081816108ed01528181613587015281816149750152614a7f01526000818161052a0152614928015260008181611fe8015281816146590152818161468801526146fd015260008181610a9001528181611f79015281816120120152818161207c015281816121f501528181613334015281816133720152818161413b01528181614196015281816145ad0152818161472701528181614807015281816148af01526148e601526000818161095601528181610d1801528181610e490152818161145501528181611c9701528181611d2c01528181612dc501528181612f34015281816131e3015281816135b601528181613812015281816148850152818161490701526149a401526156a56000f3fe608060405234801561001057600080fd5b50600436106104725760003560e01c80638aff733d11610250578063bf16f65a11610150578063dd8ce4d6116100c8578063ed24911d11610097578063f2fde38b1161007c578063f2fde38b14610a78578063f7c618c114610a8b578063fdb5a03e14610ab257600080fd5b8063ed24911d14610a49578063f106845414610a5157600080fd5b8063dd8ce4d6146109fd578063e21ac82514610a10578063e75ab04514610a23578063eab89a5a14610a3657600080fd5b8063cff1b6ef1161011f578063d505accf11610104578063d505accf1461099e578063da09c72c146109b1578063dd62ed3e146109c457600080fd5b8063cff1b6ef14610978578063d0ed26ae1461098b57600080fd5b8063bf16f65a1461090f578063c4b24a4614610922578063c6def0761461092a578063c89039c51461095157600080fd5b8063a5534e71116101e3578063b52a321f116101b2578063b9e57b8011610197578063b9e57b80146108d7578063bd079f55146108df578063bd25c6db146108e857600080fd5b8063b52a321f146108b7578063b6b55f25146108c457600080fd5b8063a5534e711461081c578063a8ae2b7c1461087e578063a9059cbb14610891578063ac0d31ff146108a457600080fd5b806395d89b411161021f57806395d89b41146107c757806399729ec1146107cf5780639e4e7318146107e2578063a4d5e67c1461080957600080fd5b80638aff733d146107875780638b73e606146107905780638da5cb5b146107a35780639291d563146107b457600080fd5b8063483c2ef011610376578063715018a6116102ee5780637ae26773116102bd5780637ecebe00116102a25780637ecebe001461074157806381837230146107615780638980f11f1461077457600080fd5b80637ae26773146107265780637d8820971461073957600080fd5b8063715018a6146106e5578063789139bc146106ed57806379085425146106f6578063799b0714146106ff57600080fd5b80634ebb7916116103455780635ea682ea1161032a5780635ea682ea1461068c57806366666aa91461069557806370a08231146106bc57600080fd5b80634ebb7916146106705780635b0908861461068357600080fd5b8063483c2ef0146106145780634a970be7146106375780634bebd1e71461064a5780634e77ace51461065d57600080fd5b806320606b70116104095780632f4f21e2116103d8578063313ce567116103bd578063313ce567146105de5780633bdc6e72146105f857806340b47e1a1461060157600080fd5b80632f4f21e2146105a457806330adf81f146105b757600080fd5b806320606b701461055557806323b872dd1461057c578063247d284b146105125780632e1a7d4d1461058f57600080fd5b80630f23475d116104455780630f23475d1461050a57806311056035146105125780631480ce1f1461052557806318160ddd1461054c57600080fd5b8063012ee9281461047757806306fdde03146104bb57806307677111146104d0578063095ea7b3146104e7575b600080fd5b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6104c3610aba565b6040516104b29190614e55565b6104d9600d5481565b6040519081526020016104b2565b6104fa6104f5366004614e7d565b610b48565b60405190151581526020016104b2565b6104d9610b5f565b6104d9610520366004614ea9565b610b8a565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d960025481565b6104d97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104fa61058a366004614ec2565b610b95565b6105a261059d366004614ea9565b610c5e565b005b6105a26105b2366004614e7d565b610d85565b6104d97f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6105e6601281565b60405160ff90911681526020016104b2565b6104d960075481565b6105a261060f366004614f03565b610d93565b6104fa610622366004614f3c565b60086020526000908152604090205460ff1681565b6105a2610645366004614f68565b610df0565b6105a2610658366004614f3c565b610ebe565b6105a261066b366004614fbf565b610fdb565b6105a261067e366004614ea9565b611082565b6104d960135481565b6104d9600f5481565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d96106ca366004614f3c565b6001600160a01b031660009081526004602052604090205490565b6105a261113c565b6104d9600b5481565b6104d960125481565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a2610734366004614f03565b6111ce565b6104d9611292565b6104d961074f366004614f3c565b60056020526000908152604090205481565b6105a261076f366004614ea9565b6114da565b6105a2610782366004614e7d565b611563565b6104d9600e5481565b6105a261079e366004614f3c565b611613565b6006546001600160a01b031661049e565b6105a26107c2366004614f3c565b6117cf565b6104c3611889565b6105a26107dd366004614ea9565b611896565b6104d97fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6105a2610817366004614f3c565b61193b565b61085861082a366004614f3c565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016104b2565b6105a261088c366004614ea9565b611b85565b6104fa61089f366004614e7d565b611c2a565b6105a26108b2366004614fdc565b611c37565b600c546104fa9060ff1681565b6105a26108d2366004614ea9565b611ea9565b6104d9611eb6565b6104d9600a5481565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a261091d366004614ea9565b611ef5565b6104d9611f4b565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a2610986366004614ea9565b61228b565b6105a2610999366004614ec2565b61231f565b6105a26109ac366004615001565b612380565b60095461049e906001600160a01b031681565b6104d96109d2366004614f03565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6104d9610a0b366004614ea9565b612493565b6105a2610a1e366004614ea9565b6124d3565b61049e610a31366004614ea9565b61255c565b6104d9610a44366004614ea9565b612586565b6104d96125c0565b6104d97f000000000000000000000000000000000000000000000000000000000000000081565b6105a2610a86366004614f3c565b612660565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a2612780565b60008054610ac790615072565b80601f0160208091040260200160405190810160405280929190818152602001828054610af390615072565b8015610b405780601f10610b1557610100808354040283529160200191610b40565b820191906000526020600020905b815481529060010190602001808311610b2357829003601f168201915b505050505081565b6000610b553384846129f0565b5060015b92915050565b600080610b6a611292565b90506000610b7782612afe565b9050610b8381836150c2565b9250505090565b6000610b5982612afe565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610bcf57506000198114155b15610c45576000610be085836150c2565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610c50868686612b18565b6001925050505b9392505050565b6000610c6982612586565b905060008111610ce65760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610cf182612c3c565b90506000610cfe83612afe565b9050610d3f33610d0e83856150c2565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fee565b610d49338561306e565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610d8f8282613102565b5050565b6009546001600160a01b03163314610de45760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b610d8f8282601e613332565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610e9557600080fd5b505af1158015610ea9573d6000803e3d6000fd5b50505050610eb73386613102565b5050505050565b6006546001600160a01b03163314610f065760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6001600160a01b03811660009081526008602052604090205460ff1615610f6f5760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610cdd565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610fa1916150d9565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b031633146110235760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600c5481151560ff90911615150361103a57600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110ca5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600081116110d757600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611104573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101611077565b6006546001600160a01b031633146111845760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146112165760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611265573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128991906150f1565b610d8f57600080fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156112fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131f919061510e565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a5919061510e565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114289190615127565b6effffffffffffffffffffffffffffff166114439190615158565b61144d9190615177565b9050610b83817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d59190615199565b613508565b6006546001600160a01b031633146115225760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146115ab5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600081116115b857600080fd5b6115cc6001600160a01b0383163383612fee565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b0316331461165b5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6000600754116116d35760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610cdd565b6001600160a01b03811660009081526008602052604090205460ff1615156001146117665760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610cdd565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611795906001906150c2565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146118205760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610ac790615072565b6006546001600160a01b031633146118de5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b612710600e54826118ef91906150d9565b11156118fa57600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6009546001600160a01b0316331461198c5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b601154811015611a9357601181815481106119e4576119e46151b6565b6000918252602090912001546001600160a01b0390811690841603611a81576011805460019350611a169084906150c2565b81548110611a2657611a266151b6565b600091825260209091200154601180546001600160a01b039092169183908110611a5257611a526151b6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80611a8b816151cc565b9150506119c7565b5080611b075760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610cdd565b6011805480611b1857611b186151e5565b600082815260209020810160001990810180546001600160a01b0319169055019055601254611b49906001906150c2565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc90602001611607565b6006546001600160a01b03163314611bcd5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b612710600f5482611bde91906150d9565b1115611be957600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b6000610b55338484612b18565b6006546001600160a01b03163314611c7f5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0a919061510e565b9050611d14613570565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f919061510e565b905083611dac83836150c2565b1015611e465760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610cdd565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611e6f611292565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611ea357611ea36000610fdb565b50505050565b611eb33382613102565b50565b600080611ec1611f4b565b9050600a548110611eed57612710600e5482611edd9190615158565b611ee79190615177565b91505090565b600091505090565b6009546001600160a01b03163314611f465760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b601355565b600080611f566138c3565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe4919061510e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160361204c5761204947826150d9565b90505b60005b825181101561228457600083828151811061206c5761206c6151b6565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036120e3578382815181106120c5576120c56151b6565b602002602001015160200151836120dc91906150d9565b9250612271565b6001600160a01b03811615612271576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d919061510e565b90506000858481518110612173576121736151b6565b6020026020010151602001518261218a91906150d9565b90506000601060008887815181106121a4576121a46151b6565b602090810291909101810151516001600160a01b039081168352908201929092526040016000206001015416905081158015906121e957506001600160a01b03811615155b1561226d5761226082857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c8151811061222b5761222b6151b6565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060020154613e46565b61226a90876150d9565b95505b5050505b508061227c816151cc565b91505061204f565b5092915050565b6006546001600160a01b031633146122d35760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b80156122de57600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146123705760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b61237b838383613332565b505050565b428410156123d05760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610cdd565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661241d836151cc565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905061247e8882868686613f14565b6124898888886129f0565b5050505050505050565b6000600254600014806124ab57506124a9611292565b155b156124b4575090565b6124bc611292565b6002546124c99084615158565b610b599190615177565b6006546001600160a01b0316331461251b5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b6011818154811061256c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006002546000148061259e575061259c611292565b155b156125ab57506000919050565b6002546125b6611292565b6124c99084615158565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516125f591906151fb565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146126a85760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6001600160a01b0381166127245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610cdd565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146127cf5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610cdd565b6127d96000614074565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561281b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283f9190615296565b6001600160a01b0316836001600160a01b031614806128d05750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bb9190615296565b6001600160a01b0316836001600160a01b0316145b80156129ca5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129399190615296565b6001600160a01b0316826001600160a01b031614806129ca5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b59190615296565b6001600160a01b0316826001600160a01b0316145b80156129e85750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b038316612a465760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610cdd565b6001600160a01b038216612a9c5760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610cdd565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080612710612b0e8285615158565b610c579190615177565b6001600160a01b038216612b945760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610cdd565b6001600160a01b038316600090815260046020526040902054612bb89082906150c2565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612be89082906150d9565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612af19085815260200190565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc9919061510e565b90506000612cd5611292565b612cdf8386615158565b612ce99190615177565b9050818111612cf85780612cfa565b815b6040517fc32e720200000000000000000000000000000000000000000000000000000000815260048101829052600060248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c32e720290604401600060405180830381600087803b158015612d7f57600080fd5b505af1158015612d93573d6000803e3d6000fd5b50506040517f907448ed0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600093507f000000000000000000000000000000000000000000000000000000000000000016915063907448ed906044016040805180830381865afa158015612e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6391906152b3565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1c91906150f1565b506040516309a5fca360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490526044820183905230606483015260001960848301527f000000000000000000000000000000000000000000000000000000000000000016906309a5fca39060a4016020604051808303816000875af1158015612fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe5919061510e565b95945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261237b908490614241565b6001600160a01b0382166000908152600460205260409020546130929082906150c2565b6001600160a01b0383166000908152600460205260409020556002546130b99082906150c2565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff16151560011461317f5760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610cdd565b600b5480156131a8576000613192611f4b565b9050818111156131a6576131a66001614074565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015613234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325891906150f1565b6132ca5760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610cdd565b60006132d583612afe565b90506132ed846132e8610a0b84876150c2565b614326565b6132f783826143fc565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610d7791815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461340a5761339682847f00000000000000000000000000000000000000000000000000000000000000006127db565b61340a576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610cdd565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68909301805490921690921790556012546134bd916150d9565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b600060128260ff16101561353d576135218260126152d7565b61352c90600a6153de565b6135369084615177565b9050610b59565b60128260ff161115613569576135546012836152d7565b61355f90600a6153de565b6135369084615158565b5090919050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156135ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362391906150f1565b506040517f49f039a2000000000000000000000000000000000000000000000000000000008152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349f039a290602401600060405180830381600087803b15801561369f57600080fd5b505af11580156136b3573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa15801561371e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613742919061510e565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af11580156137d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fa91906150f1565b506040516309a5fca360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000604483015230606483015260001960848301527f000000000000000000000000000000000000000000000000000000000000000016906309a5fca39060a4016020604051808303816000875af115801561389f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f919061510e565b6040517fdc01f60d00000000000000000000000000000000000000000000000000000000815230600482015260609060009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dc01f60d90602401600060405180830381865afa158015613948573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261397091908101906154c3565b9150915060008251600161398491906150d9565b67ffffffffffffffff81111561399c5761399c6153ed565b6040519080825280602002602001820160405280156139e157816020015b60408051808201909152600080825260208201528152602001906001900390816139ba5790505b5090506000805b8451811015613ad3576040518060400160405280868381518110613a0e57613a0e6151b6565b60200260200101516001600160a01b03168152602001858381518110613a3657613a366151b6565b6020026020010151815250838281518110613a5357613a536151b6565b6020026020010181905250737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf966001600160a01b0316858281518110613a8e57613a8e6151b6565b60200260200101516001600160a01b031603613ac157838181518110613ab657613ab66151b6565b602002602001015191505b80613acb816151cc565b9150506139e8565b508015613e3e576040517f525c42d80000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063525c42d890602401602060405180830381865afa158015613b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9e919061510e565b905080600003613c2d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f9bcc6c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2a919061510e565b90505b8015613e3c576000612710613c428385615158565b613c4c9190615177565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632ada885a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd29190615296565b905060006001600160a01b03821615613ceb5781613d6d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663923c1d616040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6d9190615296565b604080518082018252735190f06eacefa2c552dc6bd5e763b81c73293293815290517f7ed810aa000000000000000000000000000000000000000000000000000000008152600481018690529192509060208201906001600160a01b03841690637ed810aa90602401602060405180830381865afa158015613df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e17919061510e565b81525086895181518110613e2d57613e2d6151b6565b60200260200101819052505050505b505b509392505050565b600080613e53868661447c565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebb91906155ab565b5091509150876001600160a01b0316836001600160a01b031614613edb57905b613f0789836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16886144ad565b9998505050505050505050565b6000613f1e6125c0565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015613fc4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590613ffa5750866001600160a01b0316816001600160a01b0316145b61406b5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610cdd565b50505050505050565b61407c614507565b600061408661458b565b90508161410557600a548110156141055760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610cdd565b6000612710600f54836141189190615158565b6141229190615177565b9050801561416457600954614164906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612fee565b6000612710600e54846141779190615158565b6141819190615177565b905080156141bd576141bd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612fee565b60006141dc826141cd85876150c2565b6141d791906150c2565b614881565b905060006141e982612afe565b90506141f582826143fc565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461421e611292565b6002546040805192835260208301919091520160405180910390a1505050505050565b6000614296826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661494f9092919063ffffffff16565b80519091501561237b57808060200190518101906142b491906150f1565b61237b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610cdd565b600081116143765760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610cdd565b8060025461438491906150d9565b6002556001600160a01b0382166000908152600460205260409020546143ab9082906150d9565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906130f69085815260200190565b600082116144725760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610cdd565b610d8f828261495e565b600080826001600160a01b0316846001600160a01b03161061449f5782846144a2565b83835b915091509250929050565b6000806144bc836127106150c2565b6144c69087615158565b905060006144d48583615158565b90506000826144e561271089615158565b6144ef91906150d9565b90506144fb8183615177565b98975050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b81526004016020604051808303816000875af1158015614567573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb391906150f1565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156145f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614618919061510e565b60115490915060005b818110156148795760006011828154811061463e5761463e6151b6565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103614769574780156146fb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156146e157600080fd5b505af11580156146f5573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036147675761475e81866150d9565b94505050614867565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156147b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147d4919061510e565b90508015614864576001600160a01b038083166000908152601060205260409020600101541680156148625761485582847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b0316815260200190815260200160002060020154614adf565b61485f90876150d9565b95505b505b50505b80614871816151cc565b915050614621565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036148e0575090565b610b59827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000601354614adf565b60606129e88484600085614c7c565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156149ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1191906150f1565b506040517ffe41e5240000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905260006044830152600160648301527f0000000000000000000000000000000000000000000000000000000000000000169063fe41e52490608401600060405180830381600087803b158015614ac357600080fd5b505af1158015614ad7573d6000803e3d6000fd5b505050505050565b600080614aec868661447c565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b5491906155ab565b5091509150876001600160a01b0316836001600160a01b031614614b7457905b600080614ba38b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a6144ad565b9050896001600160a01b0316856001600160a01b031614614bc057905b614bd46001600160a01b038b16898d612fee565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f90614c2c90859085903090602481016155fb565b600060405180830381600087803b158015614c4657600080fd5b505af1158015614c5a573d6000803e3d6000fd5b50505050818111614c6b5781614c6d565b805b9b9a5050505050505050505050565b606082471015614cf45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610cdd565b6001600160a01b0385163b614d4b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cdd565b600080866001600160a01b03168587604051614d679190615633565b60006040518083038185875af1925050503d8060008114614da4576040519150601f19603f3d011682016040523d82523d6000602084013e614da9565b606091505b5091509150614db9828286614dc4565b979650505050505050565b60608315614dd3575081610c57565b825115614de35782518084602001fd5b8160405162461bcd60e51b8152600401610cdd9190614e55565b60005b83811015614e18578181015183820152602001614e00565b83811115611ea35750506000910152565b60008151808452614e41816020860160208601614dfd565b601f01601f19169290920160200192915050565b602081526000610c576020830184614e29565b6001600160a01b0381168114611eb357600080fd5b60008060408385031215614e9057600080fd5b8235614e9b81614e68565b946020939093013593505050565b600060208284031215614ebb57600080fd5b5035919050565b600080600060608486031215614ed757600080fd5b8335614ee281614e68565b92506020840135614ef281614e68565b929592945050506040919091013590565b60008060408385031215614f1657600080fd5b8235614f2181614e68565b91506020830135614f3181614e68565b809150509250929050565b600060208284031215614f4e57600080fd5b8135610c5781614e68565b60ff81168114611eb357600080fd5b600080600080600060a08688031215614f8057600080fd5b85359450602086013593506040860135614f9981614f59565b94979396509394606081013594506080013592915050565b8015158114611eb357600080fd5b600060208284031215614fd157600080fd5b8135610c5781614fb1565b60008060408385031215614fef57600080fd5b823591506020830135614f3181614fb1565b600080600080600080600060e0888a03121561501c57600080fd5b873561502781614e68565b9650602088013561503781614e68565b95506040880135945060608801359350608088013561505581614f59565b9699959850939692959460a0840135945060c09093013592915050565b600181811c9082168061508657607f821691505b6020821081036150a657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156150d4576150d46150ac565b500390565b600082198211156150ec576150ec6150ac565b500190565b60006020828403121561510357600080fd5b8151610c5781614fb1565b60006020828403121561512057600080fd5b5051919050565b60006020828403121561513957600080fd5b81516effffffffffffffffffffffffffffff81168114610c5757600080fd5b6000816000190483118215151615615172576151726150ac565b500290565b60008261519457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156151ab57600080fd5b8151610c5781614f59565b634e487b7160e01b600052603260045260246000fd5b6000600182016151de576151de6150ac565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600080835481600182811c91508083168061521757607f831692505b6020808410820361523657634e487b7160e01b86526022600452602486fd5b81801561524a576001811461525b57615288565b60ff19861689528489019650615288565b60008a81526020902060005b868110156152805781548b820152908501908301615267565b505084890196505b509498975050505050505050565b6000602082840312156152a857600080fd5b8151610c5781614e68565b600080604083850312156152c657600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156152f1576152f16150ac565b90039392505050565b600181815b8085111561533557816000190482111561531b5761531b6150ac565b8085161561532857918102915b93841c93908002906152ff565b509250929050565b60008261534c57506001610b59565b8161535957506000610b59565b816001811461536f576002811461537957615395565b6001915050610b59565b60ff84111561538a5761538a6150ac565b50506001821b610b59565b5060208310610133831016604e8410600b84101617156153b8575081810a610b59565b6153c283836152fa565b80600019048211156153d6576153d66150ac565b029392505050565b6000610c5760ff84168361533d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561542c5761542c6153ed565b604052919050565b600067ffffffffffffffff82111561544e5761544e6153ed565b5060051b60200190565b600082601f83011261546957600080fd5b8151602061547e61547983615434565b615403565b82815260059290921b8401810191818101908684111561549d57600080fd5b8286015b848110156154b857805183529183019183016154a1565b509695505050505050565b600080604083850312156154d657600080fd5b825167ffffffffffffffff808211156154ee57600080fd5b818501915085601f83011261550257600080fd5b8151602061551261547983615434565b82815260059290921b8401810191818101908984111561553157600080fd5b948201945b8386101561555857855161554981614e68565b82529482019490820190615536565b9188015191965090935050508082111561557157600080fd5b5061557e85828601615458565b9150509250929050565b80516dffffffffffffffffffffffffffff811681146155a657600080fd5b919050565b6000806000606084860312156155c057600080fd5b6155c984615588565b92506155d760208501615588565b9150604084015163ffffffff811681146155f057600080fd5b809150509250925092565b8481528360208201526001600160a01b03831660408201526080606082015260006156296080830184614e29565b9695505050505050565b60008251615645818460208701614dfd565b919091019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b6faef487e33376d541638c5a5cebcfdb4ce9c0f5d00020c13baabd86dd0f59064736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104725760003560e01c80638aff733d11610250578063bf16f65a11610150578063dd8ce4d6116100c8578063ed24911d11610097578063f2fde38b1161007c578063f2fde38b14610a78578063f7c618c114610a8b578063fdb5a03e14610ab257600080fd5b8063ed24911d14610a49578063f106845414610a5157600080fd5b8063dd8ce4d6146109fd578063e21ac82514610a10578063e75ab04514610a23578063eab89a5a14610a3657600080fd5b8063cff1b6ef1161011f578063d505accf11610104578063d505accf1461099e578063da09c72c146109b1578063dd62ed3e146109c457600080fd5b8063cff1b6ef14610978578063d0ed26ae1461098b57600080fd5b8063bf16f65a1461090f578063c4b24a4614610922578063c6def0761461092a578063c89039c51461095157600080fd5b8063a5534e71116101e3578063b52a321f116101b2578063b9e57b8011610197578063b9e57b80146108d7578063bd079f55146108df578063bd25c6db146108e857600080fd5b8063b52a321f146108b7578063b6b55f25146108c457600080fd5b8063a5534e711461081c578063a8ae2b7c1461087e578063a9059cbb14610891578063ac0d31ff146108a457600080fd5b806395d89b411161021f57806395d89b41146107c757806399729ec1146107cf5780639e4e7318146107e2578063a4d5e67c1461080957600080fd5b80638aff733d146107875780638b73e606146107905780638da5cb5b146107a35780639291d563146107b457600080fd5b8063483c2ef011610376578063715018a6116102ee5780637ae26773116102bd5780637ecebe00116102a25780637ecebe001461074157806381837230146107615780638980f11f1461077457600080fd5b80637ae26773146107265780637d8820971461073957600080fd5b8063715018a6146106e5578063789139bc146106ed57806379085425146106f6578063799b0714146106ff57600080fd5b80634ebb7916116103455780635ea682ea1161032a5780635ea682ea1461068c57806366666aa91461069557806370a08231146106bc57600080fd5b80634ebb7916146106705780635b0908861461068357600080fd5b8063483c2ef0146106145780634a970be7146106375780634bebd1e71461064a5780634e77ace51461065d57600080fd5b806320606b70116104095780632f4f21e2116103d8578063313ce567116103bd578063313ce567146105de5780633bdc6e72146105f857806340b47e1a1461060157600080fd5b80632f4f21e2146105a457806330adf81f146105b757600080fd5b806320606b701461055557806323b872dd1461057c578063247d284b146105125780632e1a7d4d1461058f57600080fd5b80630f23475d116104455780630f23475d1461050a57806311056035146105125780631480ce1f1461052557806318160ddd1461054c57600080fd5b8063012ee9281461047757806306fdde03146104bb57806307677111146104d0578063095ea7b3146104e7575b600080fd5b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6104c3610aba565b6040516104b29190614e55565b6104d9600d5481565b6040519081526020016104b2565b6104fa6104f5366004614e7d565b610b48565b60405190151581526020016104b2565b6104d9610b5f565b6104d9610520366004614ea9565b610b8a565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d960025481565b6104d97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104fa61058a366004614ec2565b610b95565b6105a261059d366004614ea9565b610c5e565b005b6105a26105b2366004614e7d565b610d85565b6104d97f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6105e6601281565b60405160ff90911681526020016104b2565b6104d960075481565b6105a261060f366004614f03565b610d93565b6104fa610622366004614f3c565b60086020526000908152604090205460ff1681565b6105a2610645366004614f68565b610df0565b6105a2610658366004614f3c565b610ebe565b6105a261066b366004614fbf565b610fdb565b6105a261067e366004614ea9565b611082565b6104d960135481565b6104d9600f5481565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6104d96106ca366004614f3c565b6001600160a01b031660009081526004602052604090205490565b6105a261113c565b6104d9600b5481565b6104d960125481565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a2610734366004614f03565b6111ce565b6104d9611292565b6104d961074f366004614f3c565b60056020526000908152604090205481565b6105a261076f366004614ea9565b6114da565b6105a2610782366004614e7d565b611563565b6104d9600e5481565b6105a261079e366004614f3c565b611613565b6006546001600160a01b031661049e565b6105a26107c2366004614f3c565b6117cf565b6104c3611889565b6105a26107dd366004614ea9565b611896565b6104d97fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6105a2610817366004614f3c565b61193b565b61085861082a366004614f3c565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016104b2565b6105a261088c366004614ea9565b611b85565b6104fa61089f366004614e7d565b611c2a565b6105a26108b2366004614fdc565b611c37565b600c546104fa9060ff1681565b6105a26108d2366004614ea9565b611ea9565b6104d9611eb6565b6104d9600a5481565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a261091d366004614ea9565b611ef5565b6104d9611f4b565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a2610986366004614ea9565b61228b565b6105a2610999366004614ec2565b61231f565b6105a26109ac366004615001565b612380565b60095461049e906001600160a01b031681565b6104d96109d2366004614f03565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6104d9610a0b366004614ea9565b612493565b6105a2610a1e366004614ea9565b6124d3565b61049e610a31366004614ea9565b61255c565b6104d9610a44366004614ea9565b612586565b6104d96125c0565b6104d97f000000000000000000000000000000000000000000000000000000000000000081565b6105a2610a86366004614f3c565b612660565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b6105a2612780565b60008054610ac790615072565b80601f0160208091040260200160405190810160405280929190818152602001828054610af390615072565b8015610b405780601f10610b1557610100808354040283529160200191610b40565b820191906000526020600020905b815481529060010190602001808311610b2357829003601f168201915b505050505081565b6000610b553384846129f0565b5060015b92915050565b600080610b6a611292565b90506000610b7782612afe565b9050610b8381836150c2565b9250505090565b6000610b5982612afe565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610bcf57506000198114155b15610c45576000610be085836150c2565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610c50868686612b18565b6001925050505b9392505050565b6000610c6982612586565b905060008111610ce65760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610cf182612c3c565b90506000610cfe83612afe565b9050610d3f33610d0e83856150c2565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fee565b610d49338561306e565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610d8f8282613102565b5050565b6009546001600160a01b03163314610de45760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b610d8f8282601e613332565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610e9557600080fd5b505af1158015610ea9573d6000803e3d6000fd5b50505050610eb73386613102565b5050505050565b6006546001600160a01b03163314610f065760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6001600160a01b03811660009081526008602052604090205460ff1615610f6f5760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610cdd565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610fa1916150d9565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b031633146110235760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600c5481151560ff90911615150361103a57600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110ca5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600081116110d757600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611104573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101611077565b6006546001600160a01b031633146111845760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146112165760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611265573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128991906150f1565b610d8f57600080fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156112fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131f919061510e565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a5919061510e565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114289190615127565b6effffffffffffffffffffffffffffff166114439190615158565b61144d9190615177565b9050610b83817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d59190615199565b613508565b6006546001600160a01b031633146115225760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146115ab5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600081116115b857600080fd5b6115cc6001600160a01b0383163383612fee565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b0316331461165b5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6000600754116116d35760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610cdd565b6001600160a01b03811660009081526008602052604090205460ff1615156001146117665760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610cdd565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611795906001906150c2565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146118205760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610ac790615072565b6006546001600160a01b031633146118de5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b612710600e54826118ef91906150d9565b11156118fa57600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6009546001600160a01b0316331461198c5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b601154811015611a9357601181815481106119e4576119e46151b6565b6000918252602090912001546001600160a01b0390811690841603611a81576011805460019350611a169084906150c2565b81548110611a2657611a266151b6565b600091825260209091200154601180546001600160a01b039092169183908110611a5257611a526151b6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80611a8b816151cc565b9150506119c7565b5080611b075760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610cdd565b6011805480611b1857611b186151e5565b600082815260209020810160001990810180546001600160a01b0319169055019055601254611b49906001906150c2565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc90602001611607565b6006546001600160a01b03163314611bcd5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b612710600f5482611bde91906150d9565b1115611be957600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b6000610b55338484612b18565b6006546001600160a01b03163314611c7f5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0a919061510e565b9050611d14613570565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f919061510e565b905083611dac83836150c2565b1015611e465760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610cdd565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611e6f611292565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611ea357611ea36000610fdb565b50505050565b611eb33382613102565b50565b600080611ec1611f4b565b9050600a548110611eed57612710600e5482611edd9190615158565b611ee79190615177565b91505090565b600091505090565b6009546001600160a01b03163314611f465760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b601355565b600080611f566138c3565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe4919061510e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160361204c5761204947826150d9565b90505b60005b825181101561228457600083828151811061206c5761206c6151b6565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036120e3578382815181106120c5576120c56151b6565b602002602001015160200151836120dc91906150d9565b9250612271565b6001600160a01b03811615612271576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d919061510e565b90506000858481518110612173576121736151b6565b6020026020010151602001518261218a91906150d9565b90506000601060008887815181106121a4576121a46151b6565b602090810291909101810151516001600160a01b039081168352908201929092526040016000206001015416905081158015906121e957506001600160a01b03811615155b1561226d5761226082857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c8151811061222b5761222b6151b6565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060020154613e46565b61226a90876150d9565b95505b5050505b508061227c816151cc565b91505061204f565b5092915050565b6006546001600160a01b031633146122d35760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b80156122de57600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146123705760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610cdd565b61237b838383613332565b505050565b428410156123d05760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610cdd565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661241d836151cc565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905061247e8882868686613f14565b6124898888886129f0565b5050505050505050565b6000600254600014806124ab57506124a9611292565b155b156124b4575090565b6124bc611292565b6002546124c99084615158565b610b599190615177565b6006546001600160a01b0316331461251b5760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b6011818154811061256c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006002546000148061259e575061259c611292565b155b156125ab57506000919050565b6002546125b6611292565b6124c99084615158565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516125f591906151fb565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146126a85760405162461bcd60e51b815260206004820181905260248201526000805160206156508339815191526044820152606401610cdd565b6001600160a01b0381166127245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610cdd565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146127cf5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610cdd565b6127d96000614074565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561281b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283f9190615296565b6001600160a01b0316836001600160a01b031614806128d05750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bb9190615296565b6001600160a01b0316836001600160a01b0316145b80156129ca5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129399190615296565b6001600160a01b0316826001600160a01b031614806129ca5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b59190615296565b6001600160a01b0316826001600160a01b0316145b80156129e85750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b038316612a465760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610cdd565b6001600160a01b038216612a9c5760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610cdd565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080612710612b0e8285615158565b610c579190615177565b6001600160a01b038216612b945760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610cdd565b6001600160a01b038316600090815260046020526040902054612bb89082906150c2565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612be89082906150d9565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612af19085815260200190565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc9919061510e565b90506000612cd5611292565b612cdf8386615158565b612ce99190615177565b9050818111612cf85780612cfa565b815b6040517fc32e720200000000000000000000000000000000000000000000000000000000815260048101829052600060248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c32e720290604401600060405180830381600087803b158015612d7f57600080fd5b505af1158015612d93573d6000803e3d6000fd5b50506040517f907448ed0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600093507f000000000000000000000000000000000000000000000000000000000000000016915063907448ed906044016040805180830381865afa158015612e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6391906152b3565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1c91906150f1565b506040516309a5fca360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490526044820183905230606483015260001960848301527f000000000000000000000000000000000000000000000000000000000000000016906309a5fca39060a4016020604051808303816000875af1158015612fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe5919061510e565b95945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261237b908490614241565b6001600160a01b0382166000908152600460205260409020546130929082906150c2565b6001600160a01b0383166000908152600460205260409020556002546130b99082906150c2565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff16151560011461317f5760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610cdd565b600b5480156131a8576000613192611f4b565b9050818111156131a6576131a66001614074565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015613234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325891906150f1565b6132ca5760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610cdd565b60006132d583612afe565b90506132ed846132e8610a0b84876150c2565b614326565b6132f783826143fc565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610d7791815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461340a5761339682847f00000000000000000000000000000000000000000000000000000000000000006127db565b61340a576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610cdd565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68909301805490921690921790556012546134bd916150d9565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b600060128260ff16101561353d576135218260126152d7565b61352c90600a6153de565b6135369084615177565b9050610b59565b60128260ff161115613569576135546012836152d7565b61355f90600a6153de565b6135369084615158565b5090919050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156135ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362391906150f1565b506040517f49f039a2000000000000000000000000000000000000000000000000000000008152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349f039a290602401600060405180830381600087803b15801561369f57600080fd5b505af11580156136b3573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa15801561371e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613742919061510e565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af11580156137d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fa91906150f1565b506040516309a5fca360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000604483015230606483015260001960848301527f000000000000000000000000000000000000000000000000000000000000000016906309a5fca39060a4016020604051808303816000875af115801561389f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f919061510e565b6040517fdc01f60d00000000000000000000000000000000000000000000000000000000815230600482015260609060009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dc01f60d90602401600060405180830381865afa158015613948573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261397091908101906154c3565b9150915060008251600161398491906150d9565b67ffffffffffffffff81111561399c5761399c6153ed565b6040519080825280602002602001820160405280156139e157816020015b60408051808201909152600080825260208201528152602001906001900390816139ba5790505b5090506000805b8451811015613ad3576040518060400160405280868381518110613a0e57613a0e6151b6565b60200260200101516001600160a01b03168152602001858381518110613a3657613a366151b6565b6020026020010151815250838281518110613a5357613a536151b6565b6020026020010181905250737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf966001600160a01b0316858281518110613a8e57613a8e6151b6565b60200260200101516001600160a01b031603613ac157838181518110613ab657613ab66151b6565b602002602001015191505b80613acb816151cc565b9150506139e8565b508015613e3e576040517f525c42d80000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063525c42d890602401602060405180830381865afa158015613b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9e919061510e565b905080600003613c2d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f9bcc6c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2a919061510e565b90505b8015613e3c576000612710613c428385615158565b613c4c9190615177565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632ada885a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd29190615296565b905060006001600160a01b03821615613ceb5781613d6d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663923c1d616040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6d9190615296565b604080518082018252735190f06eacefa2c552dc6bd5e763b81c73293293815290517f7ed810aa000000000000000000000000000000000000000000000000000000008152600481018690529192509060208201906001600160a01b03841690637ed810aa90602401602060405180830381865afa158015613df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e17919061510e565b81525086895181518110613e2d57613e2d6151b6565b60200260200101819052505050505b505b509392505050565b600080613e53868661447c565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebb91906155ab565b5091509150876001600160a01b0316836001600160a01b031614613edb57905b613f0789836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16886144ad565b9998505050505050505050565b6000613f1e6125c0565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015613fc4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590613ffa5750866001600160a01b0316816001600160a01b0316145b61406b5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610cdd565b50505050505050565b61407c614507565b600061408661458b565b90508161410557600a548110156141055760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610cdd565b6000612710600f54836141189190615158565b6141229190615177565b9050801561416457600954614164906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612fee565b6000612710600e54846141779190615158565b6141819190615177565b905080156141bd576141bd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612fee565b60006141dc826141cd85876150c2565b6141d791906150c2565b614881565b905060006141e982612afe565b90506141f582826143fc565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461421e611292565b6002546040805192835260208301919091520160405180910390a1505050505050565b6000614296826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661494f9092919063ffffffff16565b80519091501561237b57808060200190518101906142b491906150f1565b61237b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610cdd565b600081116143765760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610cdd565b8060025461438491906150d9565b6002556001600160a01b0382166000908152600460205260409020546143ab9082906150d9565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906130f69085815260200190565b600082116144725760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610cdd565b610d8f828261495e565b600080826001600160a01b0316846001600160a01b03161061449f5782846144a2565b83835b915091509250929050565b6000806144bc836127106150c2565b6144c69087615158565b905060006144d48583615158565b90506000826144e561271089615158565b6144ef91906150d9565b90506144fb8183615177565b98975050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b81526004016020604051808303816000875af1158015614567573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb391906150f1565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156145f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614618919061510e565b60115490915060005b818110156148795760006011828154811061463e5761463e6151b6565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103614769574780156146fb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156146e157600080fd5b505af11580156146f5573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036147675761475e81866150d9565b94505050614867565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156147b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147d4919061510e565b90508015614864576001600160a01b038083166000908152601060205260409020600101541680156148625761485582847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b0316815260200190815260200160002060020154614adf565b61485f90876150d9565b95505b505b50505b80614871816151cc565b915050614621565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036148e0575090565b610b59827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000601354614adf565b60606129e88484600085614c7c565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156149ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1191906150f1565b506040517ffe41e5240000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905260006044830152600160648301527f0000000000000000000000000000000000000000000000000000000000000000169063fe41e52490608401600060405180830381600087803b158015614ac357600080fd5b505af1158015614ad7573d6000803e3d6000fd5b505050505050565b600080614aec868661447c565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b5491906155ab565b5091509150876001600160a01b0316836001600160a01b031614614b7457905b600080614ba38b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a6144ad565b9050896001600160a01b0316856001600160a01b031614614bc057905b614bd46001600160a01b038b16898d612fee565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f90614c2c90859085903090602481016155fb565b600060405180830381600087803b158015614c4657600080fd5b505af1158015614c5a573d6000803e3d6000fd5b50505050818111614c6b5781614c6d565b805b9b9a5050505050505050505050565b606082471015614cf45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610cdd565b6001600160a01b0385163b614d4b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cdd565b600080866001600160a01b03168587604051614d679190615633565b60006040518083038185875af1925050503d8060008114614da4576040519150601f19603f3d011682016040523d82523d6000602084013e614da9565b606091505b5091509150614db9828286614dc4565b979650505050505050565b60608315614dd3575081610c57565b825115614de35782518084602001fd5b8160405162461bcd60e51b8152600401610cdd9190614e55565b60005b83811015614e18578181015183820152602001614e00565b83811115611ea35750506000910152565b60008151808452614e41816020860160208601614dfd565b601f01601f19169290920160200192915050565b602081526000610c576020830184614e29565b6001600160a01b0381168114611eb357600080fd5b60008060408385031215614e9057600080fd5b8235614e9b81614e68565b946020939093013593505050565b600060208284031215614ebb57600080fd5b5035919050565b600080600060608486031215614ed757600080fd5b8335614ee281614e68565b92506020840135614ef281614e68565b929592945050506040919091013590565b60008060408385031215614f1657600080fd5b8235614f2181614e68565b91506020830135614f3181614e68565b809150509250929050565b600060208284031215614f4e57600080fd5b8135610c5781614e68565b60ff81168114611eb357600080fd5b600080600080600060a08688031215614f8057600080fd5b85359450602086013593506040860135614f9981614f59565b94979396509394606081013594506080013592915050565b8015158114611eb357600080fd5b600060208284031215614fd157600080fd5b8135610c5781614fb1565b60008060408385031215614fef57600080fd5b823591506020830135614f3181614fb1565b600080600080600080600060e0888a03121561501c57600080fd5b873561502781614e68565b9650602088013561503781614e68565b95506040880135945060608801359350608088013561505581614f59565b9699959850939692959460a0840135945060c09093013592915050565b600181811c9082168061508657607f821691505b6020821081036150a657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156150d4576150d46150ac565b500390565b600082198211156150ec576150ec6150ac565b500190565b60006020828403121561510357600080fd5b8151610c5781614fb1565b60006020828403121561512057600080fd5b5051919050565b60006020828403121561513957600080fd5b81516effffffffffffffffffffffffffffff81168114610c5757600080fd5b6000816000190483118215151615615172576151726150ac565b500290565b60008261519457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156151ab57600080fd5b8151610c5781614f59565b634e487b7160e01b600052603260045260246000fd5b6000600182016151de576151de6150ac565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600080835481600182811c91508083168061521757607f831692505b6020808410820361523657634e487b7160e01b86526022600452602486fd5b81801561524a576001811461525b57615288565b60ff19861689528489019650615288565b60008a81526020902060005b868110156152805781548b820152908501908301615267565b505084890196505b509498975050505050505050565b6000602082840312156152a857600080fd5b8151610c5781614e68565b600080604083850312156152c657600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156152f1576152f16150ac565b90039392505050565b600181815b8085111561533557816000190482111561531b5761531b6150ac565b8085161561532857918102915b93841c93908002906152ff565b509250929050565b60008261534c57506001610b59565b8161535957506000610b59565b816001811461536f576002811461537957615395565b6001915050610b59565b60ff84111561538a5761538a6150ac565b50506001821b610b59565b5060208310610133831016604e8410600b84101617156153b8575081810a610b59565b6153c283836152fa565b80600019048211156153d6576153d66150ac565b029392505050565b6000610c5760ff84168361533d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561542c5761542c6153ed565b604052919050565b600067ffffffffffffffff82111561544e5761544e6153ed565b5060051b60200190565b600082601f83011261546957600080fd5b8151602061547e61547983615434565b615403565b82815260059290921b8401810191818101908684111561549d57600080fd5b8286015b848110156154b857805183529183019183016154a1565b509695505050505050565b600080604083850312156154d657600080fd5b825167ffffffffffffffff808211156154ee57600080fd5b818501915085601f83011261550257600080fd5b8151602061551261547983615434565b82815260059290921b8401810191818101908984111561553157600080fd5b948201945b8386101561555857855161554981614e68565b82529482019490820190615536565b9188015191965090935050508082111561557157600080fd5b5061557e85828601615458565b9150509250929050565b80516dffffffffffffffffffffffffffff811681146155a657600080fd5b919050565b6000806000606084860312156155c057600080fd5b6155c984615588565b92506155d760208501615588565b9150604084015163ffffffff811681146155f057600080fd5b809150509250925092565b8481528360208201526001600160a01b03831660408201526080606082015260006156296080830184614e29565b9695505050505050565b60008251615645818460208701614dfd565b919091019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b6faef487e33376d541638c5a5cebcfdb4ce9c0f5d00020c13baabd86dd0f59064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Deprecated; Kept for compatibility",
        "params": {
          "newValue": "fee in BIPS; required to be 0"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens available to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 560,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 566,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 586,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8327,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8436,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8440,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1967,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "devAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1969,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1971,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1973,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1975,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1977,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1979,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12191,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(RewardSwapPair)12186_storage)"
      },
      {
        "astId": 12194,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12196,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "rewardCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 13665,
        "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
        "label": "swapFeeBips",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardSwapPair)12186_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VariableRewardsStrategy.RewardSwapPair)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSwapPair)12186_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RewardSwapPair)12186_storage": {
        "encoding": "inplace",
        "label": "struct VariableRewardsStrategy.RewardSwapPair",
        "members": [
          {
            "astId": 12181,
            "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
            "label": "reward",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12183,
            "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
            "label": "swapPair",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12185,
            "contract": "contracts/strategies/arbitrum/wombex/WombexStrategy.sol:WombexStrategy",
            "label": "swapFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}