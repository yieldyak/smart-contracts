{
  "address": "0x735919D73095b4691348B79d2fab44b2BAEc03cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gmxDepositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouterV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethUsdcPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyAndStakeGlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glpMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxDepositor",
      "outputs": [
        {
          "internalType": "contract IGmxDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxRewardRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeESGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedESGMX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3b15338397746d7af15f08a69d6c161f8e2c3c61c3ad19349f6cb3988dad874",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x735919D73095b4691348B79d2fab44b2BAEc03cb",
    "transactionIndex": 3,
    "gasUsed": "7536928",
    "logsBloom": "0x
    "blockHash": "0x0c9c5ced148023f9715776c98fdd88c7e55b92cc765b1f8299e15fed095d8db1",
    "transactionHash": "0xc3b15338397746d7af15f08a69d6c161f8e2c3c61c3ad19349f6cb3988dad874",
    "logs": [],
    "blockNumber": 107044431,
    "cumulativeGasUsed": "8673040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBe5958F1dbb48a60EfD0A9d8D26917641d3b50ef",
    "0xB95DB5B167D75e6d04227CfFFA61069348d271F5",
    "0x84652bb2539513BAf36e225c930Fdd8eaa63CE27",
    "30",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
  ],
  "solcInputHash": "50e5750767a3630ff2ac646b2d5d0983",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gmxDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouterV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethUsdcPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxDepositor\",\"outputs\":[{\"internalType\":\"contract IGmxDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxRewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeESGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedESGMX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol\":\"GmxProxyArbitrum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9934224020ce9192433dcbefcc56ee1500985de4e9611ef42e00498fa0a99dd0\",\"license\":\"MIT\"},\"contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IYakStrategy {\\n    function depositToken() external view returns (address);\\n\\n    function depositFor(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf708acb7d65bf39a9d7ed9a14cd296f7b1a9152050c688475c8cc968e07e6e70\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    uint256 public constant DEFAULT_SWAP_FEE = 30;\\n    uint public constant BIPS_DIVISOR = 10000;\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        return DexLibrary.swap(amountIn, fromToken, toToken, pair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair,\\n        uint256 swapFee\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        return DexLibrary.estimateConversionThroughPair(amountIn, fromToken, toToken, swapPair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair,\\n        uint256 swapFee\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        return\\n            DexLibrary.convertRewardTokensToDepositTokens(\\n                amount,\\n                rewardToken,\\n                depositToken,\\n                swapPairToken0,\\n                DEFAULT_SWAP_FEE,\\n                swapPairToken1,\\n                DEFAULT_SWAP_FEE\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        uint256 swapFeeToken0,\\n        IPair swapPairToken1,\\n        uint256 swapFeeToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount / 2;\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0, swapFeeToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1, swapFeeToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return (amountIn * reserve1) / reserve0;\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * (BIPS_DIVISOR - swapFee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * BIPS_DIVISOR + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x00c364da9793e60b6f55fa73a532b8659d5892e0c817c710f1ea60ea6ff53093\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../interfaces/IYakStrategy.sol\\\";\\nimport \\\"../../../lib/SafeERC20.sol\\\";\\nimport \\\"../../../lib/DexLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IGmxDepositor.sol\\\";\\nimport \\\"./interfaces/IGmxRewardRouter.sol\\\";\\nimport \\\"./interfaces/IGmxRewardTracker.sol\\\";\\nimport \\\"./interfaces/IGmxProxy.sol\\\";\\nimport \\\"./interfaces/IGlpManager.sol\\\";\\nimport \\\"./interfaces/IGmxVault.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(IGmxDepositor gmxDepositor, address target, uint256 value, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returnValue) = gmxDepositor.execute(target, value, data);\\n        if (!success) revert(\\\"GmxProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\ncontract GmxProxyArbitrum is IGmxProxy {\\n    using SafeProxy for IGmxDepositor;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    address internal constant WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\n    address internal constant USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\\n    address internal constant GMX = 0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a;\\n    address internal constant sGLP = 0x5402B5F40310bDED796c7D0F3FF6683f5C0cFfdf;\\n    address internal constant esGMX = 0xf42Ae1D54fd613C9bb14810b0588FaAa09a426cA;\\n    uint256 internal constant USDG_PRICE_PRECISION = 1e30;\\n\\n    address public devAddr;\\n    address public approvedStrategy;\\n\\n    IGmxDepositor public immutable override gmxDepositor;\\n    address public immutable override gmxRewardRouter;\\n    address public immutable glpMinter;\\n\\n    address internal immutable gmxRewardTracker;\\n    address internal immutable glpRewardTracker;\\n    address internal immutable glpManager;\\n    address internal immutable vault;\\n    address internal immutable usdg;\\n    address internal immutable wethUsdcPair;\\n    uint256 internal immutable swapFee;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"GmxProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(approvedStrategy == msg.sender, \\\"GmxProxy:onlyStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _gmxDepositor,\\n        address _gmxRewardRouterV2,\\n        address _wethUsdcPair,\\n        uint256 _swapFee,\\n        address _devAddr\\n    ) {\\n        require(_devAddr > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = _devAddr;\\n        gmxDepositor = IGmxDepositor(_gmxDepositor);\\n        gmxRewardRouter = _gmxRewardRouterV2;\\n        glpMinter = _gmxRewardRouterV2;\\n        gmxRewardTracker = IGmxRewardRouter(_gmxRewardRouterV2).stakedGmxTracker();\\n        glpRewardTracker = IGmxRewardRouter(_gmxRewardRouterV2).feeGlpTracker();\\n        glpManager = IGmxRewardRouter(_gmxRewardRouterV2).glpManager();\\n        vault = IGlpManager(glpManager).vault();\\n        usdg = IGmxVault(vault).usdg();\\n        wethUsdcPair = _wethUsdcPair;\\n        swapFee = _swapFee;\\n    }\\n\\n    function updateDevAddr(address newValue) public onlyDev {\\n        require(newValue > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = newValue;\\n    }\\n\\n    function approveStrategy(address _strategy) external onlyDev {\\n        require(approvedStrategy == address(0), \\\"GmxProxy::Strategy already defined\\\");\\n        approvedStrategy = _strategy;\\n    }\\n\\n    function stakeESGMX() external onlyDev {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\\"stakeEsGmx(uint256)\\\", IERC20(esGMX).balanceOf(address(gmxDepositor)))\\n        );\\n    }\\n\\n    function stakedESGMX() public view returns (uint256) {\\n        return IGmxRewardTracker(gmxRewardTracker).depositBalances(address(gmxDepositor), esGMX);\\n    }\\n\\n    function vaultHasEthCapacity(uint256 _amountIn) internal view returns (bool) {\\n        uint256 price = IGmxVault(vault).getMinPrice(WETH);\\n        uint256 usdgAmount = (_amountIn * price) / USDG_PRICE_PRECISION;\\n        usdgAmount = IGmxVault(vault).adjustForDecimals(usdgAmount, WETH, usdg);\\n        uint256 vaultUsdgAmount = IGmxVault(vault).usdgAmounts(WETH);\\n        uint256 maxUsdgAmount = IGmxVault(vault).maxUsdgAmounts(WETH);\\n        return maxUsdgAmount == 0 || vaultUsdgAmount + usdgAmount < maxUsdgAmount;\\n    }\\n\\n    function swapToUSDC(uint256 _amount) internal returns (uint256) {\\n        return DexLibrary.swap(_amount, WETH, USDC, IPair(wethUsdcPair), swapFee);\\n    }\\n\\n    function buyAndStakeGlp(uint256 _amount) external override onlyStrategy returns (uint256) {\\n        bool sufficientEthCapacity = vaultHasEthCapacity(_amount);\\n        address token = sufficientEthCapacity ? WETH : USDC;\\n        _amount = sufficientEthCapacity ? _amount : swapToUSDC(_amount);\\n\\n        IERC20(token).transfer(address(gmxDepositor), _amount);\\n\\n        gmxDepositor.safeExecute(token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, _amount));\\n        bytes memory result = gmxDepositor.safeExecute(\\n            glpMinter,\\n            0,\\n            abi.encodeWithSignature(\\\"mintAndStakeGlp(address,uint256,uint256,uint256)\\\", token, _amount, 0, 0)\\n        );\\n        return toUint256(result, 0);\\n    }\\n\\n    function withdrawGlp(uint256 _amount) external override onlyStrategy {\\n        _withdrawGlp(_amount);\\n    }\\n\\n    function _withdrawGlp(uint256 _amount) private {\\n        gmxDepositor.safeExecute(sGLP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function pendingRewards() external view override returns (uint256) {\\n        return IGmxRewardTracker(IGmxRewardRouter(gmxRewardRouter).feeGlpTracker()).claimable(address(gmxDepositor));\\n    }\\n\\n    function claimReward() external override onlyStrategy {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"handleRewards(bool,bool,bool,bool,bool,bool,bool)\\\", false, false, true, true, true, true, false\\n            )\\n        );\\n        uint256 reward = IERC20(WETH).balanceOf(address(gmxDepositor));\\n        gmxDepositor.safeExecute(WETH, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n    }\\n\\n    function totalDeposits() external view override returns (uint256) {\\n        return IGmxRewardTracker(glpRewardTracker).stakedAmounts(address(gmxDepositor));\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x658492bb2e69da8fc3fe2d86cf4375997091cef9783417f7fe929189d6a9e989\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGlpManager {\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x17adeb1ccc040af996b35d8198661cc33d1e9c0b3ce85c9eee28d9383ec97d3e\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxDepositor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function setGmxProxy(address _proxy) external;\\n}\\n\",\"keccak256\":\"0xd44c62d9eeae0bab1a485260ef6c4ccb2e8cc13a75df386dbc1391d46bebc855\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IGmxDepositor.sol\\\";\\n\\ninterface IGmxProxy {\\n    function gmxDepositor() external view returns (IGmxDepositor);\\n\\n    function gmxRewardRouter() external view returns (address);\\n\\n    function buyAndStakeGlp(uint256 _amount) external returns (uint256);\\n\\n    function withdrawGlp(uint256 _amount) external;\\n\\n    function pendingRewards() external view returns (uint256);\\n\\n    function claimReward() external;\\n\\n    function totalDeposits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb649305a677df66c7abad7c40e42d0d05cc106b1a5942f072398abc71f924c97\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardRouter {\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function bonusGmxTracker() external view returns (address);\\n\\n    function feeGmxTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\\n\\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp)\\n        external\\n        returns (uint256);\\n\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fbe8194e8c13787c78bdb71873686ff7bc0d32aab5489fa7c1d12a907f586a3\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3f96481089ef8357ff0fb03797a6363666cb2d7376f4f35d117d2b1f7464ef7\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxVaultPriceFeed {\\n    function getPrice(\\n        address,\\n        bool,\\n        bool,\\n        bool\\n    ) external view returns (uint256);\\n}\\n\\ninterface IGmxVaultUtils {\\n    function getSwapFeeBasisPoints(\\n        address,\\n        address,\\n        uint256\\n    ) external view returns (uint256);\\n\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n}\\n\\ninterface IGmxVault {\\n    function swap(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function whitelistedTokens(address) external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function vaultUtils() external view returns (IGmxVaultUtils);\\n\\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function maxUsdgAmounts(address) external view returns (uint256);\\n\\n    function usdgAmounts(address) external view returns (uint256);\\n\\n    function reservedAmounts(address) external view returns (uint256);\\n\\n    function bufferAmounts(address) external view returns (uint256);\\n\\n    function poolAmounts(address) external view returns (uint256);\\n\\n    function usdg() external view returns (address);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function stableTokens(address) external view returns (bool);\\n\\n    function getFeeBasisPoints(\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool\\n    ) external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function setBufferAmount(address, uint256) external;\\n\\n    function gov() external view returns (address);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function adjustForDecimals(\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcae425bfd07be65ff63cd9631f911a15283ad042d0b6b5fe593bd4cb868cfe6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b506040516200209238038062002092833981016040819052620000359162000354565b6001600160a01b0381166200009f5760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c69642064657620616464726573732070726044820152651bdd9a59195960d21b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b0383811691909117909155858116608052841660a081905260c08190526040805163067200c560e11b81529051630ce4018a916004808201926020929091908290030181865afa1580156200010d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001339190620003bb565b6001600160a01b031660e0816001600160a01b031681525050836001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200018b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b19190620003bb565b6001600160a01b0316610100816001600160a01b031681525050836001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200020a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002309190620003bb565b6001600160a01b03166101208190526040805163fbfa77cf60e01b8152905163fbfa77cf916004808201926020929091908290030181865afa1580156200027b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a19190620003bb565b6001600160a01b03166101408190526040805163f5b91b7b60e01b8152905163f5b91b7b916004808201926020929091908290030181865afa158015620002ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003129190620003bb565b6001600160a01b039081166101605292909216610180526101a05250620003e0915050565b80516001600160a01b03811681146200034f57600080fd5b919050565b600080600080600060a086880312156200036d57600080fd5b620003788662000337565b9450620003886020870162000337565b9350620003986040870162000337565b925060608601519150620003af6080870162000337565b90509295509295909350565b600060208284031215620003ce57600080fd5b620003d98262000337565b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051611bb9620004d960003960006112950152600061127401526000611014015260008181610f320152818161103f015281816110fc01526111b701526000610ab40152600061058701526000610cb90152600081816101420152610b920152600081816101b8015281816102c0015281816107890152610cee01526000818160f401528181610295015281816103a20152818161055c015281816107fb0152818161083b0152818161092b01528181610a2601528181610b3901528181610c0401528181610c740152610d9e0152611bb96000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639d54b5241161008c578063d28cd38a11610066578063d28cd38a146101f5578063da09c72c146101fd578063eded3fda14610210578063fa610c171461021857600080fd5b80639d54b524146101b3578063b88a802f146101da578063bf4d14d5146101e257600080fd5b80633b8ae397116100c85780633b8ae397146101645780635c72f4b5146101775780637d8820971461018a5780639291d563146101a057600080fd5b8063026879dc146100ef57806311ff5fff1461013357806328495daa1461013d575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b61022b565b005b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61013b610172366004611838565b6103cd565b61013b610185366004611855565b6104c9565b61019261052c565b60405190815260200161012a565b61013b6101ae366004611838565b6105fa565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61013b6106f3565b6101926101f0366004611855565b610957565b610192610c44565b600054610116906001600160a01b031681565b610192610cea565b600154610116906001600160a01b031681565b6000546001600160a01b0316331461027e5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526103ca907f00000000000000000000000000000000000000000000000000000000000000009060009073f42ae1d54fd613c9bb14810b0588faaa09a426ca906370a0823190602401602060405180830381865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610343919061186e565b60405160240161035591815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167fef8c5994000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b50565b6000546001600160a01b0316331461041b5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b6044820152606401610275565b6001546001600160a01b03161561049a5760405162461bcd60e51b815260206004820152602260248201527f476d7850726f78793a3a537472617465677920616c726561647920646566696e60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610275565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146105235760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c79537472617465677900000000000000000000006044820152606401610275565b6103ca81610eae565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906310c1c103906024015b602060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f5919061186e565b905090565b6000546001600160a01b031633146106485760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b6044820152606401610275565b6001600160a01b0381166106c45760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c696420646576206164647265737320707260448201527f6f766964656400000000000000000000000000000000000000000000000000006064820152608401610275565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461074d5760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c79537472617465677900000000000000000000006044820152606401610275565b604051600060248201819052604482018190526001606483018190526084830181905260a4830181905260c483015260e48201819052610823917f000000000000000000000000000000000000000000000000000000000000000091906101040160408051601f198184030181529190526020810180516001600160e01b03167f30b70002000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000907382af49447d8a07e3bd95bd0d56f35241523fbab1906370a0823190602401602060405180830381865afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c3919061186e565b60405133602482015260448101829052909150610953907382af49447d8a07e3bd95bd0d56f35241523fbab1906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b5050565b6001546000906001600160a01b031633146109b45760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c79537472617465677900000000000000000000006044820152606401610275565b60006109bf83610ee3565b90506000816109e25773ff970a61a04b1ca14834a43f5de4533ebddb5cc86109f8565b7382af49447d8a07e3bd95bd0d56f35241523fbab15b905081610a0d57610a0884611242565b610a0f565b835b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529195509082169063a9059cbb906044016020604051808303816000875af1158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190611897565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260448101859052610b6190829060009060640160408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b506040516001600160a01b0382166024820152604481018590526000606482018190526084820181905290610c2c907f000000000000000000000000000000000000000000000000000000000000000090839060a40160408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b9050610c398160006112bf565b93505050505b919050565b6040517ff5d9d63e0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273f42ae1d54fd613c9bb14810b0588faaa09a426ca60248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f5d9d63e906044016105b4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e91906118b2565b6040517f402914f50000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091169063402914f5906024016105b4565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401610e0c9392919061192b565b6000604051808303816000875af1158015610e2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e539190810190611972565b9150915081610ea45760405162461bcd60e51b815260206004820152601c60248201527f476d7850726f78793a3a7361666545786563757465206661696c6564000000006044820152606401610275565b9695505050505050565b6040513360248201526044810182905261095390735402b5f40310bded796c7d0f3ff6683f5c0cffdf906000906064016108f7565b6040517f81a612d60000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab1600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381a612d690602401602060405180830381865afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d919061186e565b905060006c0c9f2c9cd04674edea40000000610fb98386611a48565b610fc39190611a67565b6040517f42152873000000000000000000000000000000000000000000000000000000008152600481018290527382af49447d8a07e3bd95bd0d56f35241523fbab160248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301529192507f000000000000000000000000000000000000000000000000000000000000000090911690634215287390606401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac919061186e565b6040517f1aa4ace50000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab160048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631aa4ace590602401602060405180830381865afa158015611143573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611167919061186e565b6040517fad1e4f8d0000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab160048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ad1e4f8d90602401602060405180830381865afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611222919061186e565b9050801580610ea45750806112378484611a89565b109695505050505050565b60006112b9827382af49447d8a07e3bd95bd0d56f35241523fbab173ff970a61a04b1ca14834a43f5de4533ebddb5cc87f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611325565b92915050565b60006112cc826020611a89565b8351101561131c5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610275565b50016020015190565b60008061133286866114c2565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a9190611abf565b5091509150876001600160a01b0316836001600160a01b0316146113ba57905b6000806113e98b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a6114f3565b9050896001600160a01b0316856001600160a01b03161461140657905b61141a6001600160a01b038b16898d61154d565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f906114729085908590309060248101611b0f565b600060405180830381600087803b15801561148c57600080fd5b505af11580156114a0573d6000803e3d6000fd5b505050508181116114b157816114b3565b805b9b9a5050505050505050505050565b600080826001600160a01b0316846001600160a01b0316106114e55782846114e8565b83835b915091509250929050565b60008061150283612710611b3d565b61150c9087611a48565b9050600061151a8583611a48565b905060008261152b61271089611a48565b6115359190611a89565b90506115418183611a67565b98975050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261159f9084906115a4565b505050565b60006115f9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116899092919063ffffffff16565b80519091501561159f57808060200190518101906116179190611897565b61159f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610275565b606061169884846000856116a2565b90505b9392505050565b60608247101561171a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610275565b6001600160a01b0385163b6117715760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610275565b600080866001600160a01b0316858760405161178d9190611b54565b60006040518083038185875af1925050503d80600081146117ca576040519150601f19603f3d011682016040523d82523d6000602084013e6117cf565b606091505b50915091506117df8282866117ea565b979650505050505050565b606083156117f957508161169b565b8251156118095782518084602001fd5b8160405162461bcd60e51b81526004016102759190611b70565b6001600160a01b03811681146103ca57600080fd5b60006020828403121561184a57600080fd5b813561169b81611823565b60006020828403121561186757600080fd5b5035919050565b60006020828403121561188057600080fd5b5051919050565b80518015158114610c3f57600080fd5b6000602082840312156118a957600080fd5b61169b82611887565b6000602082840312156118c457600080fd5b815161169b81611823565b60005b838110156118ea5781810151838201526020016118d2565b838111156118f9576000848401525b50505050565b600081518084526119178160208601602086016118cf565b601f01601f19169290920160200192915050565b6001600160a01b038416815282602082015260606040820152600061195360608301846118ff565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561198557600080fd5b61198e83611887565b9150602083015167ffffffffffffffff808211156119ab57600080fd5b818501915085601f8301126119bf57600080fd5b8151818111156119d1576119d161195c565b604051601f8201601f19908116603f011681019083821181831017156119f9576119f961195c565b81604052828152886020848701011115611a1257600080fd5b611a238360208301602088016118cf565b80955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611a6257611a62611a32565b500290565b600082611a8457634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611a9c57611a9c611a32565b500190565b80516dffffffffffffffffffffffffffff81168114610c3f57600080fd5b600080600060608486031215611ad457600080fd5b611add84611aa1565b9250611aeb60208501611aa1565b9150604084015163ffffffff81168114611b0457600080fd5b809150509250925092565b8481528360208201526001600160a01b0383166040820152608060608201526000610ea460808301846118ff565b600082821015611b4f57611b4f611a32565b500390565b60008251611b668184602087016118cf565b9190910192915050565b60208152600061169b60208301846118ff56fea2646970667358221220c378d65d0418782084b1fda9073f6fdc057b5fb50be505dfebae7709d496d41d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639d54b5241161008c578063d28cd38a11610066578063d28cd38a146101f5578063da09c72c146101fd578063eded3fda14610210578063fa610c171461021857600080fd5b80639d54b524146101b3578063b88a802f146101da578063bf4d14d5146101e257600080fd5b80633b8ae397116100c85780633b8ae397146101645780635c72f4b5146101775780637d8820971461018a5780639291d563146101a057600080fd5b8063026879dc146100ef57806311ff5fff1461013357806328495daa1461013d575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b61022b565b005b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61013b610172366004611838565b6103cd565b61013b610185366004611855565b6104c9565b61019261052c565b60405190815260200161012a565b61013b6101ae366004611838565b6105fa565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61013b6106f3565b6101926101f0366004611855565b610957565b610192610c44565b600054610116906001600160a01b031681565b610192610cea565b600154610116906001600160a01b031681565b6000546001600160a01b0316331461027e5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526103ca907f00000000000000000000000000000000000000000000000000000000000000009060009073f42ae1d54fd613c9bb14810b0588faaa09a426ca906370a0823190602401602060405180830381865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610343919061186e565b60405160240161035591815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167fef8c5994000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b50565b6000546001600160a01b0316331461041b5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b6044820152606401610275565b6001546001600160a01b03161561049a5760405162461bcd60e51b815260206004820152602260248201527f476d7850726f78793a3a537472617465677920616c726561647920646566696e60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610275565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146105235760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c79537472617465677900000000000000000000006044820152606401610275565b6103ca81610eae565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906310c1c103906024015b602060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f5919061186e565b905090565b6000546001600160a01b031633146106485760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b6044820152606401610275565b6001600160a01b0381166106c45760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c696420646576206164647265737320707260448201527f6f766964656400000000000000000000000000000000000000000000000000006064820152608401610275565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461074d5760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c79537472617465677900000000000000000000006044820152606401610275565b604051600060248201819052604482018190526001606483018190526084830181905260a4830181905260c483015260e48201819052610823917f000000000000000000000000000000000000000000000000000000000000000091906101040160408051601f198184030181529190526020810180516001600160e01b03167f30b70002000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000907382af49447d8a07e3bd95bd0d56f35241523fbab1906370a0823190602401602060405180830381865afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c3919061186e565b60405133602482015260448101829052909150610953907382af49447d8a07e3bd95bd0d56f35241523fbab1906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b5050565b6001546000906001600160a01b031633146109b45760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c79537472617465677900000000000000000000006044820152606401610275565b60006109bf83610ee3565b90506000816109e25773ff970a61a04b1ca14834a43f5de4533ebddb5cc86109f8565b7382af49447d8a07e3bd95bd0d56f35241523fbab15b905081610a0d57610a0884611242565b610a0f565b835b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529195509082169063a9059cbb906044016020604051808303816000875af1158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190611897565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260448101859052610b6190829060009060640160408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b506040516001600160a01b0382166024820152604481018590526000606482018190526084820181905290610c2c907f000000000000000000000000000000000000000000000000000000000000000090839060a40160408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610dd7565b9050610c398160006112bf565b93505050505b919050565b6040517ff5d9d63e0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273f42ae1d54fd613c9bb14810b0588faaa09a426ca60248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f5d9d63e906044016105b4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e91906118b2565b6040517f402914f50000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091169063402914f5906024016105b4565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401610e0c9392919061192b565b6000604051808303816000875af1158015610e2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e539190810190611972565b9150915081610ea45760405162461bcd60e51b815260206004820152601c60248201527f476d7850726f78793a3a7361666545786563757465206661696c6564000000006044820152606401610275565b9695505050505050565b6040513360248201526044810182905261095390735402b5f40310bded796c7d0f3ff6683f5c0cffdf906000906064016108f7565b6040517f81a612d60000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab1600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381a612d690602401602060405180830381865afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d919061186e565b905060006c0c9f2c9cd04674edea40000000610fb98386611a48565b610fc39190611a67565b6040517f42152873000000000000000000000000000000000000000000000000000000008152600481018290527382af49447d8a07e3bd95bd0d56f35241523fbab160248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301529192507f000000000000000000000000000000000000000000000000000000000000000090911690634215287390606401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac919061186e565b6040517f1aa4ace50000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab160048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631aa4ace590602401602060405180830381865afa158015611143573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611167919061186e565b6040517fad1e4f8d0000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab160048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ad1e4f8d90602401602060405180830381865afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611222919061186e565b9050801580610ea45750806112378484611a89565b109695505050505050565b60006112b9827382af49447d8a07e3bd95bd0d56f35241523fbab173ff970a61a04b1ca14834a43f5de4533ebddb5cc87f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611325565b92915050565b60006112cc826020611a89565b8351101561131c5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610275565b50016020015190565b60008061133286866114c2565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a9190611abf565b5091509150876001600160a01b0316836001600160a01b0316146113ba57905b6000806113e98b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a6114f3565b9050896001600160a01b0316856001600160a01b03161461140657905b61141a6001600160a01b038b16898d61154d565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f906114729085908590309060248101611b0f565b600060405180830381600087803b15801561148c57600080fd5b505af11580156114a0573d6000803e3d6000fd5b505050508181116114b157816114b3565b805b9b9a5050505050505050505050565b600080826001600160a01b0316846001600160a01b0316106114e55782846114e8565b83835b915091509250929050565b60008061150283612710611b3d565b61150c9087611a48565b9050600061151a8583611a48565b905060008261152b61271089611a48565b6115359190611a89565b90506115418183611a67565b98975050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261159f9084906115a4565b505050565b60006115f9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116899092919063ffffffff16565b80519091501561159f57808060200190518101906116179190611897565b61159f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610275565b606061169884846000856116a2565b90505b9392505050565b60608247101561171a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610275565b6001600160a01b0385163b6117715760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610275565b600080866001600160a01b0316858760405161178d9190611b54565b60006040518083038185875af1925050503d80600081146117ca576040519150601f19603f3d011682016040523d82523d6000602084013e6117cf565b606091505b50915091506117df8282866117ea565b979650505050505050565b606083156117f957508161169b565b8251156118095782518084602001fd5b8160405162461bcd60e51b81526004016102759190611b70565b6001600160a01b03811681146103ca57600080fd5b60006020828403121561184a57600080fd5b813561169b81611823565b60006020828403121561186757600080fd5b5035919050565b60006020828403121561188057600080fd5b5051919050565b80518015158114610c3f57600080fd5b6000602082840312156118a957600080fd5b61169b82611887565b6000602082840312156118c457600080fd5b815161169b81611823565b60005b838110156118ea5781810151838201526020016118d2565b838111156118f9576000848401525b50505050565b600081518084526119178160208601602086016118cf565b601f01601f19169290920160200192915050565b6001600160a01b038416815282602082015260606040820152600061195360608301846118ff565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561198557600080fd5b61198e83611887565b9150602083015167ffffffffffffffff808211156119ab57600080fd5b818501915085601f8301126119bf57600080fd5b8151818111156119d1576119d161195c565b604051601f8201601f19908116603f011681019083821181831017156119f9576119f961195c565b81604052828152886020848701011115611a1257600080fd5b611a238360208301602088016118cf565b80955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611a6257611a62611a32565b500290565b600082611a8457634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611a9c57611a9c611a32565b500190565b80516dffffffffffffffffffffffffffff81168114610c3f57600080fd5b600080600060608486031215611ad457600080fd5b611add84611aa1565b9250611aeb60208501611aa1565b9150604084015163ffffffff81168114611b0457600080fd5b809150509250925092565b8481528360208201526001600160a01b0383166040820152608060608201526000610ea460808301846118ff565b600082821015611b4f57611b4f611a32565b500390565b60008251611b668184602087016118cf565b9190910192915050565b60208152600061169b60208301846118ff56fea2646970667358221220c378d65d0418782084b1fda9073f6fdc057b5fb50be505dfebae7709d496d41d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14428,
        "contract": "contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol:GmxProxyArbitrum",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14430,
        "contract": "contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol:GmxProxyArbitrum",
        "label": "approvedStrategy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}