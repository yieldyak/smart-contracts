{
  "address": "0x2fCc7eB22CF6fdc19636F1Fd8551187FB68B61Bd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pendleRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pendleGaugeController",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_boostFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_boostFeeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "getRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PendleProxy.Reward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendleGaugeController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendleRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boostFeeBips",
          "type": "uint256"
        }
      ],
      "name": "updateBoostFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "contract IPendleVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2bd1778197d1363f400652f30e49914b9b278130e621084410599a9158251e9",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x2fCc7eB22CF6fdc19636F1Fd8551187FB68B61Bd",
    "transactionIndex": 1,
    "gasUsed": "2001517",
    "logsBloom": "0x
    "blockHash": "0x67a81a9c7f0609eaec1173a4fa0baf36850e2160d0e8e6eea9dff77aec878bcd",
    "transactionHash": "0xe2bd1778197d1363f400652f30e49914b9b278130e621084410599a9158251e9",
    "logs": [],
    "blockNumber": 206949179,
    "cumulativeGasUsed": "2001517",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3f7868787509c47676242613B6234317911A31b5",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0x00000000005BBB0EF59571E58418F9a4357b68A0",
    "0x1e56299EbC8A1010cEc26005d12e3e5c5cC2db00",
    "0",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "f412761b7a37aa01bde16a0798e6fe80",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleGaugeController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boostFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_boostFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PendleProxy.Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendleGaugeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendleRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostFeeBips\",\"type\":\"uint256\"}],\"name\":\"updateBoostFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IPendleVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveStrategy(address)\":{\"details\":\"Very sensitive, restricted to devAddrCan only be set once per deposit token (reported by the strategy)\",\"params\":{\"_strategy\":\"address\"}},\"updateBoostFee(uint256)\":{\"params\":{\"_boostFeeBips\":\"Boost fee bips, check BIPS_DIVISOR\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveStrategy(address)\":{\"notice\":\"Add an approved strategy\"},\"updateBoostFee(uint256)\":{\"notice\":\"Update optional boost fee settins\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/crosschain/pendle/PendleProxy.sol\":\"PendleProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IYakStrategy {\\n    function depositToken() external view returns (address);\\n\\n    function depositFor(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf708acb7d65bf39a9d7ed9a14cd296f7b1a9152050c688475c8cc968e07e6e70\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/pendle/PendleProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../../../interfaces/IYakStrategy.sol\\\";\\nimport \\\"./../../../interfaces/IERC20.sol\\\";\\nimport \\\"./../../../lib/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPendleVoter.sol\\\";\\nimport \\\"./interfaces/IPendleRouter.sol\\\";\\nimport \\\"./interfaces/IPendleMarketLP.sol\\\";\\nimport \\\"./interfaces/IPendleGaugeController.sol\\\";\\nimport \\\"./lib/PMath.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(IPendleVoter voter, address target, uint256 value, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returnValue) = voter.execute(target, value, data);\\n        if (!success) revert(\\\"PendleProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\ncontract PendleProxy {\\n    using SafeProxy for IPendleVoter;\\n    using SafeERC20 for IERC20;\\n    using PMath for uint256;\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint128 internal constant INITIAL_REWARD_INDEX = 1;\\n\\n    address internal immutable PENDLE;\\n\\n    address public devAddr;\\n    IPendleVoter public immutable voter;\\n    address public immutable pendleRouter;\\n    address public immutable pendleGaugeController;\\n\\n    // deposit token => strategy\\n    mapping(address => address) public approvedStrategies;\\n    uint256 boostFeeBips;\\n    address boostFeeReceiver;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"PendleProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy(address _depositToken) {\\n        require(approvedStrategies[_depositToken] == msg.sender, \\\"PendleProxy::onlyStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _voter,\\n        address _devAddr,\\n        address _pendleRouter,\\n        address _pendleGaugeController,\\n        uint256 _boostFeeBips,\\n        address _boostFeeReceiver\\n    ) {\\n        require(_devAddr > address(0), \\\"PendleProxy::Invalid dev address provided\\\");\\n        devAddr = _devAddr;\\n        voter = IPendleVoter(_voter);\\n        pendleRouter = _pendleRouter;\\n        boostFeeBips = _boostFeeBips;\\n        boostFeeReceiver = _boostFeeReceiver;\\n        PENDLE = IPendleGaugeController(_pendleGaugeController).pendle();\\n        pendleGaugeController = _pendleGaugeController;\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) external onlyDev {\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Add an approved strategy\\n     * @dev Very sensitive, restricted to devAddr\\n     * @dev Can only be set once per deposit token (reported by the strategy)\\n     * @param _strategy address\\n     */\\n    function approveStrategy(address _strategy) public onlyDev {\\n        address depositToken = IYakStrategy(_strategy).depositToken();\\n        require(approvedStrategies[depositToken] == address(0), \\\"PendleProxy::Strategy for deposit token already added\\\");\\n        approvedStrategies[depositToken] = _strategy;\\n    }\\n\\n    /**\\n     * @notice Update optional boost fee settins\\n     * @param _boostFeeBips Boost fee bips, check BIPS_DIVISOR\\n     */\\n    function updateBoostFee(uint256 _boostFeeBips) external onlyDev {\\n        require(_boostFeeBips < BIPS_DIVISOR, \\\"PendleProxy::Invalid boost fee\\\");\\n        boostFeeBips = _boostFeeBips;\\n    }\\n\\n    function depositToStakingContract(address _market, uint256 _amount) external onlyStrategy(_market) {\\n        IERC20(_market).safeTransferFrom(msg.sender, address(voter), _amount);\\n    }\\n\\n    function withdrawFromStakingContract(address _market, uint256 _amount) external onlyStrategy(_market) {\\n        voter.safeExecute(_market, 0, abi.encodeWithSelector(IERC20.transfer.selector, msg.sender, _amount));\\n    }\\n\\n    function pendingRewards(address _market) public view returns (Reward[] memory) {\\n        address[] memory rewardTokens = IPendleMarketLP(_market).getRewardTokens();\\n        Reward[] memory rewards = new Reward[](rewardTokens.length);\\n        if (rewardTokens.length == 0) return rewards;\\n\\n        uint256 totalShares = IPendleMarketLP(_market).totalActiveSupply();\\n\\n        for (uint256 i = 0; i < rewardTokens.length; ++i) {\\n            address token = rewardTokens[i];\\n            (uint256 index, uint256 lastBalance) = IPendleMarketLP(_market).rewardState(token);\\n            uint256 totalAccrued = IERC20(token).balanceOf(_market) - lastBalance;\\n            if (token == PENDLE) {\\n                totalAccrued += _getUpdatedMarketReward(_market);\\n            }\\n\\n            if (index == 0) index = INITIAL_REWARD_INDEX;\\n            if (totalShares != 0) index += totalAccrued.divDown(totalShares);\\n\\n            (uint128 userIndex, uint128 accrued) = IPendleMarketLP(_market).userReward(token, address(voter));\\n\\n            if (userIndex == 0) {\\n                userIndex = INITIAL_REWARD_INDEX;\\n            }\\n            if (userIndex == index) {\\n                rewards[i] = Reward({reward: token, amount: 0});\\n            } else {\\n                uint256 userShares = IPendleMarketLP(_market).activeBalance(address(voter));\\n                uint256 deltaIndex = index - userIndex;\\n                uint256 rewardDelta = userShares.mulDown(deltaIndex);\\n                uint256 rewardAccrued = accrued + rewardDelta;\\n\\n                rewards[i] = Reward({reward: token, amount: rewardAccrued - _calculateBoostFee(token, rewardAccrued)});\\n            }\\n        }\\n        return rewards;\\n    }\\n\\n    function _getUpdatedMarketReward(address _market) internal view returns (uint256 marketPendingPendle) {\\n        IPendleGaugeController.MarketRewardData memory rwd =\\n            IPendleGaugeController(pendleGaugeController).rewardData(_market);\\n        uint128 newLastUpdated = uint128(PMath.min(uint128(block.timestamp), rwd.incentiveEndsAt));\\n        return rwd.accumulatedPendle + (rwd.pendlePerSec * (newLastUpdated - rwd.lastUpdated));\\n    }\\n\\n    function getRewards(address _market) public onlyStrategy(_market) {\\n        voter.safeExecute(_market, 0, abi.encodeWithSelector(IPendleMarketLP.redeemRewards.selector, address(voter)));\\n        address[] memory rewardTokens = IPendleMarketLP(_market).getRewardTokens();\\n        for (uint256 i; i < rewardTokens.length; i++) {\\n            uint256 amount = IERC20(rewardTokens[i]).balanceOf(address(voter));\\n\\n            uint256 boostFee = _calculateBoostFee(rewardTokens[i], amount);\\n            if (rewardTokens[i] == PENDLE) {\\n                voter.safeExecute(\\n                    rewardTokens[i], 0, abi.encodeWithSelector(IERC20.transfer.selector, boostFeeReceiver, boostFee)\\n                );\\n            }\\n\\n            voter.safeExecute(\\n                rewardTokens[i], 0, abi.encodeWithSelector(IERC20.transfer.selector, msg.sender, amount - boostFee)\\n            );\\n        }\\n    }\\n\\n    function _calculateBoostFee(address _token, uint256 _amount) internal view returns (uint256 boostFee) {\\n        if (_token == PENDLE) {\\n            return (_amount * boostFeeBips) / BIPS_DIVISOR;\\n        }\\n    }\\n\\n    function totalDeposits(address _market) external view returns (uint256) {\\n        return IERC20(_market).balanceOf(address(voter));\\n    }\\n\\n    function emergencyWithdraw(address _market) external onlyStrategy(_market) {\\n        voter.safeExecute(\\n            _market,\\n            0,\\n            abi.encodeWithSelector(IERC20.transfer.selector, msg.sender, IERC20(_market).balanceOf(address(voter)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x29ab46e8e70625ac8d24e512466ba04440d90f267732b4b0f79eca75ddb175ad\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/pendle/interfaces/IPendleGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPendleGaugeController {\\n    struct MarketRewardData {\\n        uint128 pendlePerSec;\\n        uint128 accumulatedPendle;\\n        uint128 lastUpdated;\\n        uint128 incentiveEndsAt;\\n    }\\n\\n    function rewardData(address market) external view returns (MarketRewardData memory);\\n    function pendle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4c5ff1ced640c8b3e19fb0249ed6572c055727d8d0ba59335029f748fb3cfac1\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/pendle/interfaces/IPendleMarketLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPendleMarketLP {\\n    function readTokens() external view returns (address sy, address pt, address yt);\\n    function userReward(address token, address user) external view returns (uint128 userIndex, uint128 rewardAccrued);\\n    function totalActiveSupply() external view returns (uint256);\\n    function activeBalance(address user) external view returns (uint256);\\n    function rewardState(address token) external view returns (uint128 index, uint128 lastBalance);\\n    function getRewardTokens() external view returns (address[] memory);\\n    function redeemRewards(address user) external;\\n}\\n\",\"keccak256\":\"0x3b3b2b29409131eeeb0d40dfca2749e7c74aa70b30b5b1d23af6d9b6d90e0d4a\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/pendle/interfaces/IPendleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPendleRouter {\\n    struct TokenInput {\\n        // TOKEN DATA\\n        address tokenIn;\\n        uint256 netTokenIn;\\n        address tokenMintSy;\\n        // AGGREGATOR DATA\\n        address pendleSwap;\\n        SwapData swapData;\\n    }\\n\\n    struct SwapData {\\n        SwapType swapType;\\n        address extRouter;\\n        bytes extCalldata;\\n        bool needScale;\\n    }\\n\\n    enum SwapType {\\n        NONE,\\n        KYBERSWAP,\\n        ONE_INCH,\\n        // ETH_WETH not used in Aggregator\\n        ETH_WETH\\n    }\\n\\n    enum OrderType {\\n        SY_FOR_PT,\\n        PT_FOR_SY,\\n        SY_FOR_YT,\\n        YT_FOR_SY\\n    }\\n\\n    struct Order {\\n        uint256 salt;\\n        uint256 expiry;\\n        uint256 nonce;\\n        OrderType orderType;\\n        address token;\\n        address YT;\\n        address maker;\\n        address receiver;\\n        uint256 makingAmount;\\n        uint256 lnImpliedRate;\\n        uint256 failSafeRate;\\n        bytes permit;\\n    }\\n\\n    struct FillOrderParams {\\n        Order order;\\n        bytes signature;\\n        uint256 makingAmount;\\n    }\\n\\n    struct ApproxParams {\\n        uint256 guessMin;\\n        uint256 guessMax;\\n        uint256 guessOffchain; // pass 0 iMn to skip this variable\\n        uint256 maxIteration; // every iteration, the diff between guessMin and guessMax will be divided by 2\\n        uint256 eps; // the max eps between the returned result & the correct result, base 1e18. Normally this number will be set\\n            // to 1e15 (1e18/1000 = 0.1%)\\n    }\\n\\n    struct LimitOrderData {\\n        address limitRouter;\\n        uint256 epsSkipMarket; // only used for swap operations, will be ignored otherwise\\n        FillOrderParams[] normalFills;\\n        FillOrderParams[] flashFills;\\n        bytes optData;\\n    }\\n\\n    function addLiquiditySingleToken(\\n        address receiver,\\n        address market,\\n        uint256 minLpOut,\\n        ApproxParams calldata guessPtReceivedFromSy,\\n        TokenInput calldata input,\\n        LimitOrderData calldata limit\\n    ) external payable returns (uint256 netLpOut, uint256 netSyFee, uint256 netSyInterm);\\n\\n    function redeemDueInterestAndRewards(\\n        address user,\\n        address[] memory sys,\\n        address[] memory yts,\\n        address[] memory markets\\n    ) external;\\n}\\n\",\"keccak256\":\"0x80aa14cb3bcc6f5261242e7aa5ce9ca59e9261a6917d45ea66cb5b821a834cf8\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/pendle/interfaces/IPendleVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPendleVoter {\\n    function execute(address to, uint256 value, bytes calldata data) external returns (bool, bytes memory);\\n\\n    function setProxy(address _proxy) external;\\n}\\n\",\"keccak256\":\"0xc20a1a339f4d38176e0a358d9fa413e3a05192df6fde75740c4f5569a89fff5d\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/pendle/lib/PMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable private-vars-leading-underscore, reason-string */\\n\\nlibrary PMath {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    int256 internal constant IONE = 1e18; // 18 decimal places\\n\\n    function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >= b ? a - b : 0);\\n        }\\n    }\\n\\n    function subNoNeg(int256 a, int256 b) internal pure returns (int256) {\\n        require(a >= b, \\\"negative\\\");\\n        return a - b; // no unchecked since if b is very negative, a - b might overflow\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        unchecked {\\n            return product / ONE;\\n        }\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        unchecked {\\n            return product / IONE;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 aInflated = a * ONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 aInflated = a * IONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function rawDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    // @author Uniswap\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function square(uint256 x) internal pure returns (uint256) {\\n        return x * x;\\n    }\\n\\n    function squareDown(uint256 x) internal pure returns (uint256) {\\n        return mulDown(x, x);\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x > 0 ? x : -x);\\n    }\\n\\n    function neg(int256 x) internal pure returns (int256) {\\n        return x * (-1);\\n    }\\n\\n    function neg(uint256 x) internal pure returns (int256) {\\n        return Int(x) * (-1);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               SIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Int(uint256 x) internal pure returns (int256) {\\n        require(x <= uint256(type(int256).max));\\n        return int256(x);\\n    }\\n\\n    function Int128(int256 x) internal pure returns (int128) {\\n        require(type(int128).min <= x && x <= type(int128).max);\\n        return int128(x);\\n    }\\n\\n    function Int128(uint256 x) internal pure returns (int128) {\\n        return Int128(Int(x));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               UNSIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Uint(int256 x) internal pure returns (uint256) {\\n        require(x >= 0);\\n        return uint256(x);\\n    }\\n\\n    function Uint32(uint256 x) internal pure returns (uint32) {\\n        require(x <= type(uint32).max);\\n        return uint32(x);\\n    }\\n\\n    function Uint64(uint256 x) internal pure returns (uint64) {\\n        require(x <= type(uint64).max);\\n        return uint64(x);\\n    }\\n\\n    function Uint112(uint256 x) internal pure returns (uint112) {\\n        require(x <= type(uint112).max);\\n        return uint112(x);\\n    }\\n\\n    function Uint96(uint256 x) internal pure returns (uint96) {\\n        require(x <= type(uint96).max);\\n        return uint96(x);\\n    }\\n\\n    function Uint128(uint256 x) internal pure returns (uint128) {\\n        require(x <= type(uint128).max);\\n        return uint128(x);\\n    }\\n\\n    function Uint192(uint256 x) internal pure returns (uint192) {\\n        require(x <= type(uint192).max);\\n        return uint192(x);\\n    }\\n\\n    function isAApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return mulDown(b, ONE - eps) <= a && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isAGreaterApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a >= b && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isASmallerApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a <= b && a >= mulDown(b, ONE - eps);\\n    }\\n}\\n\",\"keccak256\":\"0x22d2a1e684ea9fe01ad81fd316a721a9ed51f8d93b4889546f612541d2d0f6e8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001f7638038062001f76833981016040819052620000359162000185565b6001600160a01b038516620000a25760405162461bcd60e51b815260206004820152602960248201527f50656e646c6550726f78793a3a496e76616c6964206465762061646472657373604482015268081c1c9bdd9a59195960ba1b606482015260840160405180910390fd5b600080546001600160a01b038088166001600160a01b03199283161790925587821660a05285821660c052600284905560038054848416921691909117905560408051635162986d60e11b815290519185169163a2c530da916004808201926020929091908290030181865afa15801562000121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001479190620001fd565b6001600160a01b039081166080529290921660e05250620002229350505050565b80516001600160a01b03811681146200018057600080fd5b919050565b60008060008060008060c087890312156200019f57600080fd5b620001aa8762000168565b9550620001ba6020880162000168565b9450620001ca6040880162000168565b9350620001da6060880162000168565b925060808701519150620001f160a0880162000168565b90509295509295509295565b6000602082840312156200021057600080fd5b6200021b8262000168565b9392505050565b60805160a05160c05160e051611ccd620002a9600039600081816101e0015261121001526000610109015260008181610180015281816103050152818161065c0152818161076e01528181610aa501528181610bb201528181610c5201528181610d5701526110ce0152600081816105ad01528181610df6015261132e0152611ccd6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637d5ee5391161008c5780639291d563116100665780639291d56314610215578063c613aec014610228578063da09c72c14610251578063e94032561461026457600080fd5b80637d5ee539146101c857806387daa8c5146101db578063905797f61461020257600080fd5b80633b8ae397116100c85780633b8ae3971461016857806346c96aac1461017b5780636ff1c9bc146101a257806379ee54f7146101b557600080fd5b806318027a1e146100ef578063206aeab31461010457806331d7a26214610148575b600080fd5b6101026100fd36600461170b565b610285565b005b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61015b610156366004611737565b61032f565b60405161013f9190611754565b610102610176366004611737565b610897565b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b6101026101b0366004611737565b610a23565b6101026101c3366004611737565b610bda565b6101026101d636600461170b565b610ee9565b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b6101026102103660046117ac565b610f7e565b610102610223366004611737565b61102e565b61012b610236366004611737565b6001602052600090815260409020546001600160a01b031681565b60005461012b906001600160a01b031681565b610277610272366004611737565b6110b7565b60405190815260200161013f565b6001600160a01b0380831660009081526001602052604090205483911633146102f55760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064015b60405180910390fd5b61032a6001600160a01b038416337f00000000000000000000000000000000000000000000000000000000000000008561114b565b505050565b60606000826001600160a01b031663c4f59f9b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610371573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610399919081019061180c565b90506000815167ffffffffffffffff8111156103b7576103b76117c5565b6040519080825280602002602001820160405280156103fc57816020015b60408051808201909152600080825260208201528152602001906001900390816103d55790505b509050815160000361040f579392505050565b6000846001600160a01b031663720692646040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047391906118be565b905060005b835181101561088d576000848281518110610495576104956118d7565b60200260200101519050600080886001600160a01b031663ea64a820846040518263ffffffff1660e01b81526004016104dd91906001600160a01b0391909116815260200190565b6040805180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611909565b6040516370a0823160e01b81526001600160a01b038c811660048301526001600160801b03938416955091909216925060009183918616906370a0823190602401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906118be565b6105a99190611952565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316036105fa576105ed8a6111d3565b6105f79082611969565b90505b8260000361060757600192505b85156106245761061781876112dd565b6106219084611969565b92505b6040517f5cbadbe40000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260009182918d1690635cbadbe4906044016040805180830381865afa1580156106af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d39190611909565b91509150816001600160801b03166000036106ed57600191505b84826001600160801b03160361073e576040518060400160405280876001600160a01b03168152602001600081525089888151811061072e5761072e6118d7565b6020026020010181905250610876565b6040517f0892cd8b0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600091908e1690630892cd8b90602401602060405180830381865afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e591906118be565b905060006107fc6001600160801b03851688611952565b9050600061080a838361130c565b90506000610821826001600160801b038716611969565b905060405180604001604052808b6001600160a01b031681526020016108478c8461132a565b6108519084611952565b8152508d8c81518110610866576108666118d7565b6020026020010181905250505050505b5050505050508061088690611981565b9050610478565b5090949350505050565b6000546001600160a01b031633146108f15760405162461bcd60e51b815260206004820152601460248201527f50656e646c6550726f78793a3a6f6e6c7944657600000000000000000000000060448201526064016102ec565b6000816001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610955919061199a565b6001600160a01b0380821660009081526001602052604090205491925016156109e65760405162461bcd60e51b815260206004820152603560248201527f50656e646c6550726f78793a3a537472617465677920666f72206465706f736960448201527f7420746f6b656e20616c7265616479206164646564000000000000000000000060648201526084016102ec565b6001600160a01b03908116600090815260016020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b6001600160a01b038082166000908152600160205260409020548291163314610a8e5760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064016102ec565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015261032a91849160009163a9059cbb60e01b913391908516906370a0823190602401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d91906118be565b6040516001600160a01b03909216602483015260448201526064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611387565b6001600160a01b038082166000908152600160205260409020548291163314610c455760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064016102ec565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152610caa9083906000907f9262187b0000000000000000000000000000000000000000000000000000000090604401610b49565b506000826001600160a01b031663c4f59f9b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ceb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d13919081019061180c565b905060005b8151811015610ee3576000828281518110610d3557610d356118d7565b60209081029190910101516040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116906370a0823190602401602060405180830381865afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb91906118be565b90506000610df2848481518110610de457610de46118d7565b60200260200101518361132a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848481518110610e3057610e306118d7565b60200260200101516001600160a01b031603610e9957610e97848481518110610e5b57610e5b6118d7565b60209081029190910101516003546040516001600160a01b0390911660248201526044810184905260009063a9059cbb60e01b90606401610b49565b505b610ecd848481518110610eae57610eae6118d7565b6020026020010151600063a9059cbb60e01b338587610b2d9190611952565b5050508080610edb90611981565b915050610d18565b50505050565b6001600160a01b038083166000908152600160205260409020548391163314610f545760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064016102ec565b60405133602482015260448101839052610ee390849060009063a9059cbb60e01b90606401610b49565b6000546001600160a01b03163314610fd85760405162461bcd60e51b815260206004820152601460248201527f50656e646c6550726f78793a3a6f6e6c7944657600000000000000000000000060448201526064016102ec565b61271081106110295760405162461bcd60e51b815260206004820152601e60248201527f50656e646c6550726f78793a3a496e76616c696420626f6f737420666565000060448201526064016102ec565b600255565b6000546001600160a01b031633146110885760405162461bcd60e51b815260206004820152601460248201527f50656e646c6550726f78793a3a6f6e6c7944657600000000000000000000000060448201526064016102ec565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600091908316906370a0823190602401602060405180830381865afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114591906118be565b92915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610ee390859061145e565b6040517f48e5d9f80000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906348e5d9f890602401608060405180830381865afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b91906119b7565b9050600061129f426001600160801b031683606001516001600160801b0316611543565b90508160400151816112b19190611a34565b82516112bd9190611a5c565b82602001516112cc9190611a8b565b6001600160801b0316949350505050565b6000806112f2670de0b6b3a764000085611ab6565b905082818161130357611303611ad5565b04949350505050565b6000806113198385611ab6565b9050670de0b6b3a764000081611303565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361114557612710600254836113769190611ab6565b6113809190611aeb565b9050611145565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b81526004016113bc93929190611b65565b6000604051808303816000875af11580156113db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114039190810190611ba6565b91509150816114545760405162461bcd60e51b815260206004820152601f60248201527f50656e646c6550726f78793a3a7361666545786563757465206661696c65640060448201526064016102ec565b9695505050505050565b60006114b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661155b9092919063ffffffff16565b80519091501561032a57808060200190518101906114d19190611c4d565b61032a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ec565b60008183106115525781611554565b825b9392505050565b606061156a8484600085611572565b949350505050565b6060824710156115ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ec565b6001600160a01b0385163b6116415760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ec565b600080866001600160a01b0316858760405161165d9190611c68565b60006040518083038185875af1925050503d806000811461169a576040519150601f19603f3d011682016040523d82523d6000602084013e61169f565b606091505b50915091506116af8282866116ba565b979650505050505050565b606083156116c9575081611554565b8251156116d95782518084602001fd5b8160405162461bcd60e51b81526004016102ec9190611c84565b6001600160a01b038116811461170857600080fd5b50565b6000806040838503121561171e57600080fd5b8235611729816116f3565b946020939093013593505050565b60006020828403121561174957600080fd5b8135611554816116f3565b602080825282518282018190526000919060409081850190868401855b8281101561179f57815180516001600160a01b03168552860151868501529284019290850190600101611771565b5091979650505050505050565b6000602082840312156117be57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611804576118046117c5565b604052919050565b6000602080838503121561181f57600080fd5b825167ffffffffffffffff8082111561183757600080fd5b818501915085601f83011261184b57600080fd5b81518181111561185d5761185d6117c5565b8060051b915061186e8483016117db565b818152918301840191848101908884111561188857600080fd5b938501935b838510156118b257845192506118a2836116f3565b828252938501939085019061188d565b98975050505050505050565b6000602082840312156118d057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b80516001600160801b038116811461190457600080fd5b919050565b6000806040838503121561191c57600080fd5b611925836118ed565b9150611933602084016118ed565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b6000828210156119645761196461193c565b500390565b6000821982111561197c5761197c61193c565b500190565b6000600182016119935761199361193c565b5060010190565b6000602082840312156119ac57600080fd5b8151611554816116f3565b6000608082840312156119c957600080fd5b6040516080810181811067ffffffffffffffff821117156119ec576119ec6117c5565b6040526119f8836118ed565b8152611a06602084016118ed565b6020820152611a17604084016118ed565b6040820152611a28606084016118ed565b60608201529392505050565b60006001600160801b0383811690831681811015611a5457611a5461193c565b039392505050565b60006001600160801b0380831681851681830481118215151615611a8257611a8261193c565b02949350505050565b60006001600160801b03808316818516808303821115611aad57611aad61193c565b01949350505050565b6000816000190483118215151615611ad057611ad061193c565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611b0857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611b28578181015183820152602001611b10565b83811115610ee35750506000910152565b60008151808452611b51816020860160208601611b0d565b601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201526000611b8d6060830184611b39565b95945050505050565b8051801515811461190457600080fd5b60008060408385031215611bb957600080fd5b611bc283611b96565b9150602083015167ffffffffffffffff80821115611bdf57600080fd5b818501915085601f830112611bf357600080fd5b815181811115611c0557611c056117c5565b611c18601f8201601f19166020016117db565b9150808252866020828501011115611c2f57600080fd5b611c40816020840160208601611b0d565b5080925050509250929050565b600060208284031215611c5f57600080fd5b61155482611b96565b60008251611c7a818460208701611b0d565b9190910192915050565b6020815260006115546020830184611b3956fea2646970667358221220a8fc4d4095c019044b99f8898d92b5857fab3a1ac66087057be28ec5584d5d5364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637d5ee5391161008c5780639291d563116100665780639291d56314610215578063c613aec014610228578063da09c72c14610251578063e94032561461026457600080fd5b80637d5ee539146101c857806387daa8c5146101db578063905797f61461020257600080fd5b80633b8ae397116100c85780633b8ae3971461016857806346c96aac1461017b5780636ff1c9bc146101a257806379ee54f7146101b557600080fd5b806318027a1e146100ef578063206aeab31461010457806331d7a26214610148575b600080fd5b6101026100fd36600461170b565b610285565b005b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61015b610156366004611737565b61032f565b60405161013f9190611754565b610102610176366004611737565b610897565b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b6101026101b0366004611737565b610a23565b6101026101c3366004611737565b610bda565b6101026101d636600461170b565b610ee9565b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b6101026102103660046117ac565b610f7e565b610102610223366004611737565b61102e565b61012b610236366004611737565b6001602052600090815260409020546001600160a01b031681565b60005461012b906001600160a01b031681565b610277610272366004611737565b6110b7565b60405190815260200161013f565b6001600160a01b0380831660009081526001602052604090205483911633146102f55760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064015b60405180910390fd5b61032a6001600160a01b038416337f00000000000000000000000000000000000000000000000000000000000000008561114b565b505050565b60606000826001600160a01b031663c4f59f9b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610371573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610399919081019061180c565b90506000815167ffffffffffffffff8111156103b7576103b76117c5565b6040519080825280602002602001820160405280156103fc57816020015b60408051808201909152600080825260208201528152602001906001900390816103d55790505b509050815160000361040f579392505050565b6000846001600160a01b031663720692646040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047391906118be565b905060005b835181101561088d576000848281518110610495576104956118d7565b60200260200101519050600080886001600160a01b031663ea64a820846040518263ffffffff1660e01b81526004016104dd91906001600160a01b0391909116815260200190565b6040805180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611909565b6040516370a0823160e01b81526001600160a01b038c811660048301526001600160801b03938416955091909216925060009183918616906370a0823190602401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906118be565b6105a99190611952565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316036105fa576105ed8a6111d3565b6105f79082611969565b90505b8260000361060757600192505b85156106245761061781876112dd565b6106219084611969565b92505b6040517f5cbadbe40000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260009182918d1690635cbadbe4906044016040805180830381865afa1580156106af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d39190611909565b91509150816001600160801b03166000036106ed57600191505b84826001600160801b03160361073e576040518060400160405280876001600160a01b03168152602001600081525089888151811061072e5761072e6118d7565b6020026020010181905250610876565b6040517f0892cd8b0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600091908e1690630892cd8b90602401602060405180830381865afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e591906118be565b905060006107fc6001600160801b03851688611952565b9050600061080a838361130c565b90506000610821826001600160801b038716611969565b905060405180604001604052808b6001600160a01b031681526020016108478c8461132a565b6108519084611952565b8152508d8c81518110610866576108666118d7565b6020026020010181905250505050505b5050505050508061088690611981565b9050610478565b5090949350505050565b6000546001600160a01b031633146108f15760405162461bcd60e51b815260206004820152601460248201527f50656e646c6550726f78793a3a6f6e6c7944657600000000000000000000000060448201526064016102ec565b6000816001600160a01b031663c89039c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610955919061199a565b6001600160a01b0380821660009081526001602052604090205491925016156109e65760405162461bcd60e51b815260206004820152603560248201527f50656e646c6550726f78793a3a537472617465677920666f72206465706f736960448201527f7420746f6b656e20616c7265616479206164646564000000000000000000000060648201526084016102ec565b6001600160a01b03908116600090815260016020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b6001600160a01b038082166000908152600160205260409020548291163314610a8e5760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064016102ec565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015261032a91849160009163a9059cbb60e01b913391908516906370a0823190602401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d91906118be565b6040516001600160a01b03909216602483015260448201526064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611387565b6001600160a01b038082166000908152600160205260409020548291163314610c455760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064016102ec565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152610caa9083906000907f9262187b0000000000000000000000000000000000000000000000000000000090604401610b49565b506000826001600160a01b031663c4f59f9b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ceb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d13919081019061180c565b905060005b8151811015610ee3576000828281518110610d3557610d356118d7565b60209081029190910101516040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116906370a0823190602401602060405180830381865afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb91906118be565b90506000610df2848481518110610de457610de46118d7565b60200260200101518361132a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848481518110610e3057610e306118d7565b60200260200101516001600160a01b031603610e9957610e97848481518110610e5b57610e5b6118d7565b60209081029190910101516003546040516001600160a01b0390911660248201526044810184905260009063a9059cbb60e01b90606401610b49565b505b610ecd848481518110610eae57610eae6118d7565b6020026020010151600063a9059cbb60e01b338587610b2d9190611952565b5050508080610edb90611981565b915050610d18565b50505050565b6001600160a01b038083166000908152600160205260409020548391163314610f545760405162461bcd60e51b815260206004820152601960248201527f50656e646c6550726f78793a3a6f6e6c7953747261746567790000000000000060448201526064016102ec565b60405133602482015260448101839052610ee390849060009063a9059cbb60e01b90606401610b49565b6000546001600160a01b03163314610fd85760405162461bcd60e51b815260206004820152601460248201527f50656e646c6550726f78793a3a6f6e6c7944657600000000000000000000000060448201526064016102ec565b61271081106110295760405162461bcd60e51b815260206004820152601e60248201527f50656e646c6550726f78793a3a496e76616c696420626f6f737420666565000060448201526064016102ec565b600255565b6000546001600160a01b031633146110885760405162461bcd60e51b815260206004820152601460248201527f50656e646c6550726f78793a3a6f6e6c7944657600000000000000000000000060448201526064016102ec565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600091908316906370a0823190602401602060405180830381865afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114591906118be565b92915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610ee390859061145e565b6040517f48e5d9f80000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906348e5d9f890602401608060405180830381865afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b91906119b7565b9050600061129f426001600160801b031683606001516001600160801b0316611543565b90508160400151816112b19190611a34565b82516112bd9190611a5c565b82602001516112cc9190611a8b565b6001600160801b0316949350505050565b6000806112f2670de0b6b3a764000085611ab6565b905082818161130357611303611ad5565b04949350505050565b6000806113198385611ab6565b9050670de0b6b3a764000081611303565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361114557612710600254836113769190611ab6565b6113809190611aeb565b9050611145565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b81526004016113bc93929190611b65565b6000604051808303816000875af11580156113db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114039190810190611ba6565b91509150816114545760405162461bcd60e51b815260206004820152601f60248201527f50656e646c6550726f78793a3a7361666545786563757465206661696c65640060448201526064016102ec565b9695505050505050565b60006114b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661155b9092919063ffffffff16565b80519091501561032a57808060200190518101906114d19190611c4d565b61032a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ec565b60008183106115525781611554565b825b9392505050565b606061156a8484600085611572565b949350505050565b6060824710156115ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ec565b6001600160a01b0385163b6116415760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ec565b600080866001600160a01b0316858760405161165d9190611c68565b60006040518083038185875af1925050503d806000811461169a576040519150601f19603f3d011682016040523d82523d6000602084013e61169f565b606091505b50915091506116af8282866116ba565b979650505050505050565b606083156116c9575081611554565b8251156116d95782518084602001fd5b8160405162461bcd60e51b81526004016102ec9190611c84565b6001600160a01b038116811461170857600080fd5b50565b6000806040838503121561171e57600080fd5b8235611729816116f3565b946020939093013593505050565b60006020828403121561174957600080fd5b8135611554816116f3565b602080825282518282018190526000919060409081850190868401855b8281101561179f57815180516001600160a01b03168552860151868501529284019290850190600101611771565b5091979650505050505050565b6000602082840312156117be57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611804576118046117c5565b604052919050565b6000602080838503121561181f57600080fd5b825167ffffffffffffffff8082111561183757600080fd5b818501915085601f83011261184b57600080fd5b81518181111561185d5761185d6117c5565b8060051b915061186e8483016117db565b818152918301840191848101908884111561188857600080fd5b938501935b838510156118b257845192506118a2836116f3565b828252938501939085019061188d565b98975050505050505050565b6000602082840312156118d057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b80516001600160801b038116811461190457600080fd5b919050565b6000806040838503121561191c57600080fd5b611925836118ed565b9150611933602084016118ed565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b6000828210156119645761196461193c565b500390565b6000821982111561197c5761197c61193c565b500190565b6000600182016119935761199361193c565b5060010190565b6000602082840312156119ac57600080fd5b8151611554816116f3565b6000608082840312156119c957600080fd5b6040516080810181811067ffffffffffffffff821117156119ec576119ec6117c5565b6040526119f8836118ed565b8152611a06602084016118ed565b6020820152611a17604084016118ed565b6040820152611a28606084016118ed565b60608201529392505050565b60006001600160801b0383811690831681811015611a5457611a5461193c565b039392505050565b60006001600160801b0380831681851681830481118215151615611a8257611a8261193c565b02949350505050565b60006001600160801b03808316818516808303821115611aad57611aad61193c565b01949350505050565b6000816000190483118215151615611ad057611ad061193c565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611b0857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611b28578181015183820152602001611b10565b83811115610ee35750506000910152565b60008151808452611b51816020860160208601611b0d565b601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201526000611b8d6060830184611b39565b95945050505050565b8051801515811461190457600080fd5b60008060408385031215611bb957600080fd5b611bc283611b96565b9150602083015167ffffffffffffffff80821115611bdf57600080fd5b818501915085601f830112611bf357600080fd5b815181811115611c0557611c056117c5565b611c18601f8201601f19166020016117db565b9150808252866020828501011115611c2f57600080fd5b611c40816020840160208601611b0d565b5080925050509250929050565b600060208284031215611c5f57600080fd5b61155482611b96565b60008251611c7a818460208701611b0d565b9190910192915050565b6020815260006115546020830184611b3956fea2646970667358221220a8fc4d4095c019044b99f8898d92b5857fab3a1ac66087057be28ec5584d5d5364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveStrategy(address)": {
        "details": "Very sensitive, restricted to devAddrCan only be set once per deposit token (reported by the strategy)",
        "params": {
          "_strategy": "address"
        }
      },
      "updateBoostFee(uint256)": {
        "params": {
          "_boostFeeBips": "Boost fee bips, check BIPS_DIVISOR"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveStrategy(address)": {
        "notice": "Add an approved strategy"
      },
      "updateBoostFee(uint256)": {
        "notice": "Update optional boost fee settins"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3329,
        "contract": "contracts/strategies/crosschain/pendle/PendleProxy.sol:PendleProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3340,
        "contract": "contracts/strategies/crosschain/pendle/PendleProxy.sol:PendleProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3342,
        "contract": "contracts/strategies/crosschain/pendle/PendleProxy.sol:PendleProxy",
        "label": "boostFeeBips",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3344,
        "contract": "contracts/strategies/crosschain/pendle/PendleProxy.sol:PendleProxy",
        "label": "boostFeeReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}