{
  "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairDepositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapFeeBips",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "platformToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "reward",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "swapPair",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "swapFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct VariableRewardsStrategy.RewardSwapPair[]",
              "name": "rewardSwapPairs",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "timelock",
              "type": "address"
            }
          ],
          "internalType": "struct VariableRewardsStrategy.VariableRewardsStrategySettings",
          "name": "_settings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV2.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract ISingleStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPairDepositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapFeeBips",
          "type": "uint256"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
    "transactionIndex": 1,
    "gasUsed": "24321954",
    "logsBloom": "0x
    "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8",
    "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000174876e800",
        "logIndex": 1,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 2,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 3,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 5,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 106439860,
        "transactionHash": "0xeefce5942e9e82f55815256ea89ca17b87133961954922bbbed7f129f4b1b34a",
        "address": "0x855f76F69826b41D663dA8587C199e5Ff4C55325",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0xbad7f5736542a670d4b8088db0b81cdb4aae04a3ba8b53908c552740b74917c8"
      }
    ],
    "blockNumber": 106439860,
    "cumulativeGasUsed": "24321954",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4BFB259D8785228e5D2c19115D5DB342E2eE064",
    "0xD852A99906553fB1b47e53e883C3fA7A81C91DdD",
    "30",
    {
      "name": "Yield Yak: Compounding BETS",
      "platformToken": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "rewardSwapPairs": [
        {
          "reward": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
          "swapPair": "0x0000000000000000000000000000000000000000",
          "swapFee": "0"
        }
      ],
      "timelock": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
    },
    {
      "depositToken": "0xe26Ae3d881f3d5dEF58D795f611753804E7A6B26",
      "rewardToken": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "minTokensToReinvest": "100000000000",
      "devFeeBips": 700,
      "reinvestRewardBips": 300
    }
  ],
  "solcInputHash": "e2ae9aad667d943d09af9b22f9f7aaae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairDepositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeBips\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"platformToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"internalType\":\"struct VariableRewardsStrategy.RewardSwapPair[]\",\"name\":\"rewardSwapPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"}],\"internalType\":\"struct VariableRewardsStrategy.VariableRewardsStrategySettings\",\"name\":\"_settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV2.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract ISingleStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPairDepositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFeeBips\",\"type\":\"uint256\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Deprecated; Kept for compatibility\",\"params\":{\"newValue\":\"fee in BIPS; required to be 0\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens available to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/crosschain/betswirl/CompoundingBets.sol\":\"CompoundingBets\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from] - value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        require(value > 0, \\\"_mint::zero shares\\\");\\n        totalSupply = totalSupply + value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x893040cb129e3428494993115424a9e7549ae5935e80b3c406ee672d7199aa70\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeERC20 for IERC20;\\n\\n    struct StrategySettings {\\n        address depositToken;\\n        address rewardToken;\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public immutable depositToken;\\n    IERC20 public immutable rewardToken;\\n    address public devAddr;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    uint256 public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public ADMIN_FEE_BIPS;\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateAdminFee(uint256 oldValue, uint256 newValue);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        depositToken = IERC20(_strategySettings.depositToken);\\n        rewardToken = IERC20(_strategySettings.rewardToken);\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return (unclaimedRewards * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens available to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        if (totalSupply == 0 || totalDeposits() == 0) {\\n            return amount;\\n        }\\n        return (amount * totalSupply) / totalDeposits();\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        if (totalSupply == 0 || totalDeposits() == 0) {\\n            return 0;\\n        }\\n        return (amount * totalDeposits()) / totalSupply;\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Deprecated; Kept for compatibility\\n     * @param newValue fee in BIPS; required to be 0\\n     */\\n    function updateAdminFee(uint256 newValue) public onlyOwner {\\n        require(newValue == 0);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyOwner {\\n        require(newValue + REINVEST_REWARD_BIPS <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyOwner {\\n        require(newValue + DEV_FEE_BIPS <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x12d445990b8f4abf1619c36afec7a247f33e5a1ed708125d2769a26b4da7bc6f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9934224020ce9192433dcbefcc56ee1500985de4e9611ef42e00498fa0a99dd0\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7770575951dbb745d5ba319363b64dd1165d9a6380e685f1e8aff5cf1ca2c608\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    uint256 public constant DEFAULT_SWAP_FEE = 30;\\n    uint public constant BIPS_DIVISOR = 10000;\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        return DexLibrary.swap(amountIn, fromToken, toToken, pair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair,\\n        uint256 swapFee\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        return DexLibrary.estimateConversionThroughPair(amountIn, fromToken, toToken, swapPair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair,\\n        uint256 swapFee\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        return\\n            DexLibrary.convertRewardTokensToDepositTokens(\\n                amount,\\n                rewardToken,\\n                depositToken,\\n                swapPairToken0,\\n                DEFAULT_SWAP_FEE,\\n                swapPairToken1,\\n                DEFAULT_SWAP_FEE\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        uint256 swapFeeToken0,\\n        IPair swapPairToken1,\\n        uint256 swapFeeToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount / 2;\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0, swapFeeToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1, swapFeeToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return (amountIn * reserve1) / reserve0;\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * (BIPS_DIVISOR - swapFee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * BIPS_DIVISOR + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x00c364da9793e60b6f55fa73a532b8659d5892e0c817c710f1ea60ea6ff53093\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    uint256 public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors + 1;\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors - 1;\\n        emit RemoveDepositor(depositor);\\n    }\\n}\\n\",\"keccak256\":\"0x32e276794130901e0464470794d697dfa8dcec1d2d1377a7422303dff8753aa5\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice VariableRewardsStrategy\\n */\\nabstract contract VariableRewardsStrategy is YakStrategyV2 {\\n    using SafeERC20 for IERC20;\\n\\n    IWAVAX internal immutable WAVAX;\\n\\n    struct VariableRewardsStrategySettings {\\n        string name;\\n        address platformToken;\\n        RewardSwapPair[] rewardSwapPairs;\\n        address timelock;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct RewardSwapPair {\\n        address reward;\\n        address swapPair;\\n        uint256 swapFee;\\n    }\\n\\n    // reward -> swapPair\\n    mapping(address => RewardSwapPair) public rewardSwapPairs;\\n    address[] public supportedRewards;\\n    uint256 public rewardCount;\\n\\n    event AddReward(address rewardToken, address swapPair);\\n    event RemoveReward(address rewardToken);\\n\\n    constructor(VariableRewardsStrategySettings memory _settings, StrategySettings memory _strategySettings)\\n        YakStrategyV2(_strategySettings)\\n    {\\n        name = _settings.name;\\n        WAVAX = IWAVAX(_settings.platformToken);\\n        devAddr = 0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44;\\n\\n        for (uint256 i = 0; i < _settings.rewardSwapPairs.length; i++) {\\n            _addReward(\\n                _settings.rewardSwapPairs[i].reward,\\n                _settings.rewardSwapPairs[i].swapPair,\\n                _settings.rewardSwapPairs[i].swapFee\\n            );\\n        }\\n\\n        updateDepositsEnabled(true);\\n        transferOwnership(_settings.timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, DexLibrary.DEFAULT_SWAP_FEE);\\n    }\\n\\n    function addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, _swapFee);\\n    }\\n\\n    function _addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(IPair(_swapPair), _rewardToken, address(rewardToken)),\\n                \\\"VariableRewardsStrategy::Swap pair does not contain reward token\\\"\\n            );\\n        }\\n        rewardSwapPairs[_rewardToken] = RewardSwapPair({reward: _rewardToken, swapPair: _swapPair, swapFee: _swapFee});\\n        supportedRewards.push(_rewardToken);\\n        rewardCount = rewardCount + 1;\\n        emit AddReward(_rewardToken, _swapPair);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        delete rewardSwapPairs[_rewardToken];\\n        bool found = false;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"VariableRewardsStrategy::Reward to delete not found!\\\");\\n        supportedRewards.pop();\\n        rewardCount = rewardCount - 1;\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"VariableRewardsStrategy::Deposits disabled\\\");\\n        uint256 maxPendingRewards = MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n        if (maxPendingRewards > 0) {\\n            uint256 estimatedTotalReward = checkReward();\\n            if (estimatedTotalReward > maxPendingRewards) {\\n                _reinvest(true);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"VariableRewardsStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount - depositFee));\\n        _stakeDepositTokens(_amount, depositFee);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return (_amount * depositFeeBips) / _bip();\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"VariableRewardsStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount - withdrawFee);\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return (_amount * withdrawFeeBips) / _bip();\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertPoolRewardsToRewardToken() private returns (uint256) {\\n        uint256 rewardTokenAmount = rewardToken.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WAVAX)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WAVAX.deposit{value: balance}();\\n                }\\n                if (address(rewardToken) == address(WAVAX)) {\\n                    rewardTokenAmount += balance;\\n                    continue;\\n                }\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0) {\\n                address swapPair = rewardSwapPairs[reward].swapPair;\\n                if (swapPair > address(0)) {\\n                    rewardTokenAmount += DexLibrary.swap(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return rewardTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from the staking contract\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        _getRewards();\\n        uint256 amount = _convertPoolRewardsToRewardToken();\\n        if (!userDeposit) {\\n            require(amount >= MIN_TOKENS_TO_REINVEST, \\\"VariableRewardsStrategy::Reinvest amount too low\\\");\\n        }\\n\\n        uint256 devFee = (amount * DEV_FEE_BIPS) / BIPS_DIVISOR;\\n        if (devFee > 0) {\\n            rewardToken.safeTransfer(devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = (amount * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        if (reinvestFee > 0) {\\n            rewardToken.safeTransfer(msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount - devFee - reinvestFee);\\n\\n        uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n        _stakeDepositTokens(depositTokenAmount, depositFee);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount, uint256 _depositFee) private {\\n        require(_amount > 0, \\\"VariableRewardsStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount, _depositFee);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        if (address(rewardToken) == address(WAVAX)) {\\n            estimatedTotalReward += address(this).balance;\\n        }\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(rewardToken)) {\\n                estimatedTotalReward += rewards[i].amount;\\n            } else if (reward > address(0)) {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance + rewards[i].amount;\\n                address swapPair = rewardSwapPairs[rewards[i].reward].swapPair;\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward += DexLibrary.estimateConversionThroughPair(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[rewards[i].reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFee = _calculateWithdrawFee(depositBalance);\\n        return depositBalance - withdrawFee;\\n    }\\n\\n    function rescueDeployedFunds(\\n        uint256 _minReturnAmountAccepted,\\n        bool /*_disableDeposits*/\\n    ) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= _minReturnAmountAccepted,\\n            \\\"VariableRewardsStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0x07fa36222338499532a94010f028e57ab701765fda96743d2ca8fe59f8d240ee\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategyForSAV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./VariableRewardsStrategy.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for VariableRewardsStrategy with SA deposit.\\n */\\nabstract contract VariableRewardsStrategyForSAV2 is VariableRewardsStrategy {\\n    address public immutable swapPairDepositToken;\\n    uint256 public swapFeeBips;\\n\\n    constructor(\\n        address _swapPairDepositToken,\\n        uint256 _swapFeeBips,\\n        VariableRewardsStrategySettings memory _settings,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategy(_settings, _strategySettings) {\\n        swapPairDepositToken = _swapPairDepositToken;\\n        assignSwapPairSafely(_swapPairDepositToken);\\n        swapFeeBips = _swapFeeBips;\\n    }\\n\\n    function updateSwapFee(uint256 _swapFeeBips) external onlyDev {\\n        swapFeeBips = _swapFeeBips;\\n    }\\n\\n    function assignSwapPairSafely(address _swapPairDepositToken) internal virtual {\\n        if (address(rewardToken) != address(depositToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(\\n                    IPair(_swapPairDepositToken), address(depositToken), address(rewardToken)\\n                ),\\n                \\\"VariableRewardsStrategyForSA::swapPairDepositToken does not match deposit and reward token\\\"\\n            );\\n        }\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount)\\n        internal\\n        virtual\\n        override\\n        returns (uint256 toAmount)\\n    {\\n        if (address(rewardToken) == address(depositToken)) {\\n            return fromAmount;\\n        }\\n        return DexLibrary.swap(\\n            fromAmount, address(rewardToken), address(depositToken), IPair(swapPairDepositToken), swapFeeBips\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4d1b3962bcf9cc6573676ab3881a07d3532f93913c39ddf1538eeca1a26dbe24\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/betswirl/CompoundingBets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../VariableRewardsStrategyForSAV2.sol\\\";\\n\\nimport \\\"./interfaces/ISingleStaking.sol\\\";\\n\\ncontract CompoundingBets is VariableRewardsStrategyForSAV2 {\\n    ISingleStaking public stakingContract;\\n\\n    constructor(\\n        address _stakingContract,\\n        address _swapPairDepositToken,\\n        uint256 _swapFeeBips,\\n        VariableRewardsStrategySettings memory _settings,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategyForSAV2(_swapPairDepositToken, _swapFeeBips, _settings, _strategySettings) {\\n        stakingContract = ISingleStaking(_stakingContract);\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount, uint256) internal override {\\n        depositToken.approve(address(stakingContract), _amount);\\n        stakingContract.stake(_amount);\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 withdrawAmount) {\\n        stakingContract.withdraw(_amount);\\n        return _amount;\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        stakingContract.withdraw(totalDeposits());\\n        depositToken.approve(address(stakingContract), 0);\\n    }\\n\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        Reward[] memory pendingRewards = new Reward[](rewardCount);\\n        for (uint256 i = 0; i < pendingRewards.length; i++) {\\n            address rewardToken = supportedRewards[i];\\n            uint256 amount = stakingContract.earned(address(this), rewardToken);\\n            pendingRewards[i] = Reward({reward: rewardToken, amount: amount});\\n        }\\n        return pendingRewards;\\n    }\\n\\n    function _getRewards() internal override {\\n        stakingContract.getReward();\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        return stakingContract.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0aee46b643a0a17fd0eb7f3acefe093dc172bd0de9bb1d785111cf841207bfee\",\"license\":\"MIT\"},\"contracts/strategies/crosschain/betswirl/interfaces/ISingleStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ISingleStaking {\\n    function balanceOf(address account) external view returns (uint256);\\n    function earned(address account, address _rewardsToken) external view returns (uint256);\\n    function stake(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function getReward() external;\\n}\\n\",\"keccak256\":\"0x40b27a36c6cd6f06f8bf7d831919286c4de102812a39b4aab168ce8b1b551791\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526009610100819052685969656c642059616b60b81b6101209081526200002f916000919062000aea565b506040805180820190915260038082526216549560ea1b60209092019182526200005c9160019162000aea565b503480156200006a57600080fd5b50604051620056e9380380620056e98339810160408190526200008d9162000d94565b83838383818180600033600680546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020620056c9833981519152908290a35080516001600160a01b0390811660805260208201511660a0526040810151620000fd90620002b5565b60608101516200010d9062000345565b60808101516200011d90620003f0565b5081518051620001369160009160209091019062000aea565b5060208201516001600160a01b031660c052600980546001600160a01b03191673dcedf06fd33e1d7b6eb4b309f779a0e9d3172e4417905560005b8260400151518110156200021357620001fe836040015182815181106200019c576200019c62000f14565b60200260200101516000015184604001518381518110620001c157620001c162000f14565b60200260200101516020015185604001518481518110620001e657620001e662000f14565b6020026020010151604001516200049b60201b60201c565b806200020a8162000f40565b91505062000171565b5062000220600162000647565b60608201516200023090620006f1565b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a150506001600160a01b03841660e0526200028384620007ee565b50506013555050601480546001600160a01b0319166001600160a01b0395909516949094179093555062000fd8915050565b6006546001600160a01b03163314620003045760405162461bcd60e51b81526020600482018190526024820152600080516020620056a983398151915260448201526064015b60405180910390fd5b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b03163314620003905760405162461bcd60e51b81526020600482018190526024820152600080516020620056a98339815191526044820152606401620002fb565b612710600e5482620003a3919062000f5c565b1115620003af57600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6006546001600160a01b031633146200043b5760405162461bcd60e51b81526020600482018190526024820152600080516020620056a98339815191526044820152606401620002fb565b612710600f54826200044e919062000f5c565b11156200045a57600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b60a0516001600160a01b0316836001600160a01b0316146200054757620004d1828460a051620008c560201b620024b01760201c565b62000547576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401620002fb565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6890930180549092169092179055601254620005fc9162000f5c565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6006546001600160a01b03163314620006925760405162461bcd60e51b81526020600482018190526024820152600080516020620056a98339815191526044820152606401620002fb565b600c5481151560ff909116151503620006aa57600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a150565b6006546001600160a01b031633146200073c5760405162461bcd60e51b81526020600482018190526024820152600080516020620056a98339815191526044820152606401620002fb565b6001600160a01b038116620007a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620002fb565b6006546040516001600160a01b03808416921690600080516020620056c983398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6080516001600160a01b031660a0516001600160a01b031614620008c257620008288160805160a051620008c560201b620024b01760201c565b620008c25760405162461bcd60e51b815260206004820152605a60248201527f5661726961626c65526577617264735374726174656779466f7253413a3a737760448201527f6170506169724465706f736974546f6b656e20646f6573206e6f74206d61746360648201527f68206465706f73697420616e642072657761726420746f6b656e000000000000608482015260a401620002fb565b50565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000906573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200092c919062000f77565b6001600160a01b0316836001600160a01b03161480620009c15750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000986573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ac919062000f77565b6001600160a01b0316836001600160a01b0316145b801562000ac35750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a2e919062000f77565b6001600160a01b0316826001600160a01b0316148062000ac35750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aae919062000f77565b6001600160a01b0316826001600160a01b0316145b801562000ae25750816001600160a01b0316836001600160a01b031614155b949350505050565b82805462000af89062000f9c565b90600052602060002090601f01602090048101928262000b1c576000855562000b67565b82601f1062000b3757805160ff191683800117855562000b67565b8280016001018555821562000b67579182015b8281111562000b6757825182559160200191906001019062000b4a565b5062000b7592915062000b79565b5090565b5b8082111562000b75576000815560010162000b7a565b80516001600160a01b038116811462000ba857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000be85762000be862000bad565b60405290565b604051608081016001600160401b038111828210171562000be85762000be862000bad565b604051601f8201601f191681016001600160401b038111828210171562000c3e5762000c3e62000bad565b604052919050565b600082601f83011262000c5857600080fd5b815160206001600160401b0382111562000c765762000c7662000bad565b62000c86818360051b0162000c13565b8281526060928302850182019282820191908785111562000ca657600080fd5b8387015b8581101562000d045781818a03121562000cc45760008081fd5b62000cce62000bc3565b62000cd98262000b90565b815262000ce886830162000b90565b8187015260408281015190820152845292840192810162000caa565b5090979650505050505050565b600060a0828403121562000d2457600080fd5b60405160a081016001600160401b038111828210171562000d495762000d4962000bad565b60405290508062000d5a8362000b90565b815262000d6a6020840162000b90565b60208201526040830151604082015260608301516060820152608083015160808201525092915050565b6000806000806000610120868803121562000dae57600080fd5b62000db98662000b90565b9450602062000dca81880162000b90565b6040880151606089015191965094506001600160401b038082111562000def57600080fd5b908801906080828b03121562000e0457600080fd5b62000e0e62000bee565b82518281111562000e1e57600080fd5b8301601f81018c1362000e3057600080fd5b80518381111562000e455762000e4562000bad565b62000e59601f8201601f1916870162000c13565b8181528d8783850101111562000e6e57600080fd5b60005b8281101562000e8e57838101880151828201890152870162000e71565b8281111562000ea05760008884840101525b5083525062000eb3905083850162000b90565b84820152604083015193508184111562000ecc57600080fd5b62000eda8b85850162000c46565b604082015262000eed6060840162000b90565b60608201528095505050505062000f08876080880162000d11565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000f555762000f5562000f2a565b5060010190565b6000821982111562000f725762000f7262000f2a565b500190565b60006020828403121562000f8a57600080fd5b62000f958262000b90565b9392505050565b600181811c9082168062000fb157607f821691505b60208210810362000fd257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516145e1620010c8600039600081816104680152613be7015260008181611cbd015281816139180152818161394701526139bc01526000818161093601528181611c4e01528181611ce701528181611d5101528181611eca01528181612cd501528181612d130152818161341a015281816134750152818161386c015281816139e601528181613ac601528181613b6e0152613ba501526000818161081001528181610bc301528181610cf40152818161196c01528181611a0101528181612b8401528181612f3901528181613b4401528181613bc60152613c4601526145e16000f3fe608060405234801561001057600080fd5b50600436106103eb5760003560e01c80638aff733d1161021a578063bf16f65a11610135578063dd8ce4d6116100c8578063ed24911d11610097578063f2fde38b1161007c578063f2fde38b1461091e578063f7c618c114610931578063fdb5a03e1461095857600080fd5b8063ed24911d14610903578063ee99205c1461090b57600080fd5b8063dd8ce4d6146108b7578063e21ac825146108ca578063e75ab045146108dd578063eab89a5a146108f057600080fd5b8063d0ed26ae11610104578063d0ed26ae14610845578063d505accf14610858578063da09c72c1461086b578063dd62ed3e1461087e57600080fd5b8063bf16f65a146107f0578063c4b24a4614610803578063c89039c51461080b578063cff1b6ef1461083257600080fd5b8063a5534e71116101ad578063b52a321f1161017c578063b52a321f146107bf578063b6b55f25146107cc578063b9e57b80146107df578063bd079f55146107e757600080fd5b8063a5534e7114610724578063a8ae2b7c14610786578063a9059cbb14610799578063ac0d31ff146107ac57600080fd5b806395d89b41116101e957806395d89b41146106cf57806399729ec1146106d75780639e4e7318146106ea578063a4d5e67c1461071157600080fd5b80638aff733d1461068f5780638b73e606146106985780638da5cb5b146106ab5780639291d563146106bc57600080fd5b8063483c2ef01161030a578063715018a61161029d5780637d8820971161026c5780637d882097146106415780637ecebe001461064957806381837230146106695780638980f11f1461067c57600080fd5b8063715018a614610614578063789139bc1461061c57806379085425146106255780637ae267731461062e57600080fd5b80634ebb7916116102d95780634ebb7916146105c65780635b090886146105d95780635ea682ea146105e257806370a08231146105eb57600080fd5b8063483c2ef01461056a5780634a970be71461058d5780634bebd1e7146105a05780634e77ace5146105b357600080fd5b806323b872dd1161038257806330adf81f1161035157806330adf81f1461050d578063313ce567146105345780633bdc6e721461054e57806340b47e1a1461055757600080fd5b806323b872dd146104d2578063247d284b146104505780632e1a7d4d146104e55780632f4f21e2146104fa57600080fd5b806311056035116103be57806311056035146104505780631480ce1f1461046357806318160ddd146104a257806320606b70146104ab57600080fd5b806306fdde03146103f0578063076771111461040e578063095ea7b3146104255780630f23475d14610448575b600080fd5b6103f8610960565b60405161040591906140a7565b60405180910390f35b610417600d5481565b604051908152602001610405565b6104386104333660046140cf565b6109ee565b6040519015158152602001610405565b610417610a04565b61041761045e3660046140fb565b610a2f565b61048a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610405565b61041760025481565b6104177f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104386104e0366004614114565b610a40565b6104f86104f33660046140fb565b610b09565b005b6104f86105083660046140cf565b610c30565b6104177f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61053c601281565b60405160ff9091168152602001610405565b61041760075481565b6104f8610565366004614155565b610c3e565b61043861057836600461418e565b60086020526000908152604090205460ff1681565b6104f861059b3660046141c1565b610c9b565b6104f86105ae36600461418e565b610d69565b6104f86105c1366004614216565b610e86565b6104f86105d43660046140fb565b610f2d565b61041760135481565b610417600f5481565b6104176105f936600461418e565b6001600160a01b031660009081526004602052604090205490565b6104f8610fe7565b610417600b5481565b61041760125481565b6104f861063c366004614155565b611079565b61041761113d565b61041761065736600461418e565b60056020526000908152604090205481565b6104f86106773660046140fb565b6111af565b6104f861068a3660046140cf565b611238565b610417600e5481565b6104f86106a636600461418e565b6112e8565b6006546001600160a01b031661048a565b6104f86106ca36600461418e565b6114a4565b6103f861155e565b6104f86106e53660046140fb565b61156b565b6104177fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104f861071f36600461418e565b611610565b61076061073236600461418e565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b03948516815293909216602084015290820152606001610405565b6104f86107943660046140fb565b61185a565b6104386107a73660046140cf565b6118ff565b6104f86107ba366004614233565b61190c565b600c546104389060ff1681565b6104f86107da3660046140fb565b611b7e565b610417611b8b565b610417600a5481565b6104f86107fe3660046140fb565b611bca565b610417611c20565b61048a7f000000000000000000000000000000000000000000000000000000000000000081565b6104f86108403660046140fb565b611f60565b6104f8610853366004614114565b611ff4565b6104f8610866366004614258565b612055565b60095461048a906001600160a01b031681565b61041761088c366004614155565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6104176108c53660046140fb565b612168565b6104f86108d83660046140fb565b6121a8565b61048a6108eb3660046140fb565b612231565b6104176108fe3660046140fb565b61225b565b610417612295565b60145461048a906001600160a01b031681565b6104f861092c36600461418e565b612335565b61048a7f000000000000000000000000000000000000000000000000000000000000000081565b6104f8612455565b6000805461096d906142c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610999906142c6565b80156109e65780601f106109bb576101008083540402835291602001916109e6565b820191906000526020600020905b8154815290600101906020018083116109c957829003601f168201915b505050505081565b60006109fb3384846126c5565b50600192915050565b600080610a0f61113d565b90506000610a1c826127d3565b9050610a288183614310565b9250505090565b6000610a3a826127d3565b92915050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610a7a57506000198114155b15610af0576000610a8b8583614310565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610afb8686866127ed565b6001925050505b9392505050565b6000610b148261225b565b905060008111610b915760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610b9c82612911565b90506000610ba9836127d3565b9050610bea33610bb98385614310565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061298f565b610bf43385612a0f565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610c3a8282612aa3565b5050565b6009546001600160a01b03163314610c8f5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b610c3a8282601e612cd3565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b50505050610d623386612aa3565b5050505050565b6006546001600160a01b03163314610db15760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6001600160a01b03811660009081526008602052604090205460ff1615610e1a5760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610b88565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610e4c91614327565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610ece5760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b600c5481151560ff909116151503610ee557600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b03163314610f755760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b60008111610f8257600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610faf573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610f22565b6006546001600160a01b0316331461102f5760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146110c15760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611134919061433f565b610c3a57600080fd5b6014546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa919061435c565b905090565b6006546001600160a01b031633146111f75760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146112805760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6000811161128d57600080fd5b6112a16001600160a01b038316338361298f565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146113305760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6000600754116113a85760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610b88565b6001600160a01b03811660009081526008602052604090205460ff16151560011461143b5760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610b88565b6001600160a01b0381166000908152600860205260409020805460ff1916905560075461146a90600190614310565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146114f55760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001805461096d906142c6565b6006546001600160a01b031633146115b35760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b612710600e54826115c49190614327565b11156115cf57600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6009546001600160a01b031633146116615760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b60115481101561176857601181815481106116b9576116b9614375565b6000918252602090912001546001600160a01b03908116908416036117565760118054600193506116eb908490614310565b815481106116fb576116fb614375565b600091825260209091200154601180546001600160a01b03909216918390811061172757611727614375565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806117608161438b565b91505061169c565b50806117dc5760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610b88565b60118054806117ed576117ed6143a4565b600082815260209020810160001990810180546001600160a01b031916905501905560125461181e90600190614310565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906020016112dc565b6006546001600160a01b031633146118a25760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b612710600f54826118b39190614327565b11156118be57600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b60006109fb3384846127ed565b6006546001600160a01b031633146119545760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df919061435c565b90506119e9612ea9565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a74919061435c565b905083611a818383614310565b1015611b1b5760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610b88565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611b4461113d565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611b7857611b786000610e86565b50505050565b611b883382612aa3565b50565b600080611b96611c20565b9050600a548110611bc257612710600e5482611bb291906143ba565b611bbc91906143d9565b91505090565b600091505090565b6009546001600160a01b03163314611c1b5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b601355565b600080611c2b612faa565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb9919061435c565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603611d2157611d1e4782614327565b90505b60005b8251811015611f59576000838281518110611d4157611d41614375565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611db857838281518110611d9a57611d9a614375565b60200260200101516020015183611db19190614327565b9250611f46565b6001600160a01b03811615611f46576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e32919061435c565b90506000858481518110611e4857611e48614375565b60200260200101516020015182611e5f9190614327565b9050600060106000888781518110611e7957611e79614375565b602090810291909101810151516001600160a01b03908116835290820192909252604001600020600101541690508115801590611ebe57506001600160a01b03811615155b15611f4257611f3582857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c81518110611f0057611f00614375565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060020154613125565b611f3f9087614327565b95505b5050505b5080611f518161438b565b915050611d24565b5092915050565b6006546001600160a01b03163314611fa85760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b8015611fb357600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146120455760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b612050838383612cd3565b505050565b428410156120a55760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610b88565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a9190866120f28361438b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905061215388828686866131f3565b61215e8888886126c5565b5050505050505050565b600060025460001480612180575061217e61113d565b155b15612189575090565b61219161113d565b60025461219e90846143ba565b610a3a91906143d9565b6006546001600160a01b031633146121f05760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b6011818154811061224157600080fd5b6000918252602090912001546001600160a01b0316905081565b600060025460001480612273575061227161113d565b155b1561228057506000919050565b60025461228b61113d565b61219e90846143ba565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516122ca91906143fb565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b0316331461237d5760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6001600160a01b0381166123f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b88565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146124a45760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610b88565b6124ae6000613353565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125149190614496565b6001600160a01b0316836001600160a01b031614806125a55750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561256c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125909190614496565b6001600160a01b0316836001600160a01b0316145b801561269f5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260e9190614496565b6001600160a01b0316826001600160a01b0316148061269f5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268a9190614496565b6001600160a01b0316826001600160a01b0316145b80156126bd5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b03831661271b5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610b88565b6001600160a01b0382166127715760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610b88565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000806127106127e382856143ba565b610b0291906143d9565b6001600160a01b0382166128695760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610b88565b6001600160a01b03831660009081526004602052604090205461288d908290614310565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546128bd908290614327565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906127c69085815260200190565b6014546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561297157600080fd5b505af1158015612985573d6000803e3d6000fd5b5093949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612050908490613520565b6001600160a01b038216600090815260046020526040902054612a33908290614310565b6001600160a01b038316600090815260046020526040902055600254612a5a908290614310565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff161515600114612b205760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610b88565b600b548015612b49576000612b33611c20565b905081811115612b4757612b476001613353565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015612bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf9919061433f565b612c6b5760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610b88565b6000612c76836127d3565b9050612c8e84612c896108c58487614310565b613605565b612c9883826136db565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610c2291815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614612dab57612d3782847f00000000000000000000000000000000000000000000000000000000000000006124b0565b612dab576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610b88565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6890930180549092169092179055601254612e5e91614327565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6014546001600160a01b0316632e1a7d4d612ec261113d565b6040518263ffffffff1660e01b8152600401612ee091815260200190565b600060405180830381600087803b158015612efa57600080fd5b505af1158015612f0e573d6000803e3d6000fd5b505060145460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201527f0000000000000000000000000000000000000000000000000000000000000000909116925063095ea7b391506044016020604051808303816000875af1158015612f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b88919061433f565b6060600060125467ffffffffffffffff811115612fc957612fc96144b3565b60405190808252806020026020018201604052801561300e57816020015b6040805180820190915260008082526020820152815260200190600190039081612fe75790505b50905060005b815181101561311f5760006011828154811061303257613032614375565b60009182526020822001546014546040517f211dc32d0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0392831660248201819052945091169063211dc32d90604401602060405180830381865afa1580156130a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cd919061435c565b90506040518060400160405280836001600160a01b03168152602001828152508484815181106130ff576130ff614375565b6020026020010181905250505080806131179061438b565b915050613014565b50919050565b600080613132868661375b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319a91906144e7565b5091509150876001600160a01b0316836001600160a01b0316146131ba57905b6131e689836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff168861378c565b9998505050505050505050565b60006131fd612295565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156132a3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906132d95750866001600160a01b0316816001600160a01b0316145b61334a5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610b88565b50505050505050565b61335b6137e6565b600061336561384a565b9050816133e457600a548110156133e45760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610b88565b6000612710600f54836133f791906143ba565b61340191906143d9565b9050801561344357600954613443906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361298f565b6000612710600e548461345691906143ba565b61346091906143d9565b9050801561349c5761349c6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338361298f565b60006134bb826134ac8587614310565b6134b69190614310565b613b40565b905060006134c8826127d3565b90506134d482826136db565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346134fd61113d565b6002546040805192835260208301919091520160405180910390a1505050505050565b6000613575826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c0e9092919063ffffffff16565b8051909150156120505780806020019051810190613593919061433f565b6120505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b88565b600081116136555760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610b88565b806002546136639190614327565b6002556001600160a01b03821660009081526004602052604090205461368a908290614327565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612a979085815260200190565b600082116137515760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610b88565b610c3a8282613c1d565b600080826001600160a01b0316846001600160a01b03161061377e578284613781565b83835b915091509250929050565b60008061379b83612710614310565b6137a590876143ba565b905060006137b385836143ba565b90506000826137c4612710896143ba565b6137ce9190614327565b90506137da81836143d9565b98975050505050505050565b601460009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561383657600080fd5b505af1158015611b78573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156138b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d7919061435c565b60115490915060005b81811015613b38576000601182815481106138fd576138fd614375565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613a28574780156139ba577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156139a057600080fd5b505af11580156139b4573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613a2657613a1d8186614327565b94505050613b26565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a93919061435c565b90508015613b23576001600160a01b03808316600090815260106020526040902060010154168015613b2157613b1482847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b0316815260200190815260200160002060020154613d31565b613b1e9087614327565b95505b505b50505b80613b308161438b565b9150506138e0565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613b9f575090565b610a3a827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000601354613d31565b60606126bd8484600085613ece565b60145460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015613c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb5919061433f565b506014546040517fa694fc3a000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063a694fc3a90602401600060405180830381600087803b158015613d1557600080fd5b505af1158015613d29573d6000803e3d6000fd5b505050505050565b600080613d3e868661375b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613da691906144e7565b5091509150876001600160a01b0316836001600160a01b031614613dc657905b600080613df58b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a61378c565b9050896001600160a01b0316856001600160a01b031614613e1257905b613e266001600160a01b038b16898d61298f565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f90613e7e9085908590309060248101614537565b600060405180830381600087803b158015613e9857600080fd5b505af1158015613eac573d6000803e3d6000fd5b50505050818111613ebd5781613ebf565b805b9b9a5050505050505050505050565b606082471015613f465760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b88565b6001600160a01b0385163b613f9d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b88565b600080866001600160a01b03168587604051613fb9919061456f565b60006040518083038185875af1925050503d8060008114613ff6576040519150601f19603f3d011682016040523d82523d6000602084013e613ffb565b606091505b509150915061400b828286614016565b979650505050505050565b60608315614025575081610b02565b8251156140355782518084602001fd5b8160405162461bcd60e51b8152600401610b8891906140a7565b60005b8381101561406a578181015183820152602001614052565b83811115611b785750506000910152565b6000815180845261409381602086016020860161404f565b601f01601f19169290920160200192915050565b602081526000610b02602083018461407b565b6001600160a01b0381168114611b8857600080fd5b600080604083850312156140e257600080fd5b82356140ed816140ba565b946020939093013593505050565b60006020828403121561410d57600080fd5b5035919050565b60008060006060848603121561412957600080fd5b8335614134816140ba565b92506020840135614144816140ba565b929592945050506040919091013590565b6000806040838503121561416857600080fd5b8235614173816140ba565b91506020830135614183816140ba565b809150509250929050565b6000602082840312156141a057600080fd5b8135610b02816140ba565b803560ff811681146141bc57600080fd5b919050565b600080600080600060a086880312156141d957600080fd5b85359450602086013593506141f0604087016141ab565b94979396509394606081013594506080013592915050565b8015158114611b8857600080fd5b60006020828403121561422857600080fd5b8135610b0281614208565b6000806040838503121561424657600080fd5b82359150602083013561418381614208565b600080600080600080600060e0888a03121561427357600080fd5b873561427e816140ba565b9650602088013561428e816140ba565b955060408801359450606088013593506142aa608089016141ab565b925060a0880135915060c0880135905092959891949750929550565b600181811c908216806142da57607f821691505b60208210810361311f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614322576143226142fa565b500390565b6000821982111561433a5761433a6142fa565b500190565b60006020828403121561435157600080fd5b8151610b0281614208565b60006020828403121561436e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161439d5761439d6142fa565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156143d4576143d46142fa565b500290565b6000826143f657634e487b7160e01b600052601260045260246000fd5b500490565b600080835481600182811c91508083168061441757607f831692505b6020808410820361443657634e487b7160e01b86526022600452602486fd5b81801561444a576001811461445b57614488565b60ff19861689528489019650614488565b60008a81526020902060005b868110156144805781548b820152908501908301614467565b505084890196505b509498975050505050505050565b6000602082840312156144a857600080fd5b8151610b02816140ba565b634e487b7160e01b600052604160045260246000fd5b80516dffffffffffffffffffffffffffff811681146141bc57600080fd5b6000806000606084860312156144fc57600080fd5b614505846144c9565b9250614513602085016144c9565b9150604084015163ffffffff8116811461452c57600080fd5b809150509250925092565b8481528360208201526001600160a01b0383166040820152608060608201526000614565608083018461407b565b9695505050505050565b6000825161458181846020870161404f565b919091019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220f75363878dc84c0a67ee6f6ee22fbd96a02e0f29c33f01a1a73814b221881f8d64736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103eb5760003560e01c80638aff733d1161021a578063bf16f65a11610135578063dd8ce4d6116100c8578063ed24911d11610097578063f2fde38b1161007c578063f2fde38b1461091e578063f7c618c114610931578063fdb5a03e1461095857600080fd5b8063ed24911d14610903578063ee99205c1461090b57600080fd5b8063dd8ce4d6146108b7578063e21ac825146108ca578063e75ab045146108dd578063eab89a5a146108f057600080fd5b8063d0ed26ae11610104578063d0ed26ae14610845578063d505accf14610858578063da09c72c1461086b578063dd62ed3e1461087e57600080fd5b8063bf16f65a146107f0578063c4b24a4614610803578063c89039c51461080b578063cff1b6ef1461083257600080fd5b8063a5534e71116101ad578063b52a321f1161017c578063b52a321f146107bf578063b6b55f25146107cc578063b9e57b80146107df578063bd079f55146107e757600080fd5b8063a5534e7114610724578063a8ae2b7c14610786578063a9059cbb14610799578063ac0d31ff146107ac57600080fd5b806395d89b41116101e957806395d89b41146106cf57806399729ec1146106d75780639e4e7318146106ea578063a4d5e67c1461071157600080fd5b80638aff733d1461068f5780638b73e606146106985780638da5cb5b146106ab5780639291d563146106bc57600080fd5b8063483c2ef01161030a578063715018a61161029d5780637d8820971161026c5780637d882097146106415780637ecebe001461064957806381837230146106695780638980f11f1461067c57600080fd5b8063715018a614610614578063789139bc1461061c57806379085425146106255780637ae267731461062e57600080fd5b80634ebb7916116102d95780634ebb7916146105c65780635b090886146105d95780635ea682ea146105e257806370a08231146105eb57600080fd5b8063483c2ef01461056a5780634a970be71461058d5780634bebd1e7146105a05780634e77ace5146105b357600080fd5b806323b872dd1161038257806330adf81f1161035157806330adf81f1461050d578063313ce567146105345780633bdc6e721461054e57806340b47e1a1461055757600080fd5b806323b872dd146104d2578063247d284b146104505780632e1a7d4d146104e55780632f4f21e2146104fa57600080fd5b806311056035116103be57806311056035146104505780631480ce1f1461046357806318160ddd146104a257806320606b70146104ab57600080fd5b806306fdde03146103f0578063076771111461040e578063095ea7b3146104255780630f23475d14610448575b600080fd5b6103f8610960565b60405161040591906140a7565b60405180910390f35b610417600d5481565b604051908152602001610405565b6104386104333660046140cf565b6109ee565b6040519015158152602001610405565b610417610a04565b61041761045e3660046140fb565b610a2f565b61048a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610405565b61041760025481565b6104177f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104386104e0366004614114565b610a40565b6104f86104f33660046140fb565b610b09565b005b6104f86105083660046140cf565b610c30565b6104177f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61053c601281565b60405160ff9091168152602001610405565b61041760075481565b6104f8610565366004614155565b610c3e565b61043861057836600461418e565b60086020526000908152604090205460ff1681565b6104f861059b3660046141c1565b610c9b565b6104f86105ae36600461418e565b610d69565b6104f86105c1366004614216565b610e86565b6104f86105d43660046140fb565b610f2d565b61041760135481565b610417600f5481565b6104176105f936600461418e565b6001600160a01b031660009081526004602052604090205490565b6104f8610fe7565b610417600b5481565b61041760125481565b6104f861063c366004614155565b611079565b61041761113d565b61041761065736600461418e565b60056020526000908152604090205481565b6104f86106773660046140fb565b6111af565b6104f861068a3660046140cf565b611238565b610417600e5481565b6104f86106a636600461418e565b6112e8565b6006546001600160a01b031661048a565b6104f86106ca36600461418e565b6114a4565b6103f861155e565b6104f86106e53660046140fb565b61156b565b6104177fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104f861071f36600461418e565b611610565b61076061073236600461418e565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b03948516815293909216602084015290820152606001610405565b6104f86107943660046140fb565b61185a565b6104386107a73660046140cf565b6118ff565b6104f86107ba366004614233565b61190c565b600c546104389060ff1681565b6104f86107da3660046140fb565b611b7e565b610417611b8b565b610417600a5481565b6104f86107fe3660046140fb565b611bca565b610417611c20565b61048a7f000000000000000000000000000000000000000000000000000000000000000081565b6104f86108403660046140fb565b611f60565b6104f8610853366004614114565b611ff4565b6104f8610866366004614258565b612055565b60095461048a906001600160a01b031681565b61041761088c366004614155565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6104176108c53660046140fb565b612168565b6104f86108d83660046140fb565b6121a8565b61048a6108eb3660046140fb565b612231565b6104176108fe3660046140fb565b61225b565b610417612295565b60145461048a906001600160a01b031681565b6104f861092c36600461418e565b612335565b61048a7f000000000000000000000000000000000000000000000000000000000000000081565b6104f8612455565b6000805461096d906142c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610999906142c6565b80156109e65780601f106109bb576101008083540402835291602001916109e6565b820191906000526020600020905b8154815290600101906020018083116109c957829003601f168201915b505050505081565b60006109fb3384846126c5565b50600192915050565b600080610a0f61113d565b90506000610a1c826127d3565b9050610a288183614310565b9250505090565b6000610a3a826127d3565b92915050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610a7a57506000198114155b15610af0576000610a8b8583614310565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610afb8686866127ed565b6001925050505b9392505050565b6000610b148261225b565b905060008111610b915760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610b9c82612911565b90506000610ba9836127d3565b9050610bea33610bb98385614310565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061298f565b610bf43385612a0f565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610c3a8282612aa3565b5050565b6009546001600160a01b03163314610c8f5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b610c3a8282601e612cd3565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b50505050610d623386612aa3565b5050505050565b6006546001600160a01b03163314610db15760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6001600160a01b03811660009081526008602052604090205460ff1615610e1a5760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610b88565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610e4c91614327565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610ece5760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b600c5481151560ff909116151503610ee557600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b03163314610f755760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b60008111610f8257600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610faf573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610f22565b6006546001600160a01b0316331461102f5760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146110c15760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611134919061433f565b610c3a57600080fd5b6014546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa919061435c565b905090565b6006546001600160a01b031633146111f75760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146112805760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6000811161128d57600080fd5b6112a16001600160a01b038316338361298f565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146113305760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6000600754116113a85760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610b88565b6001600160a01b03811660009081526008602052604090205460ff16151560011461143b5760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610b88565b6001600160a01b0381166000908152600860205260409020805460ff1916905560075461146a90600190614310565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146114f55760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001805461096d906142c6565b6006546001600160a01b031633146115b35760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b612710600e54826115c49190614327565b11156115cf57600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6009546001600160a01b031633146116615760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b60115481101561176857601181815481106116b9576116b9614375565b6000918252602090912001546001600160a01b03908116908416036117565760118054600193506116eb908490614310565b815481106116fb576116fb614375565b600091825260209091200154601180546001600160a01b03909216918390811061172757611727614375565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806117608161438b565b91505061169c565b50806117dc5760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610b88565b60118054806117ed576117ed6143a4565b600082815260209020810160001990810180546001600160a01b031916905501905560125461181e90600190614310565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906020016112dc565b6006546001600160a01b031633146118a25760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b612710600f54826118b39190614327565b11156118be57600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b60006109fb3384846127ed565b6006546001600160a01b031633146119545760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df919061435c565b90506119e9612ea9565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a74919061435c565b905083611a818383614310565b1015611b1b5760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610b88565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611b4461113d565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611b7857611b786000610e86565b50505050565b611b883382612aa3565b50565b600080611b96611c20565b9050600a548110611bc257612710600e5482611bb291906143ba565b611bbc91906143d9565b91505090565b600091505090565b6009546001600160a01b03163314611c1b5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b601355565b600080611c2b612faa565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb9919061435c565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603611d2157611d1e4782614327565b90505b60005b8251811015611f59576000838281518110611d4157611d41614375565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611db857838281518110611d9a57611d9a614375565b60200260200101516020015183611db19190614327565b9250611f46565b6001600160a01b03811615611f46576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e32919061435c565b90506000858481518110611e4857611e48614375565b60200260200101516020015182611e5f9190614327565b9050600060106000888781518110611e7957611e79614375565b602090810291909101810151516001600160a01b03908116835290820192909252604001600020600101541690508115801590611ebe57506001600160a01b03811615155b15611f4257611f3582857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c81518110611f0057611f00614375565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060020154613125565b611f3f9087614327565b95505b5050505b5080611f518161438b565b915050611d24565b5092915050565b6006546001600160a01b03163314611fa85760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b8015611fb357600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146120455760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610b88565b612050838383612cd3565b505050565b428410156120a55760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610b88565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a9190866120f28361438b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905061215388828686866131f3565b61215e8888886126c5565b5050505050505050565b600060025460001480612180575061217e61113d565b155b15612189575090565b61219161113d565b60025461219e90846143ba565b610a3a91906143d9565b6006546001600160a01b031633146121f05760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b6011818154811061224157600080fd5b6000918252602090912001546001600160a01b0316905081565b600060025460001480612273575061227161113d565b155b1561228057506000919050565b60025461228b61113d565b61219e90846143ba565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516122ca91906143fb565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b0316331461237d5760405162461bcd60e51b8152602060048201819052602482015260008051602061458c8339815191526044820152606401610b88565b6001600160a01b0381166123f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b88565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146124a45760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610b88565b6124ae6000613353565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125149190614496565b6001600160a01b0316836001600160a01b031614806125a55750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561256c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125909190614496565b6001600160a01b0316836001600160a01b0316145b801561269f5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260e9190614496565b6001600160a01b0316826001600160a01b0316148061269f5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268a9190614496565b6001600160a01b0316826001600160a01b0316145b80156126bd5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b03831661271b5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610b88565b6001600160a01b0382166127715760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610b88565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000806127106127e382856143ba565b610b0291906143d9565b6001600160a01b0382166128695760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610b88565b6001600160a01b03831660009081526004602052604090205461288d908290614310565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546128bd908290614327565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906127c69085815260200190565b6014546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561297157600080fd5b505af1158015612985573d6000803e3d6000fd5b5093949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612050908490613520565b6001600160a01b038216600090815260046020526040902054612a33908290614310565b6001600160a01b038316600090815260046020526040902055600254612a5a908290614310565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff161515600114612b205760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610b88565b600b548015612b49576000612b33611c20565b905081811115612b4757612b476001613353565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015612bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf9919061433f565b612c6b5760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610b88565b6000612c76836127d3565b9050612c8e84612c896108c58487614310565b613605565b612c9883826136db565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610c2291815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614612dab57612d3782847f00000000000000000000000000000000000000000000000000000000000000006124b0565b612dab576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610b88565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6890930180549092169092179055601254612e5e91614327565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6014546001600160a01b0316632e1a7d4d612ec261113d565b6040518263ffffffff1660e01b8152600401612ee091815260200190565b600060405180830381600087803b158015612efa57600080fd5b505af1158015612f0e573d6000803e3d6000fd5b505060145460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201527f0000000000000000000000000000000000000000000000000000000000000000909116925063095ea7b391506044016020604051808303816000875af1158015612f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b88919061433f565b6060600060125467ffffffffffffffff811115612fc957612fc96144b3565b60405190808252806020026020018201604052801561300e57816020015b6040805180820190915260008082526020820152815260200190600190039081612fe75790505b50905060005b815181101561311f5760006011828154811061303257613032614375565b60009182526020822001546014546040517f211dc32d0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0392831660248201819052945091169063211dc32d90604401602060405180830381865afa1580156130a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cd919061435c565b90506040518060400160405280836001600160a01b03168152602001828152508484815181106130ff576130ff614375565b6020026020010181905250505080806131179061438b565b915050613014565b50919050565b600080613132868661375b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319a91906144e7565b5091509150876001600160a01b0316836001600160a01b0316146131ba57905b6131e689836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff168861378c565b9998505050505050505050565b60006131fd612295565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156132a3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906132d95750866001600160a01b0316816001600160a01b0316145b61334a5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610b88565b50505050505050565b61335b6137e6565b600061336561384a565b9050816133e457600a548110156133e45760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610b88565b6000612710600f54836133f791906143ba565b61340191906143d9565b9050801561344357600954613443906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361298f565b6000612710600e548461345691906143ba565b61346091906143d9565b9050801561349c5761349c6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338361298f565b60006134bb826134ac8587614310565b6134b69190614310565b613b40565b905060006134c8826127d3565b90506134d482826136db565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346134fd61113d565b6002546040805192835260208301919091520160405180910390a1505050505050565b6000613575826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c0e9092919063ffffffff16565b8051909150156120505780806020019051810190613593919061433f565b6120505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b88565b600081116136555760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610b88565b806002546136639190614327565b6002556001600160a01b03821660009081526004602052604090205461368a908290614327565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612a979085815260200190565b600082116137515760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610b88565b610c3a8282613c1d565b600080826001600160a01b0316846001600160a01b03161061377e578284613781565b83835b915091509250929050565b60008061379b83612710614310565b6137a590876143ba565b905060006137b385836143ba565b90506000826137c4612710896143ba565b6137ce9190614327565b90506137da81836143d9565b98975050505050505050565b601460009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561383657600080fd5b505af1158015611b78573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156138b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d7919061435c565b60115490915060005b81811015613b38576000601182815481106138fd576138fd614375565b6000918252602090912001546001600160a01b0390811691507f0000000000000000000000000000000000000000000000000000000000000000168103613a28574780156139ba577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156139a057600080fd5b505af11580156139b4573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613a2657613a1d8186614327565b94505050613b26565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a93919061435c565b90508015613b23576001600160a01b03808316600090815260106020526040902060010154168015613b2157613b1482847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b0316815260200190815260200160002060020154613d31565b613b1e9087614327565b95505b505b50505b80613b308161438b565b9150506138e0565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603613b9f575090565b610a3a827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000601354613d31565b60606126bd8484600085613ece565b60145460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015613c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb5919061433f565b506014546040517fa694fc3a000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063a694fc3a90602401600060405180830381600087803b158015613d1557600080fd5b505af1158015613d29573d6000803e3d6000fd5b505050505050565b600080613d3e868661375b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613da691906144e7565b5091509150876001600160a01b0316836001600160a01b031614613dc657905b600080613df58b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a61378c565b9050896001600160a01b0316856001600160a01b031614613e1257905b613e266001600160a01b038b16898d61298f565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f90613e7e9085908590309060248101614537565b600060405180830381600087803b158015613e9857600080fd5b505af1158015613eac573d6000803e3d6000fd5b50505050818111613ebd5781613ebf565b805b9b9a5050505050505050505050565b606082471015613f465760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b88565b6001600160a01b0385163b613f9d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b88565b600080866001600160a01b03168587604051613fb9919061456f565b60006040518083038185875af1925050503d8060008114613ff6576040519150601f19603f3d011682016040523d82523d6000602084013e613ffb565b606091505b509150915061400b828286614016565b979650505050505050565b60608315614025575081610b02565b8251156140355782518084602001fd5b8160405162461bcd60e51b8152600401610b8891906140a7565b60005b8381101561406a578181015183820152602001614052565b83811115611b785750506000910152565b6000815180845261409381602086016020860161404f565b601f01601f19169290920160200192915050565b602081526000610b02602083018461407b565b6001600160a01b0381168114611b8857600080fd5b600080604083850312156140e257600080fd5b82356140ed816140ba565b946020939093013593505050565b60006020828403121561410d57600080fd5b5035919050565b60008060006060848603121561412957600080fd5b8335614134816140ba565b92506020840135614144816140ba565b929592945050506040919091013590565b6000806040838503121561416857600080fd5b8235614173816140ba565b91506020830135614183816140ba565b809150509250929050565b6000602082840312156141a057600080fd5b8135610b02816140ba565b803560ff811681146141bc57600080fd5b919050565b600080600080600060a086880312156141d957600080fd5b85359450602086013593506141f0604087016141ab565b94979396509394606081013594506080013592915050565b8015158114611b8857600080fd5b60006020828403121561422857600080fd5b8135610b0281614208565b6000806040838503121561424657600080fd5b82359150602083013561418381614208565b600080600080600080600060e0888a03121561427357600080fd5b873561427e816140ba565b9650602088013561428e816140ba565b955060408801359450606088013593506142aa608089016141ab565b925060a0880135915060c0880135905092959891949750929550565b600181811c908216806142da57607f821691505b60208210810361311f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614322576143226142fa565b500390565b6000821982111561433a5761433a6142fa565b500190565b60006020828403121561435157600080fd5b8151610b0281614208565b60006020828403121561436e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161439d5761439d6142fa565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156143d4576143d46142fa565b500290565b6000826143f657634e487b7160e01b600052601260045260246000fd5b500490565b600080835481600182811c91508083168061441757607f831692505b6020808410820361443657634e487b7160e01b86526022600452602486fd5b81801561444a576001811461445b57614488565b60ff19861689528489019650614488565b60008a81526020902060005b868110156144805781548b820152908501908301614467565b505084890196505b509498975050505050505050565b6000602082840312156144a857600080fd5b8151610b02816140ba565b634e487b7160e01b600052604160045260246000fd5b80516dffffffffffffffffffffffffffff811681146141bc57600080fd5b6000806000606084860312156144fc57600080fd5b614505846144c9565b9250614513602085016144c9565b9150604084015163ffffffff8116811461452c57600080fd5b809150509250925092565b8481528360208201526001600160a01b0383166040820152608060608201526000614565608083018461407b565b9695505050505050565b6000825161458181846020870161404f565b919091019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220f75363878dc84c0a67ee6f6ee22fbd96a02e0f29c33f01a1a73814b221881f8d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Deprecated; Kept for compatibility",
        "params": {
          "newValue": "fee in BIPS; required to be 0"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens available to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 560,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 566,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 586,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8327,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8436,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8440,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1967,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "devAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1969,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1971,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1973,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1975,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1977,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1979,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12191,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(RewardSwapPair)12186_storage)"
      },
      {
        "astId": 12194,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12196,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "rewardCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 13665,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "swapFeeBips",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 62622,
        "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
        "label": "stakingContract",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(ISingleStaking)62834"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISingleStaking)62834": {
        "encoding": "inplace",
        "label": "contract ISingleStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardSwapPair)12186_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VariableRewardsStrategy.RewardSwapPair)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSwapPair)12186_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RewardSwapPair)12186_storage": {
        "encoding": "inplace",
        "label": "struct VariableRewardsStrategy.RewardSwapPair",
        "members": [
          {
            "astId": 12181,
            "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
            "label": "reward",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12183,
            "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
            "label": "swapPair",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12185,
            "contract": "contracts/strategies/crosschain/betswirl/CompoundingBets.sol:CompoundingBets",
            "label": "swapFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}