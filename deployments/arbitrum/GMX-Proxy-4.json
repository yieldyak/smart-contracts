{
  "address": "0xa5d89405CA2F85b4550C64ab562AFb987a00F69a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gmxDepositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouterV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_simpleRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxEthSwapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minFeeDifference",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyAndStakeGlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glpMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxDepositor",
      "outputs": [
        {
          "internalType": "contract IGmxDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxRewardRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxEthSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFeeDifference",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeESGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedESGMX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxEthSwapAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMaxEthSwapAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minFeeDifference",
          "type": "uint256"
        }
      ],
      "name": "updateMinFeeDifference",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x596dd37434530e8ec46585bc7d7d2ab6358b51fa419df0a2532f7139ee2e29e3",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xa5d89405CA2F85b4550C64ab562AFb987a00F69a",
    "transactionIndex": 4,
    "gasUsed": "2656893",
    "logsBloom": "0x
    "blockHash": "0x270b1b0e03bddac0aed5c58da1bd5e2a0178ba25b1f42be52fb3aa223d6f4543",
    "transactionHash": "0x596dd37434530e8ec46585bc7d7d2ab6358b51fa419df0a2532f7139ee2e29e3",
    "logs": [],
    "blockNumber": 208447223,
    "cumulativeGasUsed": "3462622",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBe5958F1dbb48a60EfD0A9d8D26917641d3b50ef",
    "0x159854e14A862Df9E39E1D128b8e5F70B4A3cE9B",
    "0xB95DB5B167D75e6d04227CfFFA61069348d271F5",
    "0x4f543bb63d85D28b92Af2AD1f882F86805Db484C",
    "10000000000000000000",
    "20",
    "0x599850287dD42dB3137EF82F70C5dcaBC690d524"
  ],
  "solcInputHash": "eba60e48399a7e3b8bd888d40463d274",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gmxDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouterV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_simpleRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxEthSwapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFeeDifference\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxDepositor\",\"outputs\":[{\"internalType\":\"contract IGmxDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxRewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEthSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFeeDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeESGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedESGMX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEthSwapAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxEthSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minFeeDifference\",\"type\":\"uint256\"}],\"name\":\"updateMinFeeDifference\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol\":\"GmxProxyArbitrum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9934224020ce9192433dcbefcc56ee1500985de4e9611ef42e00498fa0a99dd0\",\"license\":\"MIT\"},\"contracts/interfaces/ISimpleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../router/interfaces/IYakRouter.sol\\\";\\n\\ninterface ISimpleRouter {\\n    error UnsupportedSwap(address _tokenIn, address _tokenOut);\\n    error InvalidConfiguration();\\n\\n    struct SwapConfig {\\n        bool useYakSwapRouter;\\n        uint8 yakSwapMaxSteps;\\n        Path path;\\n    }\\n\\n    struct Path {\\n        address[] adapters;\\n        address[] tokens;\\n    }\\n\\n    function query(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (FormattedOffer memory trade);\\n\\n    function swap(FormattedOffer memory _trade) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xf736215916cbe2075222e996c43468d1bd2c42fd460f4869e2c53b7b74d0f383\",\"license\":\"MIT\"},\"contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IYakStrategy {\\n    function depositToken() external view returns (address);\\n\\n    function depositFor(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf708acb7d65bf39a9d7ed9a14cd296f7b1a9152050c688475c8cc968e07e6e70\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    uint256 public constant DEFAULT_SWAP_FEE = 30;\\n    uint public constant BIPS_DIVISOR = 10000;\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        return DexLibrary.swap(amountIn, fromToken, toToken, pair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair,\\n        uint256 swapFee\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        return DexLibrary.estimateConversionThroughPair(amountIn, fromToken, toToken, swapPair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair,\\n        uint256 swapFee\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        return\\n            DexLibrary.convertRewardTokensToDepositTokens(\\n                amount,\\n                rewardToken,\\n                depositToken,\\n                swapPairToken0,\\n                DEFAULT_SWAP_FEE,\\n                swapPairToken1,\\n                DEFAULT_SWAP_FEE\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        uint256 swapFeeToken0,\\n        IPair swapPairToken1,\\n        uint256 swapFeeToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount / 2;\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0, swapFeeToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1, swapFeeToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return (amountIn * reserve1) / reserve0;\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * (BIPS_DIVISOR - swapFee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * BIPS_DIVISOR + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x00c364da9793e60b6f55fa73a532b8659d5892e0c817c710f1ea60ea6ff53093\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/router/interfaces/IYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct Query {\\n    address adapter;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n}\\n\\nstruct Offer {\\n    bytes amounts;\\n    bytes adapters;\\n    bytes path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct FormattedOffer {\\n    uint256[] amounts;\\n    address[] adapters;\\n    address[] path;\\n    uint256 gasEstimate;\\n}\\n\\nstruct Trade {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address[] adapters;\\n}\\n\\ninterface IYakRouter {\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    // admin\\n    function setTrustedTokens(address[] memory _trustedTokens) external;\\n    function setAdapters(address[] memory _adapters) external;\\n    function setFeeClaimer(address _claimer) external;\\n    function setMinFee(uint256 _fee) external;\\n\\n    // misc\\n    function trustedTokensCount() external view returns (uint256);\\n    function adaptersCount() external view returns (uint256);\\n\\n    // query\\n\\n    function queryAdapter(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8 _index)\\n        external\\n        returns (uint256);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut, uint8[] calldata _options)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function queryNoSplit(uint256 _amountIn, address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (Query memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n\\n    // swap\\n\\n    function swapNoSplit(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitFromAVAX(Trade calldata _trade, address _to, uint256 _fee) external payable;\\n\\n    function swapNoSplitToAVAX(Trade calldata _trade, address _to, uint256 _fee) external;\\n\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2706c56d892343a14619a2414572292ef9f106a98ae53b4740f155358ec22f7e\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../interfaces/IYakStrategy.sol\\\";\\nimport \\\"../../../lib/SafeERC20.sol\\\";\\nimport \\\"../../../lib/DexLibrary.sol\\\";\\nimport \\\"./../../../interfaces/ISimpleRouter.sol\\\";\\n\\nimport \\\"./interfaces/IGmxDepositor.sol\\\";\\nimport \\\"./interfaces/IGmxRewardRouter.sol\\\";\\nimport \\\"./interfaces/IGmxRewardTracker.sol\\\";\\nimport \\\"./interfaces/IGmxProxy.sol\\\";\\nimport \\\"./interfaces/IGlpManager.sol\\\";\\nimport \\\"./interfaces/IGmxVault.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(IGmxDepositor gmxDepositor, address target, uint256 value, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returnValue) = gmxDepositor.execute(target, value, data);\\n        if (!success) revert(\\\"GmxProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\ncontract GmxProxyArbitrum is IGmxProxy {\\n    using SafeProxy for IGmxDepositor;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    address internal constant WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\n    address internal constant GMX = 0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a;\\n    address internal constant sGLP = 0x5402B5F40310bDED796c7D0F3FF6683f5C0cFfdf;\\n    address internal constant esGMX = 0xf42Ae1D54fd613C9bb14810b0588FaAa09a426cA;\\n    uint256 internal constant USDG_PRICE_PRECISION = 1e30;\\n\\n    address public devAddr;\\n    address public approvedStrategy;\\n    uint256 public maxEthSwapAmount;\\n    uint256 public minFeeDifference;\\n\\n    IGmxDepositor public immutable override gmxDepositor;\\n    address public immutable override gmxRewardRouter;\\n    address public immutable glpMinter;\\n    ISimpleRouter internal immutable simpleRouter;\\n\\n    address internal immutable gmxRewardTracker;\\n    address internal immutable glpRewardTracker;\\n    address internal immutable glpManager;\\n    address internal immutable vault;\\n    address internal immutable usdg;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"GmxProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(approvedStrategy == msg.sender, \\\"GmxProxy:onlyStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _gmxDepositor,\\n        address _gmxRewardRouter,\\n        address _gmxRewardRouterV2,\\n        address _simpleRouter,\\n        uint256 _maxEthSwapAmount,\\n        uint256 _minFeeDifference,\\n        address _devAddr\\n    ) {\\n        require(_devAddr > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = _devAddr;\\n        gmxDepositor = IGmxDepositor(_gmxDepositor);\\n        gmxRewardRouter = _gmxRewardRouter;\\n        glpMinter = _gmxRewardRouterV2;\\n        gmxRewardTracker = IGmxRewardRouter(_gmxRewardRouter).stakedGmxTracker();\\n        glpRewardTracker = IGmxRewardRouter(_gmxRewardRouter).feeGlpTracker();\\n        glpManager = IGmxRewardRouter(_gmxRewardRouterV2).glpManager();\\n        vault = IGlpManager(glpManager).vault();\\n        usdg = IGmxVault(vault).usdg();\\n        simpleRouter = ISimpleRouter(_simpleRouter);\\n        maxEthSwapAmount = _maxEthSwapAmount;\\n        minFeeDifference = _minFeeDifference;\\n    }\\n\\n    function updateDevAddr(address newValue) public onlyDev {\\n        require(newValue > address(0), \\\"GmxProxy::Invalid dev address provided\\\");\\n        devAddr = newValue;\\n    }\\n\\n    function approveStrategy(address _strategy) external onlyDev {\\n        require(approvedStrategy == address(0), \\\"GmxProxy::Strategy already defined\\\");\\n        approvedStrategy = _strategy;\\n    }\\n\\n    function updateMaxEthSwapAmount(uint256 _maxEthSwapAmount) external onlyDev {\\n        maxEthSwapAmount = _maxEthSwapAmount;\\n    }\\n\\n    function updateMinFeeDifference(uint256 _minFeeDifference) external onlyDev {\\n        minFeeDifference = _minFeeDifference;\\n    }\\n\\n    function stakeESGMX() external onlyDev {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\\"stakeEsGmx(uint256)\\\", IERC20(esGMX).balanceOf(address(gmxDepositor)))\\n        );\\n    }\\n\\n    function stakedESGMX() public view returns (uint256) {\\n        return IGmxRewardTracker(gmxRewardTracker).depositBalances(address(gmxDepositor), esGMX);\\n    }\\n\\n    function vaultHasCapacity(address _token, uint256 _usdgAmount) internal view returns (bool) {\\n        uint256 usdgAmount = IGmxVault(vault).adjustForDecimals(_usdgAmount, _token, usdg);\\n        uint256 vaultUsdgAmount = IGmxVault(vault).usdgAmounts(_token);\\n        uint256 maxUsdgAmount = IGmxVault(vault).maxUsdgAmounts(_token);\\n        return maxUsdgAmount == 0 || vaultUsdgAmount + usdgAmount < maxUsdgAmount;\\n    }\\n\\n    function buyAndStakeGlp(uint256 _amount) external override onlyStrategy returns (uint256) {\\n        address tokenIn = WETH;\\n\\n        if (_amount < maxEthSwapAmount) {\\n            uint256 price = IGmxVault(vault).getMinPrice(WETH);\\n            uint256 usdgAmount = (_amount * price) / USDG_PRICE_PRECISION;\\n            uint256 mintFeeBasisPoints = IGmxVault(vault).mintBurnFeeBasisPoints();\\n            uint256 taxBasisPoints = IGmxVault(vault).taxBasisPoints();\\n            uint256 feeBasisPoints = vaultHasCapacity(WETH, usdgAmount)\\n                ? IGmxVault(vault).getFeeBasisPoints(WETH, usdgAmount, mintFeeBasisPoints, taxBasisPoints, true)\\n                : type(uint256).max;\\n\\n            uint256 allWhiteListedTokensLength = IGmxVault(vault).allWhitelistedTokensLength();\\n            for (uint256 i = 0; i < allWhiteListedTokensLength; i++) {\\n                address whitelistedToken = IGmxVault(vault).allWhitelistedTokens(i);\\n                if (!vaultHasCapacity(whitelistedToken, usdgAmount)) continue;\\n                uint256 currentFeeBasisPoints = IGmxVault(vault).getFeeBasisPoints(\\n                    whitelistedToken, usdgAmount, mintFeeBasisPoints, taxBasisPoints, true\\n                );\\n                if (currentFeeBasisPoints + minFeeDifference < feeBasisPoints) {\\n                    feeBasisPoints = currentFeeBasisPoints;\\n                    tokenIn = whitelistedToken;\\n                }\\n            }\\n\\n            if (tokenIn != WETH) {\\n                FormattedOffer memory offer = simpleRouter.query(_amount, WETH, tokenIn);\\n                IERC20(WETH).approve(address(simpleRouter), _amount);\\n                _amount = simpleRouter.swap(offer);\\n            }\\n        }\\n\\n        IERC20(tokenIn).safeTransfer(address(gmxDepositor), _amount);\\n        gmxDepositor.safeExecute(tokenIn, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, _amount));\\n        bytes memory result = gmxDepositor.safeExecute(\\n            glpMinter,\\n            0,\\n            abi.encodeWithSignature(\\\"mintAndStakeGlp(address,uint256,uint256,uint256)\\\", tokenIn, _amount, 0, 0)\\n        );\\n        gmxDepositor.safeExecute(tokenIn, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, 0));\\n        return toUint256(result, 0);\\n    }\\n\\n    function withdrawGlp(uint256 _amount) external override onlyStrategy {\\n        _withdrawGlp(_amount);\\n    }\\n\\n    function _withdrawGlp(uint256 _amount) private {\\n        gmxDepositor.safeExecute(sGLP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function pendingRewards() external view override returns (uint256) {\\n        return IGmxRewardTracker(IGmxRewardRouter(gmxRewardRouter).feeGlpTracker()).claimable(address(gmxDepositor));\\n    }\\n\\n    function claimReward() external override onlyStrategy {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"handleRewards(bool,bool,bool,bool,bool,bool,bool)\\\", false, false, true, true, true, true, false\\n            )\\n        );\\n        uint256 reward = IERC20(WETH).balanceOf(address(gmxDepositor));\\n        gmxDepositor.safeExecute(WETH, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n    }\\n\\n    function totalDeposits() external view override returns (uint256) {\\n        return IGmxRewardTracker(glpRewardTracker).stakedAmounts(address(gmxDepositor));\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x5ce893ee92a41fc2965007341af874bdffd891a33484e50c6dbd621ec139f9e8\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGlpManager {\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x17adeb1ccc040af996b35d8198661cc33d1e9c0b3ce85c9eee28d9383ec97d3e\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxDepositor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function setGmxProxy(address _proxy) external;\\n}\\n\",\"keccak256\":\"0xd44c62d9eeae0bab1a485260ef6c4ccb2e8cc13a75df386dbc1391d46bebc855\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IGmxDepositor.sol\\\";\\n\\ninterface IGmxProxy {\\n    function gmxDepositor() external view returns (IGmxDepositor);\\n\\n    function gmxRewardRouter() external view returns (address);\\n\\n    function buyAndStakeGlp(uint256 _amount) external returns (uint256);\\n\\n    function withdrawGlp(uint256 _amount) external;\\n\\n    function pendingRewards() external view returns (uint256);\\n\\n    function claimReward() external;\\n\\n    function totalDeposits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb649305a677df66c7abad7c40e42d0d05cc106b1a5942f072398abc71f924c97\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardRouter {\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function bonusGmxTracker() external view returns (address);\\n\\n    function feeGmxTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\\n\\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp)\\n        external\\n        returns (uint256);\\n\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fbe8194e8c13787c78bdb71873686ff7bc0d32aab5489fa7c1d12a907f586a3\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3f96481089ef8357ff0fb03797a6363666cb2d7376f4f35d117d2b1f7464ef7\",\"license\":\"MIT\"},\"contracts/strategies/arbitrum/gmx/interfaces/IGmxVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxVaultPriceFeed {\\n    function getPrice(address, bool, bool, bool) external view returns (uint256);\\n}\\n\\ninterface IGmxVaultUtils {\\n    function getSwapFeeBasisPoints(address, address, uint256) external view returns (uint256);\\n\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n}\\n\\ninterface IGmxVault {\\n    function swap(address, address, address) external;\\n\\n    function whitelistedTokens(address) external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function vaultUtils() external view returns (IGmxVaultUtils);\\n\\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function maxUsdgAmounts(address) external view returns (uint256);\\n\\n    function usdgAmounts(address) external view returns (uint256);\\n\\n    function reservedAmounts(address) external view returns (uint256);\\n\\n    function bufferAmounts(address) external view returns (uint256);\\n\\n    function poolAmounts(address) external view returns (uint256);\\n\\n    function usdg() external view returns (address);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function stableTokens(address) external view returns (bool);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdgDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function setBufferAmount(address, uint256) external;\\n\\n    function gov() external view returns (address);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x53dd587e3b569e1ba87a011981b7047e8058de007702d858c2676715f32081a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b50604051620027693803806200276983398101604081905262000035916200035c565b6001600160a01b0381166200009f5760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c69642064657620616464726573732070726044820152651bdd9a59195960d21b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b038381169190911790915587811660805286811660a081905290861660c0526040805163067200c560e11b81529051630ce4018a916004808201926020929091908290030181865afa1580156200010f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001359190620003df565b6001600160a01b0316610100816001600160a01b031681525050856001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200018e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b49190620003df565b6001600160a01b0316610120816001600160a01b031681525050846001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200020d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002339190620003df565b6001600160a01b03166101408190526040805163fbfa77cf60e01b8152905163fbfa77cf916004808201926020929091908290030181865afa1580156200027e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a49190620003df565b6001600160a01b03166101608190526040805163f5b91b7b60e01b8152905163f5b91b7b916004808201926020929091908290030181865afa158015620002ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003159190620003df565b6001600160a01b03908116610180529390931660e052600291909155600355506200040492505050565b80516001600160a01b03811681146200035757600080fd5b919050565b600080600080600080600060e0888a0312156200037857600080fd5b62000383886200033f565b965062000393602089016200033f565b9550620003a3604089016200033f565b9450620003b3606089016200033f565b93506080880151925060a08801519150620003d160c089016200033f565b905092959891949750929550565b600060208284031215620003f257600080fd5b620003fd826200033f565b9392505050565b60805160a05160c05160e0516101005161012051610140516101605161018051612237620005326000396000611729015260008181610b4301528181610be201528181610c6801528181610d5b01528181610dd401528181610e9301528181610f5a01528181611756015281816117ff01526118a801526000818161128901526113f60152600061060b015260006114c001526000818161107b0152818161110301526111c501526000818161018e015261134f01526000818161021701528181610344015281816108b301526114f50152600081816101400152818161031901528181610426015281816105e0015281816109250152818161096501528181610a5501528181611257015281816112f6015281816113c10152818161147b01526115a501526122376000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063affc0a95116100b2578063d28cd38a11610081578063da09c72c11610066578063da09c72c14610281578063eded3fda14610294578063fa610c171461029c57600080fd5b8063d28cd38a14610270578063d79c01961461027857600080fd5b8063affc0a9514610239578063b88a802f1461024c578063bf4d14d514610254578063d256ffbe1461026757600080fd5b80635c72f4b5116101095780638c7fd553116100ee5780638c7fd553146101ec5780639291d563146101ff5780639d54b5241461021257600080fd5b80635c72f4b5146101c35780637d882097146101d657600080fd5b8063026879dc1461013b57806311ff5fff1461017f57806328495daa146101895780633b8ae397146101b0575b600080fd5b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101876102af565b005b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101876101be366004611c84565b610451565b6101876101d1366004611ca1565b61054d565b6101de6105b0565b604051908152602001610176565b6101876101fa366004611ca1565b61067e565b61018761020d366004611c84565b6106d1565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b610187610247366004611ca1565b6107ca565b61018761081d565b6101de610262366004611ca1565b610a81565b6101de60025481565b6101de61144b565b6101de60035481565b600054610162906001600160a01b031681565b6101de6114f1565b600154610162906001600160a01b031681565b6000546001600160a01b031633146103025760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015261044e907f00000000000000000000000000000000000000000000000000000000000000009060009073f42ae1d54fd613c9bb14810b0588faaa09a426ca906370a0823190602401602060405180830381865afa1580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c79190611cba565b6040516024016103d991815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167fef8c5994000000000000000000000000000000000000000000000000000000001790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b50565b6000546001600160a01b0316331461049f5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b6001546001600160a01b03161561051e5760405162461bcd60e51b815260206004820152602260248201527f476d7850726f78793a3a537472617465677920616c726561647920646566696e60448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084016102f9565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146105a75760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c795374726174656779000000000000000000000060448201526064016102f9565b61044e816116b5565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906310c1c103906024015b602060405180830381865afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106799190611cba565b905090565b6000546001600160a01b031633146106cc5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b600255565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b6001600160a01b03811661079b5760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c696420646576206164647265737320707260448201527f6f7669646564000000000000000000000000000000000000000000000000000060648201526084016102f9565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108185760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b600355565b6001546001600160a01b031633146108775760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c795374726174656779000000000000000000000060448201526064016102f9565b604051600060248201819052604482018190526001606483018190526084830181905260a4830181905260c483015260e4820181905261094d917f000000000000000000000000000000000000000000000000000000000000000091906101040160408051601f198184030181529190526020810180516001600160e01b03167f30b70002000000000000000000000000000000000000000000000000000000001790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000907382af49447d8a07e3bd95bd0d56f35241523fbab1906370a0823190602401602060405180830381865afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190611cba565b60405133602482015260448101829052909150610a7d907382af49447d8a07e3bd95bd0d56f35241523fbab1906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b5050565b6001546000906001600160a01b03163314610ade5760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c795374726174656779000000000000000000000060448201526064016102f9565b6002547382af49447d8a07e3bd95bd0d56f35241523fbab190831015611248576040517f81a612d60000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab160048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a612d690602401602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190611cba565b905060006c0c9f2c9cd04674edea40000000610bd28387611ce9565b610bdc9190611d08565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634d47b3046040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190611cba565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a210a2b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611cba565b90506000610d0a7382af49447d8a07e3bd95bd0d56f35241523fbab1856116ea565b610d1657600019610dce565b60405163c7e074c360e01b81527382af49447d8a07e3bd95bd0d56f35241523fbab16004820152602481018590526044810184905260648101839052600160848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7e074c39060a401602060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190611cba565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190611cba565b905060005b81811015610ffa576040517fe468baf0000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e468baf090602401602060405180830381865afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190611d2a565b9050610f1281886116ea565b610f1c5750610fe8565b60405163c7e074c360e01b81526001600160a01b038281166004830152602482018990526044820188905260648201879052600160848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063c7e074c39060a401602060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190611cba565b90508460035482610fd89190611d47565b1015610fe5578094508199505b50505b80610ff281611d5f565b915050610e59565b506001600160a01b0387167382af49447d8a07e3bd95bd0d56f35241523fbab114611241576040517fef99893a000000000000000000000000000000000000000000000000000000008152600481018a90527382af49447d8a07e3bd95bd0d56f35241523fbab160248201526001600160a01b0388811660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063ef99893a90606401600060405180830381865afa1580156110c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110ec9190810190611e80565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018c90529091507382af49447d8a07e3bd95bd0d56f35241523fbab19063095ea7b3906044016020604051808303816000875af1158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190611fa5565b506040517f5b2466160000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635b246616906111fa908490600401612004565b6020604051808303816000875af1158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190611cba565b9950505b5050505050505b61127c6001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000085611933565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044810184905261131e9082906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b506040516001600160a01b03821660248201526044810184905260006064820181905260848201819052906113e9907f000000000000000000000000000000000000000000000000000000000000000090839060a40160408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526000604482018190529192506114359184916064016112c2565b5061144181600061198a565b925050505b919050565b6040517ff5d9d63e0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273f42ae1d54fd613c9bb14810b0588faaa09a426ca60248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f5d9d63e90604401610638565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115759190611d2a565b6040517f402914f50000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091169063402914f590602401610638565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401611613939291906120fa565b6000604051808303816000875af1158015611632573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261165a919081019061212b565b91509150816116ab5760405162461bcd60e51b815260206004820152601c60248201527f476d7850726f78793a3a7361666545786563757465206661696c65640000000060448201526064016102f9565b9695505050505050565b60405133602482015260448101829052610a7d90735402b5f40310bded796c7d0f3ff6683f5c0cffdf90600090606401610a21565b6040517f42152873000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0383811660248301527f00000000000000000000000000000000000000000000000000000000000000008116604483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690634215287390606401602060405180830381865afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c19190611cba565b6040517f1aa4ace50000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690631aa4ace590602401602060405180830381865afa158015611846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186a9190611cba565b6040517fad1e4f8d0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063ad1e4f8d90602401602060405180830381865afa1580156118ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119139190611cba565b90508015806116ab5750806119288484611d47565b109695505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526119859084906119f0565b505050565b6000611997826020611d47565b835110156119e75760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e6473000000000000000000000060448201526064016102f9565b50016020015190565b6000611a45826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ad59092919063ffffffff16565b8051909150156119855780806020019051810190611a639190611fa5565b6119855760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102f9565b6060611ae48484600085611aee565b90505b9392505050565b606082471015611b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102f9565b6001600160a01b0385163b611bbd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f9565b600080866001600160a01b03168587604051611bd991906121d2565b60006040518083038185875af1925050503d8060008114611c16576040519150601f19603f3d011682016040523d82523d6000602084013e611c1b565b606091505b5091509150611c2b828286611c36565b979650505050505050565b60608315611c45575081611ae7565b825115611c555782518084602001fd5b8160405162461bcd60e51b81526004016102f991906121ee565b6001600160a01b038116811461044e57600080fd5b600060208284031215611c9657600080fd5b8135611ae781611c6f565b600060208284031215611cb357600080fd5b5035919050565b600060208284031215611ccc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d0357611d03611cd3565b500290565b600082611d2557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d3c57600080fd5b8151611ae781611c6f565b60008219821115611d5a57611d5a611cd3565b500190565b600060018201611d7157611d71611cd3565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611db157611db1611d78565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611de057611de0611d78565b604052919050565b600067ffffffffffffffff821115611e0257611e02611d78565b5060051b60200190565b600082601f830112611e1d57600080fd5b81516020611e32611e2d83611de8565b611db7565b82815260059290921b84018101918181019086841115611e5157600080fd5b8286015b84811015611e75578051611e6881611c6f565b8352918301918301611e55565b509695505050505050565b60006020808385031215611e9357600080fd5b825167ffffffffffffffff80821115611eab57600080fd5b9084019060808287031215611ebf57600080fd5b611ec7611d8e565b825182811115611ed657600080fd5b8301601f81018813611ee757600080fd5b8051611ef5611e2d82611de8565b81815260059190911b8201860190868101908a831115611f1457600080fd5b928701925b82841015611f3257835182529287019290870190611f19565b84525050508284015182811115611f4857600080fd5b611f5488828601611e0c565b85830152506040830151935081841115611f6d57600080fd5b611f7987858501611e0c565b6040820152606083015160608201528094505050505092915050565b8051801515811461144657600080fd5b600060208284031215611fb757600080fd5b611ae782611f95565b600081518084526020808501945080840160005b83811015611ff95781516001600160a01b031687529582019590820190600101611fd4565b509495945050505050565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b808310156120495783518252928401926001929092019190840190612029565b50838701519350601f199250828682030160408701526120698185611fc0565b935050506040850151818584030160608601526120868382611fc0565b92505050606084015160808401528091505092915050565b60005b838110156120b95781810151838201526020016120a1565b838111156120c8576000848401525b50505050565b600081518084526120e681602086016020860161209e565b601f01601f19169290920160200192915050565b6001600160a01b038416815282602082015260606040820152600061212260608301846120ce565b95945050505050565b6000806040838503121561213e57600080fd5b61214783611f95565b9150602083015167ffffffffffffffff8082111561216457600080fd5b818501915085601f83011261217857600080fd5b81518181111561218a5761218a611d78565b61219d601f8201601f1916602001611db7565b91508082528660208285010111156121b457600080fd5b6121c581602084016020860161209e565b5080925050509250929050565b600082516121e481846020870161209e565b9190910192915050565b602081526000611ae760208301846120ce56fea2646970667358221220b2b247d512daad0123ecf21c8b779a91ac27404e71cfbab61c6cb007afedb22864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063affc0a95116100b2578063d28cd38a11610081578063da09c72c11610066578063da09c72c14610281578063eded3fda14610294578063fa610c171461029c57600080fd5b8063d28cd38a14610270578063d79c01961461027857600080fd5b8063affc0a9514610239578063b88a802f1461024c578063bf4d14d514610254578063d256ffbe1461026757600080fd5b80635c72f4b5116101095780638c7fd553116100ee5780638c7fd553146101ec5780639291d563146101ff5780639d54b5241461021257600080fd5b80635c72f4b5146101c35780637d882097146101d657600080fd5b8063026879dc1461013b57806311ff5fff1461017f57806328495daa146101895780633b8ae397146101b0575b600080fd5b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101876102af565b005b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101876101be366004611c84565b610451565b6101876101d1366004611ca1565b61054d565b6101de6105b0565b604051908152602001610176565b6101876101fa366004611ca1565b61067e565b61018761020d366004611c84565b6106d1565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b610187610247366004611ca1565b6107ca565b61018761081d565b6101de610262366004611ca1565b610a81565b6101de60025481565b6101de61144b565b6101de60035481565b600054610162906001600160a01b031681565b6101de6114f1565b600154610162906001600160a01b031681565b6000546001600160a01b031633146103025760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015261044e907f00000000000000000000000000000000000000000000000000000000000000009060009073f42ae1d54fd613c9bb14810b0588faaa09a426ca906370a0823190602401602060405180830381865afa1580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c79190611cba565b6040516024016103d991815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167fef8c5994000000000000000000000000000000000000000000000000000000001790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b50565b6000546001600160a01b0316331461049f5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b6001546001600160a01b03161561051e5760405162461bcd60e51b815260206004820152602260248201527f476d7850726f78793a3a537472617465677920616c726561647920646566696e60448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084016102f9565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146105a75760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c795374726174656779000000000000000000000060448201526064016102f9565b61044e816116b5565b6040517f10c1c1030000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906310c1c103906024015b602060405180830381865afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106799190611cba565b905090565b6000546001600160a01b031633146106cc5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b600255565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b6001600160a01b03811661079b5760405162461bcd60e51b815260206004820152602660248201527f476d7850726f78793a3a496e76616c696420646576206164647265737320707260448201527f6f7669646564000000000000000000000000000000000000000000000000000060648201526084016102f9565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108185760405162461bcd60e51b815260206004820152601160248201527023b6bc283937bc3c9d1d37b7363ca232bb60791b60448201526064016102f9565b600355565b6001546001600160a01b031633146108775760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c795374726174656779000000000000000000000060448201526064016102f9565b604051600060248201819052604482018190526001606483018190526084830181905260a4830181905260c483015260e4820181905261094d917f000000000000000000000000000000000000000000000000000000000000000091906101040160408051601f198184030181529190526020810180516001600160e01b03167f30b70002000000000000000000000000000000000000000000000000000000001790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000907382af49447d8a07e3bd95bd0d56f35241523fbab1906370a0823190602401602060405180830381865afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190611cba565b60405133602482015260448101829052909150610a7d907382af49447d8a07e3bd95bd0d56f35241523fbab1906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b5050565b6001546000906001600160a01b03163314610ade5760405162461bcd60e51b815260206004820152601560248201527f476d7850726f78793a6f6e6c795374726174656779000000000000000000000060448201526064016102f9565b6002547382af49447d8a07e3bd95bd0d56f35241523fbab190831015611248576040517f81a612d60000000000000000000000000000000000000000000000000000000081527382af49447d8a07e3bd95bd0d56f35241523fbab160048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a612d690602401602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190611cba565b905060006c0c9f2c9cd04674edea40000000610bd28387611ce9565b610bdc9190611d08565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634d47b3046040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190611cba565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a210a2b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611cba565b90506000610d0a7382af49447d8a07e3bd95bd0d56f35241523fbab1856116ea565b610d1657600019610dce565b60405163c7e074c360e01b81527382af49447d8a07e3bd95bd0d56f35241523fbab16004820152602481018590526044810184905260648101839052600160848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7e074c39060a401602060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190611cba565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190611cba565b905060005b81811015610ffa576040517fe468baf0000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e468baf090602401602060405180830381865afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190611d2a565b9050610f1281886116ea565b610f1c5750610fe8565b60405163c7e074c360e01b81526001600160a01b038281166004830152602482018990526044820188905260648201879052600160848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063c7e074c39060a401602060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190611cba565b90508460035482610fd89190611d47565b1015610fe5578094508199505b50505b80610ff281611d5f565b915050610e59565b506001600160a01b0387167382af49447d8a07e3bd95bd0d56f35241523fbab114611241576040517fef99893a000000000000000000000000000000000000000000000000000000008152600481018a90527382af49447d8a07e3bd95bd0d56f35241523fbab160248201526001600160a01b0388811660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063ef99893a90606401600060405180830381865afa1580156110c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110ec9190810190611e80565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018c90529091507382af49447d8a07e3bd95bd0d56f35241523fbab19063095ea7b3906044016020604051808303816000875af1158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190611fa5565b506040517f5b2466160000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635b246616906111fa908490600401612004565b6020604051808303816000875af1158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190611cba565b9950505b5050505050505b61127c6001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000085611933565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044810184905261131e9082906000906064015b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b506040516001600160a01b03821660248201526044810184905260006064820181905260848201819052906113e9907f000000000000000000000000000000000000000000000000000000000000000090839060a40160408051601f198184030181529190526020810180516001600160e01b03167f364e2311000000000000000000000000000000000000000000000000000000001790526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169291906115de565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526000604482018190529192506114359184916064016112c2565b5061144181600061198a565b925050505b919050565b6040517ff5d9d63e0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273f42ae1d54fd613c9bb14810b0588faaa09a426ca60248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f5d9d63e90604401610638565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1c363b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115759190611d2a565b6040517f402914f50000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091169063402914f590602401610638565b6060600080866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b8152600401611613939291906120fa565b6000604051808303816000875af1158015611632573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261165a919081019061212b565b91509150816116ab5760405162461bcd60e51b815260206004820152601c60248201527f476d7850726f78793a3a7361666545786563757465206661696c65640000000060448201526064016102f9565b9695505050505050565b60405133602482015260448101829052610a7d90735402b5f40310bded796c7d0f3ff6683f5c0cffdf90600090606401610a21565b6040517f42152873000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0383811660248301527f00000000000000000000000000000000000000000000000000000000000000008116604483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690634215287390606401602060405180830381865afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c19190611cba565b6040517f1aa4ace50000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690631aa4ace590602401602060405180830381865afa158015611846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186a9190611cba565b6040517fad1e4f8d0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063ad1e4f8d90602401602060405180830381865afa1580156118ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119139190611cba565b90508015806116ab5750806119288484611d47565b109695505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526119859084906119f0565b505050565b6000611997826020611d47565b835110156119e75760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e6473000000000000000000000060448201526064016102f9565b50016020015190565b6000611a45826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ad59092919063ffffffff16565b8051909150156119855780806020019051810190611a639190611fa5565b6119855760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102f9565b6060611ae48484600085611aee565b90505b9392505050565b606082471015611b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102f9565b6001600160a01b0385163b611bbd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f9565b600080866001600160a01b03168587604051611bd991906121d2565b60006040518083038185875af1925050503d8060008114611c16576040519150601f19603f3d011682016040523d82523d6000602084013e611c1b565b606091505b5091509150611c2b828286611c36565b979650505050505050565b60608315611c45575081611ae7565b825115611c555782518084602001fd5b8160405162461bcd60e51b81526004016102f991906121ee565b6001600160a01b038116811461044e57600080fd5b600060208284031215611c9657600080fd5b8135611ae781611c6f565b600060208284031215611cb357600080fd5b5035919050565b600060208284031215611ccc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d0357611d03611cd3565b500290565b600082611d2557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d3c57600080fd5b8151611ae781611c6f565b60008219821115611d5a57611d5a611cd3565b500190565b600060018201611d7157611d71611cd3565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611db157611db1611d78565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611de057611de0611d78565b604052919050565b600067ffffffffffffffff821115611e0257611e02611d78565b5060051b60200190565b600082601f830112611e1d57600080fd5b81516020611e32611e2d83611de8565b611db7565b82815260059290921b84018101918181019086841115611e5157600080fd5b8286015b84811015611e75578051611e6881611c6f565b8352918301918301611e55565b509695505050505050565b60006020808385031215611e9357600080fd5b825167ffffffffffffffff80821115611eab57600080fd5b9084019060808287031215611ebf57600080fd5b611ec7611d8e565b825182811115611ed657600080fd5b8301601f81018813611ee757600080fd5b8051611ef5611e2d82611de8565b81815260059190911b8201860190868101908a831115611f1457600080fd5b928701925b82841015611f3257835182529287019290870190611f19565b84525050508284015182811115611f4857600080fd5b611f5488828601611e0c565b85830152506040830151935081841115611f6d57600080fd5b611f7987858501611e0c565b6040820152606083015160608201528094505050505092915050565b8051801515811461144657600080fd5b600060208284031215611fb757600080fd5b611ae782611f95565b600081518084526020808501945080840160005b83811015611ff95781516001600160a01b031687529582019590820190600101611fd4565b509495945050505050565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b808310156120495783518252928401926001929092019190840190612029565b50838701519350601f199250828682030160408701526120698185611fc0565b935050506040850151818584030160608601526120868382611fc0565b92505050606084015160808401528091505092915050565b60005b838110156120b95781810151838201526020016120a1565b838111156120c8576000848401525b50505050565b600081518084526120e681602086016020860161209e565b601f01601f19169290920160200192915050565b6001600160a01b038416815282602082015260606040820152600061212260608301846120ce565b95945050505050565b6000806040838503121561213e57600080fd5b61214783611f95565b9150602083015167ffffffffffffffff8082111561216457600080fd5b818501915085601f83011261217857600080fd5b81518181111561218a5761218a611d78565b61219d601f8201601f1916602001611db7565b91508082528660208285010111156121b457600080fd5b6121c581602084016020860161209e565b5080925050509250929050565b600082516121e481846020870161209e565b9190910192915050565b602081526000611ae760208301846120ce56fea2646970667358221220b2b247d512daad0123ecf21c8b779a91ac27404e71cfbab61c6cb007afedb22864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1618,
        "contract": "contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol:GmxProxyArbitrum",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1620,
        "contract": "contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol:GmxProxyArbitrum",
        "label": "approvedStrategy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1622,
        "contract": "contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol:GmxProxyArbitrum",
        "label": "maxEthSwapAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1624,
        "contract": "contracts/strategies/arbitrum/gmx/GmxProxyArbitrum.sol:GmxProxyArbitrum",
        "label": "minFeeDifference",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}